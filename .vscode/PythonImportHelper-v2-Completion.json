[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_FRAME_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_FRAME_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_result ;",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Timestamp",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataFrame",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataFrame",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataFrame",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dateutil.parser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "alpaca_trade_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "CancelledError",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "BarsV2",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "QuotesV2",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "TradesV2",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "alpaca_trade_api.common",
        "description": "alpaca_trade_api.common",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_credentials",
        "importPath": "alpaca_trade_api.common",
        "description": "alpaca_trade_api.common",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_data_url",
        "importPath": "alpaca_trade_api.common",
        "description": "alpaca_trade_api.common",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "UserDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "msgpack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgpack",
        "description": "msgpack",
        "detail": "msgpack",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "APIError",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "requests_mock",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests_mock",
        "description": "requests_mock",
        "detail": "requests_mock",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "setuptools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setuptools",
        "description": "setuptools",
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "A2C",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "SAC",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "TD3",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "A2C",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "SAC",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "TD3",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "description": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "description": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "PaperTradingAlpaca",
        "importPath": "finrl.meta.paper_trading.alpaca",
        "description": "finrl.meta.paper_trading.alpaca",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.alpaca",
        "documentation": {}
    },
    {
        "label": "train",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "alpaca_history",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DIA_history",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "BDay",
        "importPath": "pandas.tseries.offsets",
        "description": "pandas.tseries.offsets",
        "isExtraImport": true,
        "detail": "pandas.tseries.offsets",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "importPath": "finrl.applications.stock_trading.stock_trading",
        "description": "finrl.applications.stock_trading.stock_trading",
        "isExtraImport": true,
        "detail": "finrl.applications.stock_trading.stock_trading",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "importPath": "finrl.meta.env_stock_trading.env_stock_papertrading",
        "description": "finrl.meta.env_stock_trading.env_stock_papertrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "numpy.random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.random",
        "description": "numpy.random",
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Tensor",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Tensor",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "Normal",
        "importPath": "torch.distributions.normal",
        "description": "torch.distributions.normal",
        "isExtraImport": true,
        "detail": "torch.distributions.normal",
        "documentation": {}
    },
    {
        "label": "Normal",
        "importPath": "torch.distributions.normal",
        "description": "torch.distributions.normal",
        "isExtraImport": true,
        "detail": "torch.distributions.normal",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "currentThread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "finrl.meta.data_processors.processor_alpaca",
        "description": "finrl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "exchange_calendars",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "exchange_calendars",
        "description": "exchange_calendars",
        "detail": "exchange_calendars",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "Ticker",
        "importPath": "yfinance",
        "description": "yfinance",
        "isExtraImport": true,
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "download",
        "importPath": "yfinance",
        "description": "yfinance",
        "isExtraImport": true,
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "matplotlib.ticker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "matplotlib.dates",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.dates",
        "description": "matplotlib.dates",
        "detail": "matplotlib.dates",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "CcxtBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "ThetaDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "CcxtBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "ThetaDataBacktesting",
        "importPath": "lumibot.backtesting",
        "description": "lumibot.backtesting",
        "isExtraImport": true,
        "detail": "lumibot.backtesting",
        "documentation": {}
    },
    {
        "label": "OptionsHoldToExpiry",
        "importPath": "lumibot.example_strategies.options_hold_to_expiry",
        "description": "lumibot.example_strategies.options_hold_to_expiry",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.options_hold_to_expiry",
        "documentation": {}
    },
    {
        "label": "StockBracket",
        "importPath": "lumibot.example_strategies.stock_bracket",
        "description": "lumibot.example_strategies.stock_bracket",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_bracket",
        "documentation": {}
    },
    {
        "label": "BuyAndHold",
        "importPath": "lumibot.example_strategies.stock_buy_and_hold",
        "description": "lumibot.example_strategies.stock_buy_and_hold",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_buy_and_hold",
        "documentation": {}
    },
    {
        "label": "BuyAndHold",
        "importPath": "lumibot.example_strategies.stock_buy_and_hold",
        "description": "lumibot.example_strategies.stock_buy_and_hold",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_buy_and_hold",
        "documentation": {}
    },
    {
        "label": "BuyAndHold",
        "importPath": "lumibot.example_strategies.stock_buy_and_hold",
        "description": "lumibot.example_strategies.stock_buy_and_hold",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_buy_and_hold",
        "documentation": {}
    },
    {
        "label": "BuyAndHold",
        "importPath": "lumibot.example_strategies.stock_buy_and_hold",
        "description": "lumibot.example_strategies.stock_buy_and_hold",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_buy_and_hold",
        "documentation": {}
    },
    {
        "label": "DiversifiedLeverage",
        "importPath": "lumibot.example_strategies.stock_diversified_leverage",
        "description": "lumibot.example_strategies.stock_diversified_leverage",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_diversified_leverage",
        "documentation": {}
    },
    {
        "label": "LimitAndTrailingStop",
        "importPath": "lumibot.example_strategies.stock_limit_and_trailing_stops",
        "description": "lumibot.example_strategies.stock_limit_and_trailing_stops",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_limit_and_trailing_stops",
        "documentation": {}
    },
    {
        "label": "StockOco",
        "importPath": "lumibot.example_strategies.stock_oco",
        "description": "lumibot.example_strategies.stock_oco",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_oco",
        "documentation": {}
    },
    {
        "label": "CcxtBacktestingExampleStrategy",
        "importPath": "lumibot.example_strategies.ccxt_backtesting_example",
        "description": "lumibot.example_strategies.ccxt_backtesting_example",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.ccxt_backtesting_example",
        "documentation": {}
    },
    {
        "label": "lumibot.entities",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "TradingFee",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "TradingFee",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "AssetsMapping",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "AssetsMapping",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "TradingFee",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities",
        "description": "lumibot.entities",
        "isExtraImport": true,
        "detail": "lumibot.entities",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Momentum",
        "importPath": "lumibot.example_strategies.stock_momentum",
        "description": "lumibot.example_strategies.stock_momentum",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.stock_momentum",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders",
        "description": "lumibot.traders",
        "isExtraImport": true,
        "detail": "lumibot.traders",
        "documentation": {}
    },
    {
        "label": "LifecycleLogger",
        "importPath": "lumibot.example_strategies.lifecycle_logger",
        "description": "lumibot.example_strategies.lifecycle_logger",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.lifecycle_logger",
        "documentation": {}
    },
    {
        "label": "LifecycleLogger",
        "importPath": "lumibot.example_strategies.lifecycle_logger",
        "description": "lumibot.example_strategies.lifecycle_logger",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.lifecycle_logger",
        "documentation": {}
    },
    {
        "label": "LifecycleLogger",
        "importPath": "lumibot.example_strategies.lifecycle_logger",
        "description": "lumibot.example_strategies.lifecycle_logger",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.lifecycle_logger",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "polygon_data_backtesting",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "importPath": "tests.fixtures",
        "description": "tests.fixtures",
        "isExtraImport": true,
        "detail": "tests.fixtures",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders.trader",
        "description": "lumibot.traders.trader",
        "isExtraImport": true,
        "detail": "lumibot.traders.trader",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders.trader",
        "description": "lumibot.traders.trader",
        "isExtraImport": true,
        "detail": "lumibot.traders.trader",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lumibot.traders.trader",
        "description": "lumibot.traders.trader",
        "isExtraImport": true,
        "detail": "lumibot.traders.trader",
        "documentation": {}
    },
    {
        "label": "DebugLogTrader",
        "importPath": "lumibot.traders.debug_log_trader",
        "description": "lumibot.traders.debug_log_trader",
        "isExtraImport": true,
        "detail": "lumibot.traders.debug_log_trader",
        "documentation": {}
    },
    {
        "label": "pandas_market_calendars",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas_market_calendars",
        "description": "pandas_market_calendars",
        "detail": "pandas_market_calendars",
        "documentation": {}
    },
    {
        "label": "assert_frame_equal",
        "importPath": "pandas.testing",
        "description": "pandas.testing",
        "isExtraImport": true,
        "detail": "pandas.testing",
        "documentation": {}
    },
    {
        "label": "assert_series_equal",
        "importPath": "pandas.testing",
        "description": "pandas.testing",
        "isExtraImport": true,
        "detail": "pandas.testing",
        "documentation": {}
    },
    {
        "label": "assert_series_equal",
        "importPath": "pandas.testing",
        "description": "pandas.testing",
        "isExtraImport": true,
        "detail": "pandas.testing",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies",
        "description": "lumibot.strategies",
        "isExtraImport": true,
        "detail": "lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies",
        "description": "lumibot.strategies",
        "isExtraImport": true,
        "detail": "lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies",
        "description": "lumibot.strategies",
        "isExtraImport": true,
        "detail": "lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies",
        "description": "lumibot.strategies",
        "isExtraImport": true,
        "detail": "lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies",
        "description": "lumibot.strategies",
        "isExtraImport": true,
        "detail": "lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies",
        "description": "lumibot.strategies",
        "isExtraImport": true,
        "detail": "lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "POLYGON_API_KEY",
        "importPath": "lumibot.credentials",
        "description": "lumibot.credentials",
        "isExtraImport": true,
        "detail": "lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "POLYGON_API_KEY",
        "importPath": "lumibot.credentials",
        "description": "lumibot.credentials",
        "isExtraImport": true,
        "detail": "lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "TRADIER_CONFIG",
        "importPath": "lumibot.credentials",
        "description": "lumibot.credentials",
        "isExtraImport": true,
        "detail": "lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "ALPACA_CONFIG",
        "importPath": "lumibot.credentials",
        "description": "lumibot.credentials",
        "isExtraImport": true,
        "detail": "lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "IS_BACKTESTING",
        "importPath": "lumibot.credentials",
        "description": "lumibot.credentials",
        "isExtraImport": true,
        "detail": "lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "POLYGON_API_KEY",
        "importPath": "lumibot.credentials",
        "description": "lumibot.credentials",
        "isExtraImport": true,
        "detail": "lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lumibot.strategies.strategy",
        "description": "lumibot.strategies.strategy",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "StrategyExecutor",
        "importPath": "lumibot.strategies.strategy_executor",
        "description": "lumibot.strategies.strategy_executor",
        "isExtraImport": true,
        "detail": "lumibot.strategies.strategy_executor",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv ;",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers.alpaca",
        "description": "lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers.alpaca",
        "description": "lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers.alpaca",
        "description": "lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "AlpacaData",
        "importPath": "lumibot.data_sources.alpaca_data",
        "description": "lumibot.data_sources.alpaca_data",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.alpaca_data",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities.asset",
        "description": "lumibot.entities.asset",
        "isExtraImport": true,
        "detail": "lumibot.entities.asset",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities.asset",
        "description": "lumibot.entities.asset",
        "isExtraImport": true,
        "detail": "lumibot.entities.asset",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities.asset",
        "description": "lumibot.entities.asset",
        "isExtraImport": true,
        "detail": "lumibot.entities.asset",
        "documentation": {}
    },
    {
        "label": "Asset",
        "importPath": "lumibot.entities.asset",
        "description": "lumibot.entities.asset",
        "isExtraImport": true,
        "detail": "lumibot.entities.asset",
        "documentation": {}
    },
    {
        "label": "Bars",
        "importPath": "lumibot.entities.bars",
        "description": "lumibot.entities.bars",
        "isExtraImport": true,
        "detail": "lumibot.entities.bars",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "lumibot.entities.order",
        "description": "lumibot.entities.order",
        "isExtraImport": true,
        "detail": "lumibot.entities.order",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "lumibot.entities.position",
        "description": "lumibot.entities.position",
        "isExtraImport": true,
        "detail": "lumibot.entities.position",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "AlpacaData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "TradierData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "YahooData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "AlpacaData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "AlphaVantageData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "CcxtBacktestingData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "YahooData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "AlpacaData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSource",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "CcxtData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "ExampleBrokerData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersRESTData",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSource",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSource",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "importPath": "lumibot.data_sources",
        "description": "lumibot.data_sources",
        "isExtraImport": true,
        "detail": "lumibot.data_sources",
        "documentation": {}
    },
    {
        "label": "print_full_pandas_dataframes",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "set_pandas_float_precision",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "CcxtCacheDB",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "print_full_pandas_dataframes",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "set_pandas_float_precision",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "print_full_pandas_dataframes",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "set_pandas_float_precision",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "polygon_helper",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "thetadata_helper",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "polygon_helper",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "thetadata_helper",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "CcxtCacheDB",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "black_scholes",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "create_options_symbol",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "print_progress_bar",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "to_datetime_aware",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "YahooHelper",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "parse_symbol",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "ComparaisonMixin",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "create_tearsheet",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "day_deduplicate",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "get_symbol_returns",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "plot_indicators",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "plot_returns",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "stats_summary",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "to_datetime_aware",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "get_risk_free_rate",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "append_locals",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "staticdecorator",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "to_datetime_aware",
        "importPath": "lumibot.tools",
        "description": "lumibot.tools",
        "isExtraImport": true,
        "detail": "lumibot.tools",
        "documentation": {}
    },
    {
        "label": "Ccxt",
        "importPath": "lumibot.brokers.ccxt",
        "description": "lumibot.brokers.ccxt",
        "isExtraImport": true,
        "detail": "lumibot.brokers.ccxt",
        "documentation": {}
    },
    {
        "label": "CcxtData",
        "importPath": "lumibot.data_sources.ccxt_data",
        "description": "lumibot.data_sources.ccxt_data",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.ccxt_data",
        "documentation": {}
    },
    {
        "label": "ImportantFunctions",
        "importPath": "lumibot.example_strategies.crypto_important_functions",
        "description": "lumibot.example_strategies.crypto_important_functions",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.crypto_important_functions",
        "documentation": {}
    },
    {
        "label": "ImportantFunctions",
        "importPath": "lumibot.example_strategies.crypto_important_functions",
        "description": "lumibot.example_strategies.crypto_important_functions",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.crypto_important_functions",
        "documentation": {}
    },
    {
        "label": "duckdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "duckdb",
        "description": "duckdb",
        "detail": "duckdb",
        "documentation": {}
    },
    {
        "label": "DataSource",
        "importPath": "lumibot.data_sources.data_source",
        "description": "lumibot.data_sources.data_source",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.data_source",
        "documentation": {}
    },
    {
        "label": "DataSource",
        "importPath": "lumibot.data_sources.data_source",
        "description": "lumibot.data_sources.data_source",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.data_source",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_DOWN",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "getcontext",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "getcontext",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_DOWN",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "DriftCalculationLogic",
        "importPath": "lumibot.example_strategies.drift_rebalancer",
        "description": "lumibot.example_strategies.drift_rebalancer",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "LimitOrderRebalanceLogic",
        "importPath": "lumibot.example_strategies.drift_rebalancer",
        "description": "lumibot.example_strategies.drift_rebalancer",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "DriftRebalancer",
        "importPath": "lumibot.example_strategies.drift_rebalancer",
        "description": "lumibot.example_strategies.drift_rebalancer",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "DriftRebalancer",
        "importPath": "lumibot.example_strategies.drift_rebalancer",
        "description": "lumibot.example_strategies.drift_rebalancer",
        "isExtraImport": true,
        "detail": "lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokers",
        "importPath": "lumibot.brokers.interactive_brokers",
        "description": "lumibot.brokers.interactive_brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersData",
        "importPath": "lumibot.data_sources.interactive_brokers_data",
        "description": "lumibot.data_sources.interactive_brokers_data",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.interactive_brokers_data",
        "documentation": {}
    },
    {
        "label": "Tradier",
        "importPath": "lumibot.brokers.tradier",
        "description": "lumibot.brokers.tradier",
        "isExtraImport": true,
        "detail": "lumibot.brokers.tradier",
        "documentation": {}
    },
    {
        "label": "TradierData",
        "importPath": "lumibot.data_sources.tradier_data",
        "description": "lumibot.data_sources.tradier_data",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.tradier_data",
        "documentation": {}
    },
    {
        "label": "TradierData",
        "importPath": "lumibot.data_sources.tradier_data",
        "description": "lumibot.data_sources.tradier_data",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.tradier_data",
        "documentation": {}
    },
    {
        "label": "sphinx_rtd_theme",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sphinx_rtd_theme",
        "description": "sphinx_rtd_theme",
        "detail": "sphinx_rtd_theme",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "ta",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ta",
        "description": "ta",
        "detail": "ta",
        "documentation": {}
    },
    {
        "label": "AutoTS",
        "importPath": "autots",
        "description": "autots",
        "isExtraImport": true,
        "detail": "autots",
        "documentation": {}
    },
    {
        "label": "AutoTS",
        "importPath": "autots",
        "description": "autots",
        "isExtraImport": true,
        "detail": "autots",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Broker",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Broker",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Broker",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Broker",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Ccxt",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokers",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Tradier",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersREST",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "ExampleBroker",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Ccxt",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokers",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersREST",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Tradier",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lumibot.brokers",
        "description": "lumibot.brokers",
        "isExtraImport": true,
        "detail": "lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "AlpacaConfig",
        "importPath": "credentials",
        "description": "credentials",
        "isExtraImport": true,
        "detail": "credentials",
        "documentation": {}
    },
    {
        "label": "AlpacaConfig",
        "importPath": "credentials",
        "description": "credentials",
        "isExtraImport": true,
        "detail": "credentials",
        "documentation": {}
    },
    {
        "label": "AlpacaConfig",
        "importPath": "credentials",
        "description": "credentials",
        "isExtraImport": true,
        "detail": "credentials",
        "documentation": {}
    },
    {
        "label": "AlpacaConfig",
        "importPath": "credentials",
        "description": "credentials",
        "isExtraImport": true,
        "detail": "credentials",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "CustomStream",
        "importPath": "lumibot.trading_builtins",
        "description": "lumibot.trading_builtins",
        "isExtraImport": true,
        "detail": "lumibot.trading_builtins",
        "documentation": {}
    },
    {
        "label": "SafeList",
        "importPath": "lumibot.trading_builtins",
        "description": "lumibot.trading_builtins",
        "isExtraImport": true,
        "detail": "lumibot.trading_builtins",
        "documentation": {}
    },
    {
        "label": "PollingStream",
        "importPath": "lumibot.trading_builtins",
        "description": "lumibot.trading_builtins",
        "isExtraImport": true,
        "detail": "lumibot.trading_builtins",
        "documentation": {}
    },
    {
        "label": "BadResponse",
        "importPath": "polygon.exceptions",
        "description": "polygon.exceptions",
        "isExtraImport": true,
        "detail": "polygon.exceptions",
        "documentation": {}
    },
    {
        "label": "termcolor",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "termcolor",
        "description": "termcolor",
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "PolygonClient",
        "importPath": "lumibot.tools.polygon_helper",
        "description": "lumibot.tools.polygon_helper",
        "isExtraImport": true,
        "detail": "lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "TradingClient",
        "importPath": "alpaca.trading.client",
        "description": "alpaca.trading.client",
        "isExtraImport": true,
        "detail": "alpaca.trading.client",
        "documentation": {}
    },
    {
        "label": "TradingClient",
        "importPath": "alpaca.trading.client",
        "description": "alpaca.trading.client",
        "isExtraImport": true,
        "detail": "alpaca.trading.client",
        "documentation": {}
    },
    {
        "label": "TradingClient",
        "importPath": "alpaca.trading.client",
        "description": "alpaca.trading.client",
        "isExtraImport": true,
        "detail": "alpaca.trading.client",
        "documentation": {}
    },
    {
        "label": "TradingStream",
        "importPath": "alpaca.trading.stream",
        "description": "alpaca.trading.stream",
        "isExtraImport": true,
        "detail": "alpaca.trading.stream",
        "documentation": {}
    },
    {
        "label": "tz",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "tz",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "tz",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "asyncio.log",
        "description": "asyncio.log",
        "isExtraImport": true,
        "detail": "asyncio.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "asyncio.log",
        "description": "asyncio.log",
        "isExtraImport": true,
        "detail": "asyncio.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "asyncio.log",
        "description": "asyncio.log",
        "isExtraImport": true,
        "detail": "asyncio.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "asyncio.log",
        "description": "asyncio.log",
        "isExtraImport": true,
        "detail": "asyncio.log",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "gcd",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "e",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ibapi.client",
        "description": "ibapi.client",
        "isExtraImport": true,
        "detail": "ibapi.client",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ibapi.contract",
        "description": "ibapi.contract",
        "isExtraImport": true,
        "detail": "ibapi.contract",
        "documentation": {}
    },
    {
        "label": "Contract",
        "importPath": "ibapi.contract",
        "description": "ibapi.contract",
        "isExtraImport": true,
        "detail": "ibapi.contract",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ibapi.order",
        "description": "ibapi.order",
        "isExtraImport": true,
        "detail": "ibapi.order",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ibapi.wrapper",
        "description": "ibapi.wrapper",
        "isExtraImport": true,
        "detail": "ibapi.wrapper",
        "documentation": {}
    },
    {
        "label": "Tradier",
        "importPath": "lumiwealth_tradier",
        "description": "lumiwealth_tradier",
        "isExtraImport": true,
        "detail": "lumiwealth_tradier",
        "documentation": {}
    },
    {
        "label": "Tradier",
        "importPath": "lumiwealth_tradier",
        "description": "lumiwealth_tradier",
        "isExtraImport": true,
        "detail": "lumiwealth_tradier",
        "documentation": {}
    },
    {
        "label": "TradierApiError",
        "importPath": "lumiwealth_tradier.base",
        "description": "lumiwealth_tradier.base",
        "isExtraImport": true,
        "detail": "lumiwealth_tradier.base",
        "documentation": {}
    },
    {
        "label": "OrderLeg",
        "importPath": "lumiwealth_tradier.orders",
        "description": "lumiwealth_tradier.orders",
        "isExtraImport": true,
        "detail": "lumiwealth_tradier.orders",
        "documentation": {}
    },
    {
        "label": "create_options_symbol",
        "importPath": "lumibot.tools.helpers",
        "description": "lumibot.tools.helpers",
        "isExtraImport": true,
        "detail": "lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "create_options_symbol",
        "importPath": "lumibot.tools.helpers",
        "description": "lumibot.tools.helpers",
        "isExtraImport": true,
        "detail": "lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "parse_timestep_qty_and_unit",
        "importPath": "lumibot.tools.helpers",
        "description": "lumibot.tools.helpers",
        "isExtraImport": true,
        "detail": "lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "importPath": "lumibot.tools.helpers",
        "description": "lumibot.tools.helpers",
        "isExtraImport": true,
        "detail": "lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "parse_timestep_qty_and_unit",
        "importPath": "lumibot.tools.helpers",
        "description": "lumibot.tools.helpers",
        "isExtraImport": true,
        "detail": "lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "to_datetime_aware",
        "importPath": "lumibot.tools.helpers",
        "description": "lumibot.tools.helpers",
        "isExtraImport": true,
        "detail": "lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "TimeFrame",
        "importPath": "alpaca.data.timeframe",
        "description": "alpaca.data.timeframe",
        "isExtraImport": true,
        "detail": "alpaca.data.timeframe",
        "documentation": {}
    },
    {
        "label": "CryptoBarsRequest",
        "importPath": "alpaca.data.requests",
        "description": "alpaca.data.requests",
        "isExtraImport": true,
        "detail": "alpaca.data.requests",
        "documentation": {}
    },
    {
        "label": "CryptoLatestQuoteRequest",
        "importPath": "alpaca.data.requests",
        "description": "alpaca.data.requests",
        "isExtraImport": true,
        "detail": "alpaca.data.requests",
        "documentation": {}
    },
    {
        "label": "CryptoLatestTradeRequest",
        "importPath": "alpaca.data.requests",
        "description": "alpaca.data.requests",
        "isExtraImport": true,
        "detail": "alpaca.data.requests",
        "documentation": {}
    },
    {
        "label": "StockBarsRequest",
        "importPath": "alpaca.data.requests",
        "description": "alpaca.data.requests",
        "isExtraImport": true,
        "detail": "alpaca.data.requests",
        "documentation": {}
    },
    {
        "label": "StockLatestTradeRequest",
        "importPath": "alpaca.data.requests",
        "description": "alpaca.data.requests",
        "isExtraImport": true,
        "detail": "alpaca.data.requests",
        "documentation": {}
    },
    {
        "label": "CryptoHistoricalDataClient",
        "importPath": "alpaca.data.historical",
        "description": "alpaca.data.historical",
        "isExtraImport": true,
        "detail": "alpaca.data.historical",
        "documentation": {}
    },
    {
        "label": "StockHistoricalDataClient",
        "importPath": "alpaca.data.historical",
        "description": "alpaca.data.historical",
        "isExtraImport": true,
        "detail": "alpaca.data.historical",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "TimeSeries",
        "importPath": "alpha_vantage.timeseries",
        "description": "alpha_vantage.timeseries",
        "isExtraImport": true,
        "detail": "alpha_vantage.timeseries",
        "documentation": {}
    },
    {
        "label": "TimeSeries",
        "importPath": "alpha_vantage.timeseries",
        "description": "alpha_vantage.timeseries",
        "isExtraImport": true,
        "detail": "alpha_vantage.timeseries",
        "documentation": {}
    },
    {
        "label": "TimeSeries",
        "importPath": "alpha_vantage.timeseries",
        "description": "alpha_vantage.timeseries",
        "isExtraImport": true,
        "detail": "alpha_vantage.timeseries",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_TIMEZONE",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_TIMEZONE",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_TIMEZONE",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_CACHE_FOLDER",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_TIMEZONE",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_CACHE_FOLDER",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_CACHE_FOLDER",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_CACHE_FOLDER",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_CACHE_FOLDER",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "LUMIBOT_DEFAULT_PYTZ",
        "importPath": "lumibot",
        "description": "lumibot",
        "isExtraImport": true,
        "detail": "lumibot",
        "documentation": {}
    },
    {
        "label": "NoDataFound",
        "importPath": "lumibot.data_sources.exceptions",
        "description": "lumibot.data_sources.exceptions",
        "isExtraImport": true,
        "detail": "lumibot.data_sources.exceptions",
        "documentation": {}
    },
    {
        "label": "ccxt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ccxt",
        "description": "ccxt",
        "detail": "ccxt",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "check_positive",
        "importPath": "lumibot.tools.types",
        "description": "lumibot.tools.types",
        "isExtraImport": true,
        "detail": "lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "check_price",
        "importPath": "lumibot.tools.types",
        "description": "lumibot.tools.types",
        "isExtraImport": true,
        "detail": "lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "check_quantity",
        "importPath": "lumibot.tools.types",
        "description": "lumibot.tools.types",
        "isExtraImport": true,
        "detail": "lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "pandas_datareader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas_datareader",
        "description": "pandas_datareader",
        "detail": "pandas_datareader",
        "documentation": {}
    },
    {
        "label": "strategy",
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "strategy.name",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.example_strategies.fasttrading_2",
        "description": "lib.MLTradingBot.lumibot00.lumibot.example_strategies.fasttrading_2",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.example_strategies.fasttrading_2",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "description": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "description": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "description": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "description": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "bindparam",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "jsonpickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jsonpickle",
        "description": "jsonpickle",
        "detail": "jsonpickle",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "MemoryJobStore",
        "importPath": "apscheduler.jobstores.memory",
        "description": "apscheduler.jobstores.memory",
        "isExtraImport": true,
        "detail": "apscheduler.jobstores.memory",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "CronTrigger",
        "importPath": "apscheduler.triggers.cron",
        "description": "apscheduler.triggers.cron",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.cron",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "quantstats_lumi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "quantstats_lumi",
        "description": "quantstats_lumi",
        "detail": "quantstats_lumi",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "make_subplots",
        "importPath": "plotly.subplots",
        "description": "plotly.subplots",
        "isExtraImport": true,
        "detail": "plotly.subplots",
        "documentation": {}
    },
    {
        "label": "MaxRetryError",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlunparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "RESTClient",
        "importPath": "polygon",
        "description": "polygon",
        "isExtraImport": true,
        "detail": "polygon",
        "documentation": {}
    },
    {
        "label": "ThetaClient",
        "importPath": "thetadata",
        "description": "thetadata",
        "isExtraImport": true,
        "detail": "thetadata",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "_thread",
        "description": "_thread",
        "isExtraImport": true,
        "detail": "_thread",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForSequenceClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForSequenceClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "finbert_utils_old",
        "description": "finbert_utils_old",
        "isExtraImport": true,
        "detail": "finbert_utils_old",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "finbert_utils_old",
        "description": "finbert_utils_old",
        "isExtraImport": true,
        "detail": "finbert_utils_old",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting.yahoo_backtesting ",
        "description": "lumibot.backtesting.yahoo_backtesting ",
        "isExtraImport": true,
        "detail": "lumibot.backtesting.yahoo_backtesting ",
        "documentation": {}
    },
    {
        "label": "os",
        "importPath": "dotenv import load_dotenv ; load_dotenv();",
        "description": "dotenv import load_dotenv ; load_dotenv();",
        "isExtraImport": true,
        "detail": "dotenv import load_dotenv ; load_dotenv();",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lumibot.backtesting ",
        "description": "lumibot.backtesting ",
        "isExtraImport": true,
        "detail": "lumibot.backtesting ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.rl.agents.elegantrl",
        "description": "lib.rl.agents.elegantrl",
        "isExtraImport": true,
        "detail": "lib.rl.agents.elegantrl",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "lib.rl.agents.elegantrl.models ",
        "description": "lib.rl.agents.elegantrl.models ",
        "isExtraImport": true,
        "detail": "lib.rl.agents.elegantrl.models ",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "AdamW",
        "importPath": "torch.optim",
        "description": "torch.optim",
        "isExtraImport": true,
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "Batch",
        "importPath": "torch_geometric.data",
        "description": "torch_geometric.data",
        "isExtraImport": true,
        "detail": "torch_geometric.data",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "torch_geometric.data",
        "description": "torch_geometric.data",
        "isExtraImport": true,
        "detail": "torch_geometric.data",
        "documentation": {}
    },
    {
        "label": "RGCNConv",
        "importPath": "torch_geometric.nn",
        "description": "torch_geometric.nn",
        "isExtraImport": true,
        "detail": "torch_geometric.nn",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "torch_geometric.nn",
        "description": "torch_geometric.nn",
        "isExtraImport": true,
        "detail": "torch_geometric.nn",
        "documentation": {}
    },
    {
        "label": "to_dense_batch",
        "importPath": "torch_geometric.utils",
        "description": "torch_geometric.utils",
        "isExtraImport": true,
        "detail": "torch_geometric.utils",
        "documentation": {}
    },
    {
        "label": "IterableDataset",
        "importPath": "torch.utils.data.dataset",
        "description": "torch.utils.data.dataset",
        "isExtraImport": true,
        "detail": "torch.utils.data.dataset",
        "documentation": {}
    },
    {
        "label": "ray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ray",
        "description": "ray",
        "detail": "ray",
        "documentation": {}
    },
    {
        "label": "tune",
        "importPath": "ray",
        "description": "ray",
        "isExtraImport": true,
        "detail": "ray",
        "documentation": {}
    },
    {
        "label": "ConcurrencyLimiter",
        "importPath": "ray.tune.search",
        "description": "ray.tune.search",
        "isExtraImport": true,
        "detail": "ray.tune.search",
        "documentation": {}
    },
    {
        "label": "Algorithm",
        "importPath": "ray.rllib.algorithms",
        "description": "ray.rllib.algorithms",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms",
        "documentation": {}
    },
    {
        "label": "register_env",
        "importPath": "ray.tune",
        "description": "ray.tune",
        "isExtraImport": true,
        "detail": "ray.tune",
        "documentation": {}
    },
    {
        "label": "RunConfig",
        "importPath": "ray.air",
        "description": "ray.air",
        "isExtraImport": true,
        "detail": "ray.air",
        "documentation": {}
    },
    {
        "label": "FailureConfig",
        "importPath": "ray.air",
        "description": "ray.air",
        "isExtraImport": true,
        "detail": "ray.air",
        "documentation": {}
    },
    {
        "label": "ScalingConfig",
        "importPath": "ray.air",
        "description": "ray.air",
        "isExtraImport": true,
        "detail": "ray.air",
        "documentation": {}
    },
    {
        "label": "TuneConfig",
        "importPath": "ray.tune.tune_config",
        "description": "ray.tune.tune_config",
        "isExtraImport": true,
        "detail": "ray.tune.tune_config",
        "documentation": {}
    },
    {
        "label": "CheckpointConfig",
        "importPath": "ray.air.config",
        "description": "ray.air.config",
        "isExtraImport": true,
        "detail": "ray.air.config",
        "documentation": {}
    },
    {
        "label": "a2c",
        "importPath": "ray.rllib.algorithms.a2c",
        "description": "ray.rllib.algorithms.a2c",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.a2c",
        "documentation": {}
    },
    {
        "label": "ddpg",
        "importPath": "ray.rllib.algorithms.ddpg",
        "description": "ray.rllib.algorithms.ddpg",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.ddpg",
        "documentation": {}
    },
    {
        "label": "ppo",
        "importPath": "ray.rllib.algorithms.ppo",
        "description": "ray.rllib.algorithms.ppo",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.ppo",
        "documentation": {}
    },
    {
        "label": "sac",
        "importPath": "ray.rllib.algorithms.sac",
        "description": "ray.rllib.algorithms.sac",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.sac",
        "documentation": {}
    },
    {
        "label": "td3",
        "importPath": "ray.rllib.algorithms.td3",
        "description": "ray.rllib.algorithms.td3",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.td3",
        "documentation": {}
    },
    {
        "label": "optuna",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optuna",
        "description": "optuna",
        "detail": "optuna",
        "documentation": {}
    },
    {
        "label": "NormalActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "OrnsteinUhlenbeckActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "NormalActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "OrnsteinUhlenbeckActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "linear_schedule",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BaseCallback",
        "importPath": "stable_baselines3.common.callbacks",
        "description": "stable_baselines3.common.callbacks",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.callbacks",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "SubprocVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "SubprocVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "finrl.agents.stablebaselines3.hyperparams_opt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "finrl.agents.stablebaselines3.hyperparams_opt",
        "description": "finrl.agents.stablebaselines3.hyperparams_opt",
        "detail": "finrl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "jqdatasdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jqdatasdk",
        "description": "jqdatasdk",
        "detail": "jqdatasdk",
        "documentation": {}
    },
    {
        "label": "calc_all_filenames",
        "importPath": "func",
        "description": "func",
        "isExtraImport": true,
        "detail": "func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "func",
        "description": "func",
        "isExtraImport": true,
        "detail": "func",
        "documentation": {}
    },
    {
        "label": "remove_all_files",
        "importPath": "func",
        "description": "func",
        "isExtraImport": true,
        "detail": "func",
        "documentation": {}
    },
    {
        "label": "wrds",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wrds",
        "description": "wrds",
        "detail": "wrds",
        "documentation": {}
    },
    {
        "label": "Timestamp",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "gymnasium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gymnasium",
        "description": "gymnasium",
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gymnasium",
        "description": "gymnasium",
        "isExtraImport": true,
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gymnasium",
        "description": "gymnasium",
        "isExtraImport": true,
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gymnasium.utils",
        "description": "gymnasium.utils",
        "isExtraImport": true,
        "detail": "gymnasium.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gymnasium.utils",
        "description": "gymnasium.utils",
        "isExtraImport": true,
        "detail": "gymnasium.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "stable_baselines3.common",
        "description": "stable_baselines3.common",
        "isExtraImport": true,
        "detail": "stable_baselines3.common",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "stable_baselines3.common",
        "description": "stable_baselines3.common",
        "isExtraImport": true,
        "detail": "stable_baselines3.common",
        "documentation": {}
    },
    {
        "label": "AgentPPO",
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "index_dict",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "sector_dict",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "usa_dict",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SP_500_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "index_dict",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "multiprocessing.sharedctypes",
        "description": "multiprocessing.sharedctypes",
        "isExtraImport": true,
        "detail": "multiprocessing.sharedctypes",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "TransformerMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "MaxAbsScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "tushare",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tushare",
        "description": "tushare",
        "detail": "tushare",
        "documentation": {}
    },
    {
        "label": "WrdsProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_wrds",
        "description": "lib.rl.meta.data_processors.processor_wrds",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_wrds",
        "documentation": {}
    },
    {
        "label": "YahooFinanceProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_yahoofinance",
        "description": "lib.rl.meta.data_processors.processor_yahoofinance",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_yahoofinance",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pyfolio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyfolio",
        "description": "pyfolio",
        "detail": "pyfolio",
        "documentation": {}
    },
    {
        "label": "timeseries",
        "importPath": "pyfolio",
        "description": "pyfolio",
        "isExtraImport": true,
        "detail": "pyfolio",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "importPath": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "description": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "lib.rl.test",
        "description": "lib.rl.test",
        "isExtraImport": true,
        "detail": "lib.rl.test",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "finbert_utils",
        "description": "finbert_utils",
        "isExtraImport": true,
        "detail": "finbert_utils",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.backtesting ",
        "description": "lib.MLTradingBot.lumibot00.lumibot.backtesting ",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.backtesting ",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "description": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "description": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "description": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "description": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.strategies",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "description": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "description": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "description": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "description": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "description": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.traders",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.brokers",
        "description": "lib.MLTradingBot.lumibot00.lumibot.brokers",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.brokers",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "isExtraImport": true,
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_SECRET",
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "isExtraImport": true,
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "isExtraImport": true,
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting  ",
        "description": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting  ",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.backtesting.yahoo_backtesting  ",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "description": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "description": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "description": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "description": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Regex",
        "importPath": "alpacalib.regex",
        "description": "alpacalib.regex",
        "isExtraImport": true,
        "detail": "alpacalib.regex",
        "documentation": {}
    },
    {
        "label": "RegexError",
        "importPath": "alpacalib.regex",
        "description": "alpacalib.regex",
        "isExtraImport": true,
        "detail": "alpacalib.regex",
        "documentation": {}
    },
    {
        "label": "NFA",
        "importPath": "alpacalib.nfa",
        "description": "alpacalib.nfa",
        "isExtraImport": true,
        "detail": "alpacalib.nfa",
        "documentation": {}
    },
    {
        "label": "DFA",
        "importPath": "alpacalib.dfa",
        "description": "alpacalib.dfa",
        "isExtraImport": true,
        "detail": "alpacalib.dfa",
        "documentation": {}
    },
    {
        "label": "Dot",
        "importPath": "alpacalib.dot",
        "description": "alpacalib.dot",
        "isExtraImport": true,
        "detail": "alpacalib.dot",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "alpacalib.options",
        "description": "alpacalib.options",
        "isExtraImport": true,
        "detail": "alpacalib.options",
        "documentation": {}
    },
    {
        "label": "OptionsError",
        "importPath": "alpacalib.options",
        "description": "alpacalib.options",
        "isExtraImport": true,
        "detail": "alpacalib.options",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "alpacalib.input",
        "description": "alpacalib.input",
        "isExtraImport": true,
        "detail": "alpacalib.input",
        "documentation": {}
    },
    {
        "label": "InputError",
        "importPath": "alpacalib.input",
        "description": "alpacalib.input",
        "isExtraImport": true,
        "detail": "alpacalib.input",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "alpacalib.output",
        "description": "alpacalib.output",
        "isExtraImport": true,
        "detail": "alpacalib.output",
        "documentation": {}
    },
    {
        "label": "OutputError",
        "importPath": "alpacalib.output",
        "description": "alpacalib.output",
        "isExtraImport": true,
        "detail": "alpacalib.output",
        "documentation": {}
    },
    {
        "label": "getpass",
        "importPath": "getpass",
        "description": "getpass",
        "isExtraImport": true,
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "print_",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "CockroachDatabase",
        "importPath": "playhouse.cockroachdb",
        "description": "playhouse.cockroachdb",
        "isExtraImport": true,
        "detail": "playhouse.cockroachdb",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "playhouse.reflection",
        "description": "playhouse.reflection",
        "isExtraImport": true,
        "detail": "playhouse.reflection",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline_to_binary",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "publish_cmdline",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "default_description",
        "importPath": "docutils.core",
        "description": "docutils.core",
        "isExtraImport": true,
        "detail": "docutils.core",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "manpage",
        "importPath": "docutils.writers",
        "description": "docutils.writers",
        "isExtraImport": true,
        "detail": "docutils.writers",
        "documentation": {}
    },
    {
        "label": "Writer",
        "importPath": "docutils.writers.odf_odt",
        "description": "docutils.writers.odf_odt",
        "isExtraImport": true,
        "detail": "docutils.writers.odf_odt",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "docutils.writers.odf_odt",
        "description": "docutils.writers.odf_odt",
        "isExtraImport": true,
        "detail": "docutils.writers.odf_odt",
        "documentation": {}
    },
    {
        "label": "prepstyles",
        "importPath": "docutils.writers.odf_odt",
        "description": "docutils.writers.odf_odt",
        "isExtraImport": true,
        "detail": "docutils.writers.odf_odt",
        "documentation": {}
    },
    {
        "label": "get_full_path",
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "isExtraImport": true,
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "GetTickerList",
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "isExtraImport": true,
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "set_yahoo_data_frame",
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "isExtraImport": true,
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "predict_with_models",
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "isExtraImport": true,
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "MarketOrderRequest",
        "importPath": "alpaca.trading.requests",
        "description": "alpaca.trading.requests",
        "isExtraImport": true,
        "detail": "alpaca.trading.requests",
        "documentation": {}
    },
    {
        "label": "MarketOrderRequest",
        "importPath": "alpaca.trading.requests",
        "description": "alpaca.trading.requests",
        "isExtraImport": true,
        "detail": "alpaca.trading.requests",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "isExtraImport": true,
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "data.columns",
        "importPath": "lib.MLTradingBot.lumibot00.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot00.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "isExtraImport": true,
        "detail": "lib.MLTradingBot.lumibot00.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "vaderSentiment.vaderSentiment",
        "description": "vaderSentiment.vaderSentiment",
        "isExtraImport": true,
        "detail": "vaderSentiment.vaderSentiment",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def main():\n  import pandas as pd\n  dir = [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n  check_and_make_directories( dir )\n  jprint(\"app.py: Directory Paths:   \",  \"   //\".join(dir),  '##')\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date = TRAIN_START_DATE,\n                      end_date = TRADE_END_DATE,\n                      ticker_list = config_tickers.DOW_30_TICKER).fetch_data()\n#  df.shape",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\nAPI_SECRET = \"BxT64PIQtDBb*tnW\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "API_SECRET = \"BxT64PIQtDBb*tnW\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "up_candle",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "up_candle = \"📈\"  # \\U0001F4C8\ndown_candle = \"\"  # \\U0001F4C9\n# Set page title and configure layout\nst.set_page_config(\n      page_title=\"Stock prediction Trainig\", \n      layout=\"wide\",\n      page_icon= \"📈\"\n      )\n# Apply the custom CSS\nst.markdown(custom_css, unsafe_allow_html=True)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "down_candle",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "down_candle = \"\"  # \\U0001F4C9\n# Set page title and configure layout\nst.set_page_config(\n      page_title=\"Stock prediction Trainig\", \n      layout=\"wide\",\n      page_icon= \"📈\"\n      )\n# Apply the custom CSS\nst.markdown(custom_css, unsafe_allow_html=True)\n#page title and subtitle",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "finviz_url",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "finviz_url = \"https://finviz.com/quote.ashx?t=\"\nexample_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "example_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# if ticker:",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# if ticker:\n      #Fetching stock price data\ndef main():\n  import pandas as pd\n  dir = [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n  check_and_make_directories( dir )\n  jprint(\"app.py: Directory Paths:   \",  \"   //\".join(dir),  '##')\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date = TRAIN_START_DATE,",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "stock_trading_rolling_window",
        "kind": 2,
        "importPath": "docs.examples.FINRL.FINRL.stock_trading_rolling_window",
        "description": "docs.examples.FINRL.FINRL.stock_trading_rolling_window",
        "peekOfCode": "def stock_trading_rolling_window(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    rolling_window_length: int,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,",
        "detail": "docs.examples.FINRL.FINRL.stock_trading_rolling_window",
        "documentation": {}
    },
    {
        "label": "stock_trading_rolling_window",
        "kind": 2,
        "importPath": "docs.examples.FINRL.3",
        "description": "docs.examples.FINRL.3",
        "peekOfCode": "def stock_trading_rolling_window(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    rolling_window_length: int,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,",
        "detail": "docs.examples.FINRL.3",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "class URL(str):\n    def __new__(cls, *value):\n        \"\"\"\n        note: we use *value and v0 to allow an empty URL string\n        \"\"\"\n        if value:\n            v0 = value[0]\n            if not (isinstance(v0, str) or isinstance(v0, URL)):\n                raise TypeError(f'Unexpected type for URL: \"{type(v0)}\"')\n            if not (v0.startswith('http://') or v0.startswith('https://') or",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "DATE",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "class DATE(str):\n    \"\"\"\n    date string in the format YYYY-MM-DD\n    \"\"\"\n    def __new__(cls, value):\n        if not value:\n            raise ValueError('Unexpected empty string')\n        if not isinstance(value, str):\n            raise TypeError(f'Unexpected type for DATE: \"{type(value)}\"')\n        if value.count(\"-\") != 2:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "FLOAT",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "class FLOAT(str):\n    \"\"\"\n    api allows passing floats or float as strings.\n    let's make sure that param passed is one of the two, so we don't pass\n    invalid strings all the way to the servers.\n    \"\"\"\n    def __new__(cls, value):\n        if isinstance(value, float) or isinstance(value, int):\n            return value\n        if isinstance(value, str):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_base_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_BASE_URL', 'https://api.alpaca.markets').rstrip('/'))\ndef get_data_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_DATA_URL', 'https://data.alpaca.markets').rstrip('/'))\ndef get_data_stream_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_STREAM_URL',\n        'https://stream.data.alpaca.markets').rstrip('/')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_data_url",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_data_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_DATA_URL', 'https://data.alpaca.markets').rstrip('/'))\ndef get_data_stream_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_STREAM_URL',\n        'https://stream.data.alpaca.markets').rstrip('/')\n               )\ndef get_credentials(key_id: str = None,\n                    secret_key: str = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_data_stream_url",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_data_stream_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_STREAM_URL',\n        'https://stream.data.alpaca.markets').rstrip('/')\n               )\ndef get_credentials(key_id: str = None,\n                    secret_key: str = None,\n                    oauth: str = None) -> Credentials:\n    oauth = oauth or os.environ.get('APCA_API_OAUTH_TOKEN')\n    key_id = key_id or os.environ.get('APCA_API_KEY_ID')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_credentials",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_credentials(key_id: str = None,\n                    secret_key: str = None,\n                    oauth: str = None) -> Credentials:\n    oauth = oauth or os.environ.get('APCA_API_OAUTH_TOKEN')\n    key_id = key_id or os.environ.get('APCA_API_KEY_ID')\n    if key_id is None and oauth is None:\n        raise ValueError('Key ID must be given to access Alpaca trade API',\n                         ' (env: APCA_API_KEY_ID)')\n    secret_key = secret_key or os.environ.get('APCA_API_SECRET_KEY')\n    if secret_key is None and oauth is None:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_api_version",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_api_version(api_version: str) -> str:\n    api_version = api_version or os.environ.get('APCA_API_VERSION')\n    if api_version is None:\n        api_version = 'v2'\n    return api_version",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "Credentials = Tuple[str, str, str]\nclass URL(str):\n    def __new__(cls, *value):\n        \"\"\"\n        note: we use *value and v0 to allow an empty URL string\n        \"\"\"\n        if value:\n            v0 = value[0]\n            if not (isinstance(v0, str) or isinstance(v0, URL)):\n                raise TypeError(f'Unexpected type for URL: \"{type(v0)}\"')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Entity(object):\n    '''This helper class provides property access (the \"dot notation\")\n    to the json object, backed by the original object stored in the _raw\n    field.\n    '''\n    def __init__(self, raw):\n        self._raw = raw\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Account(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account/\n    \"\"\"\n    pass\nclass AccountConfigurations(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-configuration/",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "AccountConfigurations",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class AccountConfigurations(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-configuration/\n    \"\"\"\n    pass\nclass Asset(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/assets/#asset-entity",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Asset",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Asset(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/assets/#asset-entity\n    \"\"\"\n    pass\nclass Order(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/orders/#order-entity",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Order(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/orders/#order-entity\n    \"\"\"\n    def __init__(self, raw):\n        super().__init__(raw)\n        try:\n            self.legs = [Order(o) for o in self.legs]\n        except Exception:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Position(Entity):\n    \"\"\"\n    Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/positions/#position-entity\n    \"\"\"\n    pass\nclass AccountActivity(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-activities/",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "AccountActivity",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class AccountActivity(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-activities/\n    \"\"\"\n    pass\nclass Bar(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/bars/",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Bar(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/bars/\n    #bars-entity\n    \"\"\"\n    def __getattr__(self, key):\n        if key == 't':\n            val = self._raw[key[0]]\n            return pd.Timestamp(val, unit='s', tz=NY)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Bars",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Bars(list):\n    def __init__(self, raw):\n        super().__init__([Bar(o) for o in raw])\n        self._raw = raw\n    @property\n    def df(self):\n        if not hasattr(self, '_df'):\n            df = pd.DataFrame(\n                self._raw, columns=('t', 'o', 'h', 'l', 'c', 'v'),\n            )",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "_Timestamped",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class _Timestamped(object):\n    _tskeys = ('timestamp',)\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]\n            if key in self._tskeys:\n                return pd.Timestamp(val, tz=NY, unit=self._unit)\n            return val\n        return getattr(super(), key)\nclass _NanoTimestamped(_Timestamped):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "_NanoTimestamped",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class _NanoTimestamped(_Timestamped):\n    _unit = 'ns'\nclass Trade(_NanoTimestamped, Entity):\n    pass\nclass Quote(_NanoTimestamped, Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n    /#last-quote-entity\n    \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Trade",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Trade(_NanoTimestamped, Entity):\n    pass\nclass Quote(_NanoTimestamped, Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n    /#last-quote-entity\n    \"\"\"\n    pass\nclass Clock(Entity):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Quote",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Quote(_NanoTimestamped, Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n    /#last-quote-entity\n    \"\"\"\n    pass\nclass Clock(Entity):\n    \"\"\"\n    Entity properties:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Clock",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Clock(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/clock/#clock-entity\n    \"\"\"\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]\n            if key in ('timestamp', 'next_open', 'next_close'):\n                return pd.Timestamp(val)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Calendar(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/calendar/\n    #calendar-entity\n    \"\"\"\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]\n            if key in ('date',):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Watchlist",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Watchlist(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/watchlist/\n    #watchlist-entity\n    \"\"\"\n    pass\nclass PortfolioHistory(Entity):\n    \"\"\"\n    Entity properties:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "PortfolioHistory",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class PortfolioHistory(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/portfolio-history/\n    #portfoliohistory-entity\n    \"\"\"\n    def __init__(self, raw):\n        self._raw = raw\n    @property\n    def df(self):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "ISO8601YMD",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "ISO8601YMD = re.compile(r'\\d{4}-\\d{2}-\\d{2}T')\nNY = 'America/New_York'\nclass Entity(object):\n    '''This helper class provides property access (the \"dot notation\")\n    to the json object, backed by the original object stored in the _raw\n    field.\n    '''\n    def __init__(self, raw):\n        self._raw = raw\n    def __getattr__(self, key):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "NY",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "NY = 'America/New_York'\nclass Entity(object):\n    '''This helper class provides property access (the \"dot notation\")\n    to the json object, backed by the original object stored in the _raw\n    field.\n    '''\n    def __init__(self, raw):\n        self._raw = raw\n    def __getattr__(self, key):\n        if key in self._raw:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "trade_mapping",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "trade_mapping = {\n    \"T\": \"symbol\",\n    \"c\": \"conditions\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"t\": \"timestamp\"\n}\nquote_mapping = {\n    \"T\": \"symbol\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "quote_mapping",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "quote_mapping = {\n    \"T\": \"symbol\",\n    \"X\": \"askexchange\",\n    \"P\": \"askprice\",\n    \"S\": \"asksize\",\n    \"x\": \"bidexchange\",\n    \"p\": \"bidprice\",\n    \"s\": \"bidsize\",\n    \"c\": \"conditions\",\n    \"t\": \"timestamp\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "agg_mapping",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "agg_mapping = {\n    \"T\": \"symbol\",\n    \"o\": \"open\",\n    \"c\": \"close\",\n    \"h\": \"high\",\n    \"l\": \"low\",\n    \"a\": \"average\",\n    \"x\": \"exchange\",\n    \"v\": \"volume\",\n    \"s\": \"start\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "EntityListType",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class EntityListType(Enum):\n    Trade = Trade, trade_mapping_v2\n    Quote = Quote, quote_mapping_v2\n    Bar = Bar, bar_mapping_v2\nclass EntityList(list):\n    def __init__(self, entity_type: EntityListType, raw):\n        entity = entity_type.value[0]\n        super().__init__([entity(o) for o in raw])\n        self._raw = raw\n        self.mapping = entity_type.value[1]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "EntityList",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class EntityList(list):\n    def __init__(self, entity_type: EntityListType, raw):\n        entity = entity_type.value[0]\n        super().__init__([entity(o) for o in raw])\n        self._raw = raw\n        self.mapping = entity_type.value[1]\n    @property\n    def df(self):\n        if not hasattr(self, '_df'):\n            df = pd.DataFrame(",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "Remapped",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class Remapped:\n    def __init__(self, mapping: Dict[str, str], *args, **kwargs):\n        self._reversed_mapping = {\n            value: key for (key, value) in mapping.items()}\n        super().__init__(*args, **kwargs)\n    def __getattr__(self, key):\n        if key in self._reversed_mapping:\n            return super().__getattr__(self._reversed_mapping[key])\n        return super().__getattr__(key)\nclass BarsV2(EntityList):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "BarsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class BarsV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Bar, raw)\nclass TradesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Trade, raw)\nclass QuotesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Quote, raw)\nclass TradeV2(Remapped, _NanoTimestamped, Entity):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "TradesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class TradesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Trade, raw)\nclass QuotesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Quote, raw)\nclass TradeV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(trade_mapping_v2, raw)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "QuotesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class QuotesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Quote, raw)\nclass TradeV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(trade_mapping_v2, raw)\nclass QuoteV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "TradeV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class TradeV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(trade_mapping_v2, raw)\nclass QuoteV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(quote_mapping_v2, raw)\nclass BarV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "QuoteV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class QuoteV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(quote_mapping_v2, raw)\nclass BarV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(bar_mapping_v2, raw)\nclass StatusV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "BarV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class BarV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(bar_mapping_v2, raw)\nclass StatusV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(status_mapping_v2, raw)\nclass LULDV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "StatusV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class StatusV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(status_mapping_v2, raw)\nclass LULDV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(luld_mapping_v2, raw)\nclass CancelErrorV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LULDV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LULDV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(luld_mapping_v2, raw)\nclass CancelErrorV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(cancel_error_mapping_v2, raw)\nclass CorrectionV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "CancelErrorV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class CancelErrorV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(cancel_error_mapping_v2, raw)\nclass CorrectionV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(correction_mapping_v2, raw)\nclass SnapshotV2:\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "CorrectionV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class CorrectionV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(correction_mapping_v2, raw)\nclass SnapshotV2:\n    def __init__(self, raw):\n        self.latest_trade = _convert_or_none(TradeV2, raw.get('latestTrade'))\n        self.latest_quote = _convert_or_none(QuoteV2, raw.get('latestQuote'))\n        self.minute_bar = _convert_or_none(BarV2, raw.get('minuteBar'))\n        self.daily_bar = _convert_or_none(BarV2, raw.get('dailyBar'))",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "SnapshotV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class SnapshotV2:\n    def __init__(self, raw):\n        self.latest_trade = _convert_or_none(TradeV2, raw.get('latestTrade'))\n        self.latest_quote = _convert_or_none(QuoteV2, raw.get('latestQuote'))\n        self.minute_bar = _convert_or_none(BarV2, raw.get('minuteBar'))\n        self.daily_bar = _convert_or_none(BarV2, raw.get('dailyBar'))\n        self.prev_daily_bar = _convert_or_none(BarV2, raw.get('prevDailyBar'))\nclass SnapshotsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "SnapshotsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class SnapshotsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(SnapshotV2, v)\nclass LatestBarsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(BarV2, v)\nclass LatestTradesV2(dict):\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LatestBarsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LatestBarsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(BarV2, v)\nclass LatestTradesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(TradeV2, v)\nclass LatestQuotesV2(dict):\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LatestTradesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LatestTradesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(TradeV2, v)\nclass LatestQuotesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(QuoteV2, v)\nclass BidOrAsk(Entity):\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LatestQuotesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LatestQuotesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(QuoteV2, v)\nclass BidOrAsk(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\nclass OrderbookV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "BidOrAsk",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class BidOrAsk(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\nclass OrderbookV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\n        if self.bids:\n            for i in range(len(self.bids)):\n                self.bids[i] = BidOrAsk(self.bids[i])\n        if self.asks:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "OrderbookV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class OrderbookV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\n        if self.bids:\n            for i in range(len(self.bids)):\n                self.bids[i] = BidOrAsk(self.bids[i])\n        if self.asks:\n            for i in range(len(self.asks)):\n                self.asks[i] = BidOrAsk(self.asks[i])\nclass OrderbooksV2(dict):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "OrderbooksV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class OrderbooksV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            for side in orderbook_mapping_v2.keys():\n                if side not in v:\n                    continue\n                readable_side = orderbook_mapping_v2[side]\n                v[readable_side] = v[side]\n                v.pop(side)\n            self[k] = _convert_or_none(OrderbookV2, v)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "NewsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class NewsV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\nclass NewsListV2(list):\n    def __init__(self, raw):\n        super().__init__([NewsV2(o) for o in raw])\ndef _convert_or_none(entityType, value):\n    if value:\n        return entityType(value)\n    return None",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "NewsListV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class NewsListV2(list):\n    def __init__(self, raw):\n        super().__init__([NewsV2(o) for o in raw])\ndef _convert_or_none(entityType, value):\n    if value:\n        return entityType(value)\n    return None",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "trade_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "trade_mapping_v2 = {\n    \"i\": \"id\",\n    \"S\": \"symbol\",\n    \"c\": \"conditions\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"t\": \"timestamp\",\n    \"z\": \"tape\",  # stocks only\n    \"tks\": \"takerside\"  # crypto only",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "quote_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "quote_mapping_v2 = {\n    \"S\":  \"symbol\",\n    \"x\": \"exchange\",  # crypto only\n    \"ax\": \"ask_exchange\",\n    \"ap\": \"ask_price\",\n    \"as\": \"ask_size\",\n    \"bx\": \"bid_exchange\",\n    \"bp\": \"bid_price\",\n    \"bs\": \"bid_size\",\n    \"c\":  \"conditions\",  # stocks only",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "bar_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "bar_mapping_v2 = {\n    \"S\":  \"symbol\",\n    \"x\": \"exchange\",  # crypto only\n    \"o\":  \"open\",\n    \"h\":  \"high\",\n    \"l\":  \"low\",\n    \"c\":  \"close\",\n    \"v\":  \"volume\",\n    \"t\":  \"timestamp\",\n    \"n\":  \"trade_count\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "status_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "status_mapping_v2 = {\n    \"S\":  \"symbol\",\n    \"sc\": \"status_code\",\n    \"sm\": \"status_message\",\n    \"rc\": \"reason_code\",\n    \"rm\": \"reason_message\",\n    \"t\":  \"timestamp\",\n    \"z\":  \"tape\"\n}\nluld_mapping_v2 = {",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "luld_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "luld_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"u\": \"limit_up_price\",\n    \"d\": \"limit_down_price\",\n    \"i\": \"indicator\",\n    \"t\": \"timestamp\",\n    \"z\": \"tape\"\n}\ncancel_error_mapping_v2 = {\n    \"S\": \"symbol\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "cancel_error_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "cancel_error_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"i\": \"id\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"a\": \"cancel_error_action\",\n    \"z\": \"tape\",\n    \"t\": \"timestamp\",\n}",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "correction_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "correction_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"x\": \"exchange\",\n    \"oi\": \"original_id\",\n    \"op\": \"original_price\",\n    \"os\": \"original_size\",\n    \"oc\": \"original_conditions\",\n    \"ci\": \"corrected_id\",\n    \"cp\": \"corrected_price\",\n    \"cs\": \"corrected_size\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "orderbook_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "orderbook_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"x\": \"exchange\",\n    \"t\": \"timestamp\",\n    \"b\": \"bids\",\n    \"a\": \"asks\",\n}\nclass EntityListType(Enum):\n    Trade = Trade, trade_mapping_v2\n    Quote = Quote, quote_mapping_v2",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "RetryException",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):\n        super().__init__(error['message'])\n        self._error = error",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "APIError",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):\n        super().__init__(error['message'])\n        self._error = error\n        self._http_error = http_error\n    @property",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrameUnit",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class TimeFrameUnit(Enum):\n    Minute = \"Min\"\n    Hour = \"Hour\"\n    Day = \"Day\"\n    Week = \"Week\"\n    Month = \"Month\"\nclass TimeFrame:\n    def __init__(self, amount: int, unit: TimeFrameUnit):\n        self.validate(amount, unit)\n        self.__amount = amount",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class TimeFrame:\n    def __init__(self, amount: int, unit: TimeFrameUnit):\n        self.validate(amount, unit)\n        self.__amount = amount\n        self.__unit = unit\n    @property\n    def amount(self):\n        return self.__amount\n    @amount.setter\n    def amount(self, value: int):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Sort",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 base_url: URL = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class REST(object):\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 base_url: URL = None,\n                 api_version: str = None,\n                 oauth=None,\n                 raw_data: bool = False\n                 ):\n        \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "raise_api_error",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "def raise_api_error(resp: requests.Response, http_error: requests.HTTPError):\n    try:\n        error = resp.json()\n    except:\n        raise http_error from None\n    if 'message' in error:\n        raise APIError(error, http_error) from None\n    raise http_error from None\nclass TimeFrameUnit(Enum):\n    Minute = \"Min\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "logger = logging.getLogger(__name__)\nPositions = List[Position]\nOrders = List[Order]\nAssets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Positions",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Positions = List[Position]\nOrders = List[Order]\nAssets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Orders",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Orders = List[Order]\nAssets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Assets",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Assets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "AccountActivities",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "AccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Calendars",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Calendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Watchlists",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Watchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TradeIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "QuoteIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "QuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "BarIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "BarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "NewsIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "NewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "DATA_V2_MAX_LIMIT",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "DATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "NEWS_MAX_LIMIT",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "NEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):\n        super().__init__(error['message'])",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Minute",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Minute = TimeFrame(1, TimeFrameUnit.Minute)\nTimeFrame.Hour = TimeFrame(1, TimeFrameUnit.Hour)\nTimeFrame.Day = TimeFrame(1, TimeFrameUnit.Day)\nTimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Hour",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Hour = TimeFrame(1, TimeFrameUnit.Hour)\nTimeFrame.Day = TimeFrame(1, TimeFrameUnit.Day)\nTimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Day",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Day = TimeFrame(1, TimeFrameUnit.Day)\nTimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Week",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,\n                 key_id: str = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Month",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "AsyncRest",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest_async",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest_async",
        "peekOfCode": "class AsyncRest:\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 data_url: URL = None,\n                 api_version: str = None,\n                 raw_data: bool = False\n                 ):\n        \"\"\"\n        :param raw_data: should we return api response raw or wrap it with",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest_async",
        "documentation": {}
    },
    {
        "label": "_DataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class _DataStream:\n    def __init__(self,\n                 endpoint: str,\n                 key_id: str,\n                 secret_key: str,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "DataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class DataStream(_DataStream):\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool,\n                 feed: str = 'iex',\n                 websocket_params: Optional[Dict] = None):\n        base_url = re.sub(r'^http', 'ws', base_url)\n        super().__init__(endpoint=base_url + '/v2/' + feed,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "CryptoDataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class CryptoDataStream(_DataStream):\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool,\n                 exchanges: Optional[List[str]] = None,\n                 websocket_params: Optional[Dict] = None):\n        self._key_id = key_id\n        self._secret_key = secret_key",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "NewsDataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class NewsDataStream(_DataStream):\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool,\n                 websocket_params: Optional[Dict] = None):\n        self._key_id = key_id\n        self._secret_key = secret_key\n        base_url = re.sub(r'^http', 'ws', base_url)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "TradingStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class TradingStream:\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None):\n        self._key_id = key_id\n        self._secret_key = secret_key\n        base_url = re.sub(r'^http', 'ws', base_url)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "Stream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class Stream:\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 base_url: URL = None,\n                 data_stream_url: URL = None,\n                 data_feed: str = 'iex',\n                 raw_data: bool = False,\n                 crypto_exchanges: Optional[List[str]] = None,\n                 websocket_params: Optional[Dict] = None):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "log = logging.getLogger(__name__)\n# Default Params we pass to the websocket constructors\nWEBSOCKET_DEFAULTS = {\n    \"ping_interval\": 10,\n    \"ping_timeout\": 180,\n    \"max_queue\": 1024,\n}\ndef _ensure_coroutine(handler):\n    if not asyncio.iscoroutinefunction(handler):\n        raise ValueError('handler must be a coroutine function')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_DEFAULTS",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "WEBSOCKET_DEFAULTS = {\n    \"ping_interval\": 10,\n    \"ping_timeout\": 180,\n    \"max_queue\": 1024,\n}\ndef _ensure_coroutine(handler):\n    if not asyncio.iscoroutinefunction(handler):\n        raise ValueError('handler must be a coroutine function')\nclass _DataStream:\n    def __init__(self,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "delete_base_url_envs",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def delete_base_url_envs():\n    if 'APCA_API_BASE_URL' in os.environ:\n        del os.environ['APCA_API_BASE_URL']\n    if 'APCA_API_DATA_URL' in os.environ:\n        del os.environ['APCA_API_DATA_URL']\n@pytest.fixture\ndef reqmock():\n    with requests_mock.Mocker() as m:\n        yield m\ndef test_api(reqmock):",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "reqmock",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def reqmock():\n    with requests_mock.Mocker() as m:\n        yield m\ndef test_api(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of accounts\n    reqmock.get('https://api.alpaca.markets/v1/account', text='''\n    {",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_api",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_api(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of accounts\n    reqmock.get('https://api.alpaca.markets/v1/account', text='''\n    {\n      \"id\": \"904837e3-3b76-47ec-b432-046db621571b\",\n      \"status\": \"ACTIVE\",\n      \"currency\": \"USD\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_orders",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_orders(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of orders\n    reqmock.get(\n        'https://api.alpaca.markets/v1/orders',\n        text='''[\n  {\n    \"id\": \"904837e3-3b76-47ec-b432-046db621571b\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_positions",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_positions(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of positions\n    reqmock.get(\n        'https://api.alpaca.markets/v1/positions',\n        text='''[\n  {\n    \"account_id\": \"904837e3-3b76-47ec-b432-046db621571b\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_chronos",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_chronos(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # clock\n    reqmock.get(\n        'https://api.alpaca.markets/v1/clock',\n        text='''{\n  \"timestamp\": \"2018-04-01T12:00:00.000Z\",\n  \"is_open\": true,",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_data",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_data(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Latest trade\n    reqmock.get(\n        'https://data.alpaca.markets/v2/stocks/AAPL/trades/latest',\n        text='''\n        {\n            \"symbol\": \"AAPL\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_timeframe",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_timeframe(reqmock):\n    # Custom timeframe: Minutes\n    reqmock.get('https://data.alpaca.markets/v2/stocks/AAPL/bars?'\n                'timeframe=45Min&adjustment=raw&'\n                'start=2021-06-08&end=2021-06-08', text='{}')\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    timeframe = tradeapi.TimeFrame(45, tradeapi.TimeFrameUnit.Minute)\n    api.get_bars('AAPL', timeframe, '2021-06-08', '2021-06-08')\n    assert reqmock.called\n    # Custom timeframe: Hours",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_watchlists",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_watchlists(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # get watchlists\n    reqmock.get(\n        'https://api.alpaca.markets/v1/watchlists',\n        text='''[\n    {\n        \"id\": \"900e20b1-46eb-492b-a505-2ea67386b5fd\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_errors",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_errors(reqmock):\n    api_v1 = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_v1._retry = 1\n    api_v1._retry_wait = 0\n    api_v1._do_error = True\n    def callback_429(request, context):\n        if api_v1._do_error:\n            api_v1._do_error = False\n            context.status_code = 429\n            return 'Too Many Requests'",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_no_resource_warning_with_context_manager",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_no_resource_warning_with_context_manager():\n    with warnings.catch_warnings():  # ensure no warnings are raised\n        warnings.simplefilter(\"error\")\n        with tradeapi.REST(\"key-id\", \"secret-key\", api_version=\"v1\") as api:\n            assert api",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "_version_re",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.setup",
        "description": "docs.examples.PY.lib.setup",
        "peekOfCode": "_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\nwith open('alpaca_trade_api/__init__.py', 'rb') as f:\n    version = str(ast.literal_eval(_version_re.search(\n        f.read().decode('utf-8')).group(1)))\nwith open('README.md') as readme_file:\n    README = readme_file.read()\nwith open(os.path.join(\"requirements\", \"requirements.txt\")) as reqs:\n    REQUIREMENTS = reqs.readlines()\nwith open(os.path.join(\"requirements\", \"requirements_test.txt\")) as reqs:\n    REQUIREMENTS_TEST = reqs.readlines()",
        "detail": "docs.examples.PY.lib.setup",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "kind": 6,
        "importPath": "docs.examples.PY.AlpacPaperTrading",
        "description": "docs.examples.PY.AlpacPaperTrading",
        "peekOfCode": "class AlpacaPaperTrading:\n    def __init__(self, ticker_list, time_interval, drl_lib, agent, cwd, net_dim, \n                 state_dim, action_dim, ALPACA_API_KEY, ALPACA_API_SECRET , \n                 ALPACA_API_BASE_URL, tech_indicator_list, turbulence_thresh=30, \n                 max_stock=1e2, latency=None):\n        self.ticker_list = ticker_list\n        self.time_interval = time_interval\n        self.drl_lib = drl_lib\n        self.agent = agent\n        self.cwd = cwd",
        "detail": "docs.examples.PY.AlpacPaperTrading",
        "documentation": {}
    },
    {
        "label": "DATA_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "DATA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.data_key\nDATA_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.data_secret\nDATA_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.data_url\nTRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "DATA_API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "DATA_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.data_secret\nDATA_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.data_url\nTRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "DATA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "DATA_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.data_url\nTRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRADING_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)\nimport alpaca_trade_api",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRADING_API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)\nimport alpaca_trade_api\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRADING_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)\nimport alpaca_trade_api\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv\nfrom finrl.meta.paper_trading.alpaca import PaperTradingAlpaca",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "ticker_list",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "ticker_list = DOW_30_TICKER\nenv = StockTradingEnv\n# if you want to use larger datasets (change to longer period), and it raises error, please try to increase \"target_step\". It should be larger than the episode steps.\nERL_PARAMS = {\n    \"learning_rate\": 3e-6,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": [128, 64],\n    \"target_step\": 5000,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "env = StockTradingEnv\n# if you want to use larger datasets (change to longer period), and it raises error, please try to increase \"target_step\". It should be larger than the episode steps.\nERL_PARAMS = {\n    \"learning_rate\": 3e-6,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": [128, 64],\n    \"target_step\": 5000,\n    \"eval_gap\": 30,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "ERL_PARAMS = {\n    \"learning_rate\": 3e-6,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": [128, 64],\n    \"target_step\": 5000,\n    \"eval_gap\": 30,\n    \"eval_times\": 1,\n}",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "today = datetime.datetime.today()\nTEST_END_DATE = (today - BDay(1)).to_pydatetime().date()\nTEST_START_DATE = (TEST_END_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_END_DATE = (today - BDay(1)).to_pydatetime().date()\nTEST_START_DATE = (TEST_END_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_START_DATE = (TEST_END_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)\ntrain(",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)\ntrain(\n    start_date=TRAIN_START_DATE,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)\ntrain(\n    start_date=TRAIN_START_DATE,\n    end_date=TRAIN_END_DATE,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "account_value_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "account_value_erl = test(\n    start_date=TEST_START_DATE,\n    end_date=TEST_END_DATE,\n    ticker_list=ticker_list,\n    data_source=\"alpaca\",\n    time_interval=\"1Min\",\n    technical_indicator_list=INDICATORS,\n    drl_lib=\"elegantrl\",\n    env=env,\n    model_name=\"ppo\",",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "action_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "action_dim = len(DOW_30_TICKER)\nstate_dim = (\n    1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\n)  # Calculate the DRL state dimension manually for paper trading. amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\npaper_trading_erl = PaperTradingAlpaca(\n    ticker_list=DOW_30_TICKER,\n    time_interval=\"1Min\",\n    drl_lib=\"elegantrl\",\n    agent=\"ppo\",\n    cwd=\"./papertrading_erl_retrain\",",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "state_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "state_dim = (\n    1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\n)  # Calculate the DRL state dimension manually for paper trading. amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\npaper_trading_erl = PaperTradingAlpaca(\n    ticker_list=DOW_30_TICKER,\n    time_interval=\"1Min\",\n    drl_lib=\"elegantrl\",\n    agent=\"ppo\",\n    cwd=\"./papertrading_erl_retrain\",\n    net_dim=ERL_PARAMS[\"net_dimension\"],",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "paper_trading_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "paper_trading_erl = PaperTradingAlpaca(\n    ticker_list=DOW_30_TICKER,\n    time_interval=\"1Min\",\n    drl_lib=\"elegantrl\",\n    agent=\"ppo\",\n    cwd=\"./papertrading_erl_retrain\",\n    net_dim=ERL_PARAMS[\"net_dimension\"],\n    state_dim=state_dim,\n    action_dim=action_dim,\n    ALPACA_API_KEY=TRADING_API_KEY,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "returns_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "returns_erl = cumu_erl - 1\nreturns_dia = cumu_djia - 1\nreturns_dia = returns_dia[: returns_erl.shape[0]]\n# plot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which=\"minor\", axis=\"y\")\nplt.title(\"Stock Trading (Paper trading)\", fontsize=20)\nplt.plot(returns_erl, label=\"ElegantRL Agent\", color=\"red\")",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "returns_dia = cumu_djia - 1\nreturns_dia = returns_dia[: returns_erl.shape[0]]\n# plot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which=\"minor\", axis=\"y\")\nplt.title(\"Stock Trading (Paper trading)\", fontsize=20)\nplt.plot(returns_erl, label=\"ElegantRL Agent\", color=\"red\")\n# plt.plot(returns_sb3, label = 'Stable-Baselines3 Agent', color = 'blue' )",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "returns_dia = returns_dia[: returns_erl.shape[0]]\n# plot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which=\"minor\", axis=\"y\")\nplt.title(\"Stock Trading (Paper trading)\", fontsize=20)\nplt.plot(returns_erl, label=\"ElegantRL Agent\", color=\"red\")\n# plt.plot(returns_sb3, label = 'Stable-Baselines3 Agent', color = 'blue' )\n# plt.plot(returns_rllib, label = 'RLlib Agent', color = 'green')",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "ax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(\n    ticker.FixedFormatter([\"\", \"10-19\", \"\", \"10-20\", \"\", \"10-21\", \"\", \"10-22\"])\n)\nplt.legend(fontsize=10.5)\nplt.savefig(\"papertrading_stock.png\")",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "kind": 2,
        "importPath": "docs.examples.PY.Stablebaselines3 + Dow Jones",
        "description": "docs.examples.PY.Stablebaselines3 + Dow Jones",
        "peekOfCode": "def stock_trading(\n        train_start_date: str,\n        train_end_date: str,\n        trade_start_date: str,\n        trade_end_date: str,\n        if_store_actions: bool = True,\n        if_store_result: bool = True,\n        if_using_a2c: bool = True,\n        if_using_ddpg: bool = True,\n        if_using_ppo: bool = True,",
        "detail": "docs.examples.PY.Stablebaselines3 + Dow Jones",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "kind": 2,
        "importPath": "docs.examples.PY.df_account_value_a2c",
        "description": "docs.examples.PY.df_account_value_a2c",
        "peekOfCode": "def stock_trading(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,\n    if_using_ppo: bool = True,",
        "detail": "docs.examples.PY.df_account_value_a2c",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "docs.examples.PY.ensemble_stock_trading copy",
        "description": "docs.examples.PY.ensemble_stock_trading copy",
        "peekOfCode": "def main():\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    import pandas as pd\n    import numpy as np\n    import matplotlib\n    import matplotlib.pyplot as plt\n    # matplotlib.use('Agg')\n    import datetime\n    import sys",
        "detail": "docs.examples.PY.ensemble_stock_trading copy",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "kind": 6,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "class YahooDownloader:\n    Provides methods for retrieving daily stock data from\n    Yahoo Finance API\n    Attributes\n    ----------\n        start_date : str\n            start date of the data (modified from config.py)\n        end_date : str\n            end date of the data (modified from config.py)\n        ticker_list : list",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "os = sys.path.append(\"/content/drive/packages\")\nprint(os)\nimport itertools\n# %matplotlib inline\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTEST_START_DATE = '2021-10-01'\nTEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TRAIN_END_DATE = '2021-10-01'\nTEST_START_DATE = '2021-10-01'\nTEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TEST_START_DATE = '2021-10-01'\nTEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()\nlen(df.tic.unique())",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()\nlen(df.tic.unique())\ndf.tic.value_counts()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()\nlen(df.tic.unique())\ndf.tic.value_counts()\n\"\"\"# Part 4: Preprocess Data",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.\n\"\"\"",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.\n\"\"\"\nstock_dimension = len(processed.tic.unique())",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.\n\"\"\"\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100,\n    \"initial_amount\": 1000000,\n    \"buy_cost_pct\": 0.001,\n    \"sell_cost_pct\": 0.001,\n    \"state_space\": state_space,\n    \"stock_dim\": stock_dimension,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100,\n    \"initial_amount\": 1000000,\n    \"buy_cost_pct\": 0.001,\n    \"sell_cost_pct\": 0.001,\n    \"state_space\": state_space,\n    \"stock_dim\": stock_dimension,\n    \"tech_indicator_list\": INDICATORS,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100,\n    \"initial_amount\": 1000000,\n    \"buy_cost_pct\": 0.001,\n    \"sell_cost_pct\": 0.001,\n    \"state_space\": state_space,\n    \"stock_dim\": stock_dimension,\n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension,\n    \"reward_scaling\": 1e-4,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "rebalance_window = 63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window,\n                 validation_window=validation_window,\n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "validation_window = 63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window,\n                 validation_window=validation_window,\n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window,\n                 validation_window=validation_window,\n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2048,\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2048,\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 10_000,\n                      \"learning_rate\": 0.0005,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 10_000,\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\ntimesteps_dict = {'a2c' : 10_000,\n                 'ppo' : 10_000,\n                 'ddpg' : 10_000\n                 }",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "timesteps_dict = {'a2c' : 10_000,\n                 'ppo' : 10_000,\n                 'ddpg' : 10_000\n                 }\ndf_summary = ensemble_agent.run_ensemble_strategy(A2C_model_kwargs,\n                                                 PPO_model_kwargs,\n                                                 DDPG_model_kwargs,\n                                                 timesteps_dict)\ndf_summary\n\"\"\"<a id='6'></a>",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(A2C_model_kwargs,\n                                                 PPO_model_kwargs,\n                                                 DDPG_model_kwargs,\n                                                 timesteps_dict)\ndf_summary\n\"\"\"<a id='6'></a>\n# Part 7: Backtest Our Strategy\nBacktesting plays a key role in evaluating the performance of a trading strategy. Automated backtesting tool is preferred because it reduces the human error. We usually use the Quantopian pyfolio package to backtest our trading strategies. It is easy to use and consists of various individual plots that provide a comprehensive image of the performance of a trading strategy.\n\"\"\"\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value.append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value.append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\n# Commented out IPython magic to ensure Python compatibility.",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\ndf_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\ndf_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\ndf_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji_",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "stats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji['date']",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>\n## 7.2 BackTestPlot",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji['dji']",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>\n## 7.2 BackTestPlot\n\"\"\"",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>\n## 7.2 BackTestPlot\n\"\"\"\n# Commented out IPython magic to ensure Python compatibility.\n# print(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_result_ensemble",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_result_ensemble = pd.DataFrame({'date': df_account_value['date'], 'ensemble': df_account_value['account_value']})\ndf_result_ensemble = df_result_ensemble.set_index('date')\nprint(\"df_result_ensemble.columns: \", df_result_ensemble.columns)\n# df_result_ensemble.drop(df_result_ensemble.columns[0], axis = 1)\nprint(\"df_trade_date: \", df_trade_date)\n# df_result_ensemble['date'] = df_trade_date['datadate']\n# df_result_ensemble['account_value'] = df_account_value['account_value']\ndf_result_ensemble.to_csv(\"df_result_ensemble.csv\")\nprint(\"df_result_ensemble: \", df_result_ensemble)\nprint(\"==============Compare to DJIA===========\")",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_result_ensemble",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_result_ensemble = df_result_ensemble.set_index('date')\nprint(\"df_result_ensemble.columns: \", df_result_ensemble.columns)\n# df_result_ensemble.drop(df_result_ensemble.columns[0], axis = 1)\nprint(\"df_trade_date: \", df_trade_date)\n# df_result_ensemble['date'] = df_trade_date['datadate']\n# df_result_ensemble['account_value'] = df_account_value['account_value']\ndf_result_ensemble.to_csv(\"df_result_ensemble.csv\")\nprint(\"df_result_ensemble: \", df_result_ensemble)\nprint(\"==============Compare to DJIA===========\")\nresult = pd.DataFrame()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "result = pd.DataFrame()\n# result = pd.merge(result, df_result_ensemble, left_index=True, right_index=True)\n# result = pd.merge(result, df_dji, left_index=True, right_index=True)\nresult = pd.merge(df_result_ensemble, df_dji, left_index=True, right_index=True)\nprint(\"result: \", result)\nresult.to_csv(\"result.csv\")\nresult.columns = ['ensemble', 'dji']\n# %matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "result = pd.merge(df_result_ensemble, df_dji, left_index=True, right_index=True)\nprint(\"result: \", result)\nresult.to_csv(\"result.csv\")\nresult.columns = ['ensemble', 'dji']\n# %matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();\nresult.plot();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "result.columns",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "result.columns = ['ensemble', 'dji']\n# %matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();\nresult.plot();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"figure.figsize\"]",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "plt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();\nresult.plot();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "docs.examples.PY.flusk",
        "description": "docs.examples.PY.flusk",
        "peekOfCode": "def run_script():\n    data = request.json.get('data')\n    # Simulate running a Python script (replace this with your actual logic)\n    time.sleep(2)  # Simulating a delay\n    result = f'Processed data: {data}'  # Example response\n    return jsonify({'message': result})\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "docs.examples.PY.flusk",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "docs.examples.PY.flusk",
        "description": "docs.examples.PY.flusk",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/run-script', methods=['POST'])\ndef run_script():\n    data = request.json.get('data')\n    # Simulate running a Python script (replace this with your actual logic)\n    time.sleep(2)  # Simulating a delay\n    result = f'Processed data: {data}'  # Example response\n    return jsonify({'message': result})\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "docs.examples.PY.flusk",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "def main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    lib_path = os.path.join(script_dir, 'lib', 'alpaca_trade_api')\n    print(lib_path)\n    sys.path.append(lib_path)\n    import lib.alpaca_trade_api as tradeapi\n    now = datetime.now()\n    formatted_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(f\"Time from greet.py at {formatted_time}\")\n    api = tradeapi.rest.REST(ALPACA_API_KEY, ALPACA_API_SECRET , ALPACA_API_BASE_URL, api_version='v2')",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "ALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"\nALPACA_API_SECRET  = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\n# Description: This is a simple python script that prints a greeting message along with the current date and time.\nfrom datetime import datetime\nimport sys\nimport os\n# import alpaca_trade_api as tradeapi\ndef main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\n# Description: This is a simple python script that prints a greeting message along with the current date and time.\nfrom datetime import datetime\nimport sys\nimport os\n# import alpaca_trade_api as tradeapi\ndef main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    lib_path = os.path.join(script_dir, 'lib', 'alpaca_trade_api')\n    print(lib_path)",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "place_order",
        "kind": 2,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "def place_order(action):\n    if action == \"buy\":\n        api.submit_order(symbol='AAPL', qty=1, side='buy', type='market', time_in_force='gtc')\n    elif action == \"sell\":\n        api.submit_order(symbol='AAPL', qty=1, side='sell', type='market', time_in_force='gtc')\n    elif action == \"hold\":\n        print(\"Hold action. No trade executed.\")\ndef calculate_action():\n    # Simplified hedge ratio logic\n    hedge_ratio = 0.5  # Placeholder logic",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "calculate_action",
        "kind": 2,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "def calculate_action():\n    # Simplified hedge ratio logic\n    hedge_ratio = 0.5  # Placeholder logic\n    if hedge_ratio > 0.6:\n        return \"buy\"\n    elif hedge_ratio < 0.4:\n        return \"sell\"\n    else:\n        return \"hold\"\naction = calculate_action()",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "api = tradeapi.REST('APCA-API-KEY-ID', 'APCA-API-SECRET-KEY', base_url='https://paper-api.alpaca.markets')\ndef place_order(action):\n    if action == \"buy\":\n        api.submit_order(symbol='AAPL', qty=1, side='buy', type='market', time_in_force='gtc')\n    elif action == \"sell\":\n        api.submit_order(symbol='AAPL', qty=1, side='sell', type='market', time_in_force='gtc')\n    elif action == \"hold\":\n        print(\"Hold action. No trade executed.\")\ndef calculate_action():\n    # Simplified hedge ratio logic",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 5,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "action = calculate_action()\nplace_order(action)",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "kind": 2,
        "importPath": "docs.examples.PY.stock_trading",
        "description": "docs.examples.PY.stock_trading",
        "peekOfCode": "def stock_trading(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,\n    if_using_ppo: bool = True,",
        "detail": "docs.examples.PY.stock_trading",
        "documentation": {}
    },
    {
        "label": "stock_trading_rolling_window",
        "kind": 2,
        "importPath": "docs.examples.PY.stock_trading_rolling_window",
        "description": "docs.examples.PY.stock_trading_rolling_window",
        "peekOfCode": "def stock_trading_rolling_window(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    rolling_window_length: int,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,",
        "detail": "docs.examples.PY.stock_trading_rolling_window",
        "documentation": {}
    },
    {
        "label": "ActorPPO",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class ActorPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, action_dim])\n        self.action_std_log = nn.Parameter(torch.zeros((1, action_dim)), requires_grad=True)  # trainable parameter\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state).tanh()  # action.tanh()\n    def get_action(self, state: Tensor) -> (Tensor, Tensor):  # for exploration\n        action_avg = self.net(state)\n        action_std = self.action_std_log.exp()",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "CriticPPO",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class CriticPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, _action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, 1])\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state)  # advantage value\ndef build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)\n        if env_args is None:  # dummy env_args\n            env_args = {'env_name': None, 'state_dim': None, 'action_dim': None, 'if_discrete': None}\n        self.env_name = env_args['env_name']  # the name of environment. Be used to set 'cwd'.\n        self.state_dim = env_args['state_dim']  # vector dimension (feature number) of state\n        self.action_dim = env_args['action_dim']  # vector dimension (feature number) of action\n        self.if_discrete = env_args['if_discrete']  # discrete or continuous action space",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "AgentBase",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class AgentBase:\n    def __init__(self, net_dims: [int], state_dim: int, action_dim: int, gpu_id: int = 0, args: Config = Config()):\n        self.state_dim = state_dim\n        self.action_dim = action_dim\n        self.gamma = args.gamma\n        self.batch_size = args.batch_size\n        self.repeat_times = args.repeat_times\n        self.reward_scale = args.reward_scale\n        self.soft_update_tau = args.soft_update_tau\n        self.states = None  # assert self.states == (1, state_dim)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "AgentPPO",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class AgentPPO(AgentBase):\n    def __init__(self, net_dims: [int], state_dim: int, action_dim: int, gpu_id: int = 0, args: Config = Config()):\n        self.if_off_policy = False\n        self.act_class = getattr(self, \"act_class\", ActorPPO)\n        self.cri_class = getattr(self, \"cri_class\", CriticPPO)\n        AgentBase.__init__(self, net_dims, state_dim, action_dim, gpu_id, args)\n        self.ratio_clip = getattr(args, \"ratio_clip\", 0.25)  # `ratio.clamp(1 - clip, 1 + clip)`\n        self.lambda_gae_adv = getattr(args, \"lambda_gae_adv\", 0.95)  # could be 0.80~0.99\n        self.lambda_entropy = getattr(args, \"lambda_entropy\", 0.01)  # could be 0.00~0.10\n        self.lambda_entropy = torch.tensor(self.lambda_entropy, dtype=torch.float32, device=self.device)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "PendulumEnv",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class PendulumEnv(gym.Wrapper):  # a demo of custom gym env\n    def __init__(self):\n        gym.logger.set_level(40)  # Block warning\n        gym_env_name = \"Pendulum-v0\" if gym.__version__ < '0.18.0' else \"Pendulum-v1\"\n        super().__init__(env=gym.make(gym_env_name))\n        '''the necessary env information when you design a custom env'''\n        self.env_name = gym_env_name  # the name of this env.\n        self.state_dim = self.observation_space.shape[0]  # feature number of state\n        self.action_dim = self.action_space.shape[0]  # feature number of action\n        self.if_discrete = False  # discrete action or continuous action",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "Evaluator",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class Evaluator:\n    def __init__(self, eval_env, eval_per_step: int = 1e4, eval_times: int = 8, cwd: str = '.'):\n        self.cwd = cwd\n        self.env_eval = eval_env\n        self.eval_step = 0\n        self.total_step = 0\n        self.start_time = time.time()\n        self.eval_times = eval_times  # number of times that get episodic cumulative return\n        self.eval_per_step = eval_per_step  # evaluate the agent per training steps\n        self.recorder = []",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class AlpacaPaperTrading():\n    def __init__(self,ticker_list, time_interval, drl_lib, agent, cwd, net_dim, \n                 state_dim, action_dim, ALPACA_API_KEY, ALPACA_API_SECRET , \n                 ALPACA_API_BASE_URL, tech_indicator_list, turbulence_thresh=30, \n                 max_stock=1e2, latency = None):\n        #load agent\n        self.drl_lib = drl_lib\n        if agent =='ppo':\n            if drl_lib == 'elegantrl':              \n                agent_class = AgentPPO",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "StockEnvEmpty",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class StockEnvEmpty(gym.Env):\n    #Empty Env used for loading rllib agent\n    def __init__(self,config):\n      state_dim = config['state_dim']\n      action_dim = config['action_dim']\n      self.env_num = 1\n      self.max_step = 10000\n      self.env_name = 'StockEnvEmpty'\n      self.state_dim = state_dim  \n      self.action_dim = action_dim",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "build_mlp",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])\n    del net_list[-1]  # remove the activation of output layer\n    return nn.Sequential(*net_list)\nclass Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "get_gym_env_args",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def get_gym_env_args(env, if_print: bool) -> dict:\n    if {'unwrapped', 'observation_space', 'action_space', 'spec'}.issubset(dir(env)):  # isinstance(env, gym.Env):\n        env_name = env.unwrapped.spec.id\n        state_shape = env.observation_space.shape\n        state_dim = state_shape[0] if len(state_shape) == 1 else state_shape  # sometimes state_dim is a list\n        if_discrete = isinstance(env.action_space, gym.spaces.Discrete)\n        if if_discrete:  # make sure it is discrete action space\n            action_dim = env.action_space.n\n        elif isinstance(env.action_space, gym.spaces.Box):  # make sure it is continuous action space\n            action_dim = env.action_space.shape[0]",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "kwargs_filter",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def kwargs_filter(function, kwargs: dict) -> dict:\n    import inspect\n    sign = inspect.signature(function).parameters.values()\n    sign = {val.name for val in sign}\n    common_args = sign.intersection(kwargs.keys())\n    return {key: kwargs[key] for key in common_args}  # filtered kwargs\ndef build_env(env_class=None, env_args=None):\n    if env_class.__module__ == 'gym.envs.registration':  # special rule\n        env = env_class(id=env_args['env_name'])\n    else:",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "build_env",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def build_env(env_class=None, env_args=None):\n    if env_class.__module__ == 'gym.envs.registration':  # special rule\n        env = env_class(id=env_args['env_name'])\n    else:\n        env = env_class(**kwargs_filter(env_class.__init__, env_args.copy()))\n    for attr_str in ('env_name', 'state_dim', 'action_dim', 'if_discrete'):\n        setattr(env, attr_str, env_args[attr_str])\n    return env\nclass AgentBase:\n    def __init__(self, net_dims: [int], state_dim: int, action_dim: int, gpu_id: int = 0, args: Config = Config()):",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def train_agent(args: Config):\n    args.init_before_training()\n    env = build_env(args.env_class, args.env_args)\n    agent = args.agent_class(args.net_dims, args.state_dim, args.action_dim, gpu_id=args.gpu_id, args=args)\n    new_env, _ = env.reset()\n    agent.states = new_env[np.newaxis, :]\n    evaluator = Evaluator(eval_env=build_env(args.env_class, args.env_args),\n                          eval_per_step=args.eval_per_step,\n                          eval_times=args.eval_times,\n                          cwd=args.cwd)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "render_agent",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def render_agent(env_class, env_args: dict, net_dims: [int], agent_class, actor_path: str, render_times: int = 8):\n    env = build_env(env_class, env_args)\n    state_dim = env_args['state_dim']\n    action_dim = env_args['action_dim']\n    agent = agent_class(net_dims, state_dim, action_dim, gpu_id=-1)\n    actor = agent.act\n    print(f\"| render and load actor from: {actor_path}\")\n    actor.load_state_dict(torch.load(actor_path, map_location=lambda storage, loc: storage))\n    for i in range(render_times):\n        cumulative_reward, episode_step = get_rewards_and_steps(env, actor, if_render=True)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "get_rewards_and_steps",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def get_rewards_and_steps(env, actor, if_render: bool = False) -> (float, int):  # cumulative_rewards and episode_steps\n    device = next(actor.parameters()).device  # net.parameters() is a Python generator.\n    state, _ = env.reset()\n    episode_steps = 0\n    cumulative_returns = 0.0  # sum of rewards in an episode\n    for episode_steps in range(12345):\n        tensor_state = torch.as_tensor(state, dtype=torch.float32, device=device).unsqueeze(0)\n        tensor_action = actor(tensor_state)\n        action = tensor_action.detach().cpu().numpy()[0]  # not need detach(), because using torch.no_grad() outside\n        state, reward, done, _, _ = env.step(action)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def train(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def test(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def get_trading_days(start, end):\n    nyse = tc.get_calendar('NYSE')\n    df = nyse.sessions_in_range(pd.Timestamp(start),\n                                pd.Timestamp(end))\n    trading_days = []\n    for day in df:\n        trading_days.append(str(day)[:10])\n    return trading_days\ndef alpaca_history(key, secret, url, start, end):\n    api = tradeapi.REST(key, secret, url, 'v2')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "alpaca_history",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def alpaca_history(key, secret, url, start, end):\n    api = tradeapi.REST(key, secret, url, 'v2')\n    trading_days = get_trading_days(start, end)\n    df = pd.DataFrame()\n    for day in trading_days:\n        df = pd.concat([df, api.get_portfolio_history(date_start = day,timeframe='5Min').df.iloc[:78]])\n    equities = df.equity.values\n    cumu_returns = equities/equities[0]\n    cumu_returns = cumu_returns[~np.isnan(cumu_returns)]\n    return df, cumu_returns",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "DIA_history",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def DIA_history(start):\n    data_df = yf.download(['^DJI'],start=start, interval=\"5m\")\n    data_df = data_df.iloc[:]\n    baseline_returns = data_df['Adj Close'].values/data_df['Adj Close'].values[0]\n    return data_df, baseline_returns\n# Get cumulative return\nALPACA_API_KEY = \"\"\nALPACA_API_SECRET  = \"\"\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.config import INDICATORS\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv\nfrom finrl.meta.env_stock_trading.env_stock_papertrading import AlpacaPaperTrading\nfrom finrl.meta.data_processor import DataProcessor\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nimport numpy as np\nimport pandas as pd\n# PPO",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "MODELS = {\"ppo\": AgentPPO}\nOFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "OFF_POLICY_MODELS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "OFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ON_POLICY_MODELS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ticker_list",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ticker_list = DOW_30_TICKER\naction_dim = len(DOW_30_TICKER)\nprint(ticker_list)\nprint(INDICATORS)\n# Calculate the DRL state dimension manually for paper trading\n# amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\nstate_dim = 1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\nstate_dim\n# Get the API Keys Ready\n# ALPACA_API_KEY = \"\"",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "action_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "action_dim = len(DOW_30_TICKER)\nprint(ticker_list)\nprint(INDICATORS)\n# Calculate the DRL state dimension manually for paper trading\n# amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\nstate_dim = 1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\nstate_dim\n# Get the API Keys Ready\n# ALPACA_API_KEY = \"\"\n# ALPACA_API_SECRET  = \"\"",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "state_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "state_dim = 1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\nstate_dim\n# Get the API Keys Ready\n# ALPACA_API_KEY = \"\"\n# ALPACA_API_SECRET  = \"\"\nALPACA_API_KEY      = \"PKEJH4W0URAU56SHKQW3\"\nALPACA_API_SECRET    = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\nenv = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  ALPACA_API_KEY = ALPACA_API_KEY, \n#                  ALPACA_API_SECRET  = ALPACA_API_SECRET , \n#                  ALPACA_API_BASE_URL = ALPACA_API_BASE_URL",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\nenv = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  ALPACA_API_KEY = ALPACA_API_KEY, \n#                  ALPACA_API_SECRET  = ALPACA_API_SECRET , \n#                  ALPACA_API_BASE_URL = ALPACA_API_BASE_URL\n#                  )",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "data_url",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "data_url = 'wss://data.alpaca.markets'\nenv = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  ALPACA_API_KEY = ALPACA_API_KEY, \n#                  ALPACA_API_SECRET  = ALPACA_API_SECRET , \n#                  ALPACA_API_BASE_URL = ALPACA_API_BASE_URL\n#                  )\n# Step 2. Get ticker list, Set start date and end date, specify the data frequency",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "env = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  ALPACA_API_KEY = ALPACA_API_KEY, \n#                  ALPACA_API_SECRET  = ALPACA_API_SECRET , \n#                  ALPACA_API_BASE_URL = ALPACA_API_BASE_URL\n#                  )\n# Step 2. Get ticker list, Set start date and end date, specify the data frequency\n#data = DP.download_data(start_date = '2021-10-04', ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#DP",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#DP = DataProcessor(data_source = 'alpaca',\n#                  ALPACA_API_KEY = ALPACA_API_KEY, \n#                  ALPACA_API_SECRET  = ALPACA_API_SECRET , \n#                  ALPACA_API_BASE_URL = ALPACA_API_BASE_URL\n#                  )\n# Step 2. Get ticker list, Set start date and end date, specify the data frequency\n#data = DP.download_data(start_date = '2021-10-04', \n#                        end_date = '2021-10-08',\n#                        ticker_list = ticker_list, \n#                        time_interval= '1Min')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.download_data(start_date = '2021-10-04', \n#                        end_date = '2021-10-08',\n#                        ticker_list = ticker_list, \n#                        time_interval= '1Min')\n#data['timestamp'].nunique()\n# Step 3. Data Cleaning & Feature Engineering\n#data = DP.clean_data(data)\n#data = DP.add_technical_indicator(data, INDICATORS)\n#data = DP.add_vix(data)\n#data.shape",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.clean_data(data)\n#data = DP.add_technical_indicator(data, INDICATORS)\n#data = DP.add_vix(data)\n#data.shape\n# Step 4. Transform to numpy array\n#price_array, tech_array, turbulence_array = DP.df_to_array(data, if_vix=True)\n# price_array\n# Part 2: Train the agent\n# Train\nERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.add_technical_indicator(data, INDICATORS)\n#data = DP.add_vix(data)\n#data.shape\n# Step 4. Transform to numpy array\n#price_array, tech_array, turbulence_array = DP.df_to_array(data, if_vix=True)\n# price_array\n# Part 2: Train the agent\n# Train\nERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,\n        \"seed\":312,\"net_dimension\":[128,64], \"target_step\":5000, \"eval_gap\":30,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.add_vix(data)\n#data.shape\n# Step 4. Transform to numpy array\n#price_array, tech_array, turbulence_array = DP.df_to_array(data, if_vix=True)\n# price_array\n# Part 2: Train the agent\n# Train\nERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,\n        \"seed\":312,\"net_dimension\":[128,64], \"target_step\":5000, \"eval_gap\":30,\n        \"eval_times\":1} ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,\n        \"seed\":312,\"net_dimension\":[128,64], \"target_step\":5000, \"eval_gap\":30,\n        \"eval_times\":1} \nenv = StockTradingEnv\n#if you want to use larger datasets (change to longer period), and it raises error, \n#please try to increase \"target_step\". It should be larger than the episode steps. \ntrain(start_date = '2022-08-25', \n      end_date = '2022-08-31',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "env = StockTradingEnv\n#if you want to use larger datasets (change to longer period), and it raises error, \n#please try to increase \"target_step\". It should be larger than the episode steps. \ntrain(start_date = '2022-08-25', \n      end_date = '2022-08-31',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',\n      time_interval= '1Min', \n      technical_indicator_list= INDICATORS,\n      drl_lib='elegantrl', ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train(start_date",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "train(start_date = '2022-08-25', \n      end_date = '2022-08-31',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',\n      time_interval= '1Min', \n      technical_indicator_list= INDICATORS,\n      drl_lib='elegantrl', \n      env=env,\n      model_name='ppo',\n      if_vix=True, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "account_value_erl=test(start_date",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "account_value_erl=test(start_date = '2022-09-01', \n                      end_date = '2022-09-02',\n                      ticker_list = ticker_list, \n                      data_source = 'alpaca',\n                      time_interval= '1Min', \n                      technical_indicator_list= INDICATORS,\n                      drl_lib='elegantrl', \n                      env=env, \n                      model_name='ppo',\n                      if_vix=True, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train(start_date",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "train(start_date = '2022-08-25', \n      end_date = '2022-09-02',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',\n      time_interval= '1Min', \n      technical_indicator_list= INDICATORS,\n      drl_lib='elegantrl', \n      env=env, \n      model_name='ppo',\n      if_vix=True, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "paper_trading_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "paper_trading_erl = AlpacaPaperTrading(ticker_list = DOW_30_TICKER, \n                                       time_interval = '1Min', \n                                       drl_lib = 'elegantrl', \n                                       agent = 'ppo', \n                                       cwd = './papertrading_erl_retrain', \n                                       net_dim = ERL_PARAMS['net_dimension'], \n                                       state_dim = state_dim, \n                                       action_dim= action_dim, \n                                       ALPACA_API_KEY = ALPACA_API_KEY, \n                                       ALPACA_API_SECRET  = ALPACA_API_SECRET , ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ALPACA_API_KEY = \"\"\nALPACA_API_SECRET  = \"\"\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=ALPACA_API_KEY, \n                                  secret=ALPACA_API_SECRET , \n                                  url=ALPACA_API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=ALPACA_API_KEY, \n                                  secret=ALPACA_API_SECRET , \n                                  url=ALPACA_API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')\ndf_erl.tail()\nreturns_erl = cumu_erl -1 ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "data_url",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "data_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=ALPACA_API_KEY, \n                                  secret=ALPACA_API_SECRET , \n                                  url=ALPACA_API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')\ndf_erl.tail()\nreturns_erl = cumu_erl -1 \nreturns_dia = cumu_djia - 1",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "returns_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "returns_erl = cumu_erl -1 \nreturns_dia = cumu_djia - 1\nreturns_dia = returns_dia[:returns_erl.shape[0]]\nprint('len of erl return: ', returns_erl.shape[0])\nprint('len of dia return: ', returns_dia.shape[0])\nreturns_erl\nplot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "returns_dia = cumu_djia - 1\nreturns_dia = returns_dia[:returns_erl.shape[0]]\nprint('len of erl return: ', returns_erl.shape[0])\nprint('len of dia return: ', returns_dia.shape[0])\nreturns_erl\nplot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which='minor', axis='y')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "returns_dia = returns_dia[:returns_erl.shape[0]]\nprint('len of erl return: ', returns_erl.shape[0])\nprint('len of dia return: ', returns_dia.shape[0])\nreturns_erl\nplot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which='minor', axis='y')\nplt.title('Stock Trading (Paper trading)', fontsize=20)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "plt.xticks(size",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "plt.xticks(size = 14)\nplt.yticks(size = 14)\nax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(ticker.FixedFormatter(['','10-19','','10-20',\n                                                    '','10-21','','10-22']))\nplt.legend(fontsize=10.5)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "plt.yticks(size",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "plt.yticks(size = 14)\nax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(ticker.FixedFormatter(['','10-19','','10-20',\n                                                    '','10-21','','10-22']))\nplt.legend(fontsize=10.5)\nplt.savefig('papertrading_stock.png')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(ticker.FixedFormatter(['','10-19','','10-20',\n                                                    '','10-21','','10-22']))\nplt.legend(fontsize=10.5)\nplt.savefig('papertrading_stock.png')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "docs.examples.PY.t6",
        "description": "docs.examples.PY.t6",
        "peekOfCode": "def main():\n  ALPACA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\n  ALPACA_API_SECRET  = \"BxT64PIQtDBb*tnW\"\n  ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\n  import warnings\n  warnings.filterwarnings(\"ignore\")\n  import os\n  import time\n  import gym\n  import torch",
        "detail": "docs.examples.PY.t6",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nINDICATORS = ['macd',",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,\n    'td3' : 1\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],\n              baseline_end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "api = tradeapi.REST(ALPACA_API_KEY, ALPACA_API_SECRET , ALPACA_API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,\n            qty=qty,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "ALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"\nALPACA_API_SECRET  = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint\nimport sys\nsys.path.append(\"../FinRL-Library\")",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nINDICATORS = ['macd',",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,\n    'td3' : 1\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],\n              baseline_end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "api = tradeapi.REST(ALPACA_API_KEY, ALPACA_API_SECRET , ALPACA_API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,\n            qty=qty,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "project = \"Lumibot\"\ncopyright = \"2021, Lumiwealth\"\nauthor = \"Lumiwealth Inc.\"\nhtml_title = \"Lumibot Documentation\"\nsource_paths = [\"lumibot.brokers\", \"backtesting\"]\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "copyright = \"2021, Lumiwealth\"\nauthor = \"Lumiwealth Inc.\"\nhtml_title = \"Lumibot Documentation\"\nsource_paths = [\"lumibot.brokers\", \"backtesting\"]\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.napoleon\",",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "author = \"Lumiwealth Inc.\"\nhtml_title = \"Lumibot Documentation\"\nsource_paths = [\"lumibot.brokers\", \"backtesting\"]\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.autosummary\",",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "html_title",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "html_title = \"Lumibot Documentation\"\nsource_paths = [\"lumibot.brokers\", \"backtesting\"]\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.autodoc\",",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "source_paths",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "source_paths = [\"lumibot.brokers\", \"backtesting\"]\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.autodoc\",\n]",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "extensions = [\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.autodoc\",\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "templates_path = [\"_templates\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"furo\"",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "exclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"furo\"\nhtml_theme_options = {\n    \"sidebar_hide_name\": True,\n    \"light_logo\": \"Lumibot_Logo.webp\",\n    \"dark_logo\": \"Lumibot_Logo.webp\",",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "html_theme = \"furo\"\nhtml_theme_options = {\n    \"sidebar_hide_name\": True,\n    \"light_logo\": \"Lumibot_Logo.webp\",\n    \"dark_logo\": \"Lumibot_Logo.webp\",\n    'announcement': \"\"\"\n    <div class=\"footer-banner bg-warning text-dark p-3\">\n        <h5>Need Extra Help?</h5>\n        <p>Visit <a href=\"https://www.lumiwealth.com/?utm_source=documentation&utm_medium=referral&utm_campaign=lumibot_footer_banner\" target=\"_blank\" class=\"text-dark\"><strong>Lumiwealth</strong></a> for courses, community, and profitable pre-made trading bots.</p>\n    </div>",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "html_theme_options = {\n    \"sidebar_hide_name\": True,\n    \"light_logo\": \"Lumibot_Logo.webp\",\n    \"dark_logo\": \"Lumibot_Logo.webp\",\n    'announcement': \"\"\"\n    <div class=\"footer-banner bg-warning text-dark p-3\">\n        <h5>Need Extra Help?</h5>\n        <p>Visit <a href=\"https://www.lumiwealth.com/?utm_source=documentation&utm_medium=referral&utm_campaign=lumibot_footer_banner\" target=\"_blank\" class=\"text-dark\"><strong>Lumiwealth</strong></a> for courses, community, and profitable pre-made trading bots.</p>\n    </div>\n    \"\"\"",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "html_static_path = [\"_html\"]\nhtml_css_files = [\"custom.css\", \"bootstrap/css/bootstrap.css\"]\n# html_theme_options = {\n#     \"announcement\": \"\"\"\n#     <div class=\"important-note\" style=\"margin-top: 20px; padding: 20px; background-color: #ffdd57; border-radius: 5px;\">\n#         <h3>Important!</h3>\n#         <p>If you need extra help building your strategies and making them profitable, Lumiwealth has you covered. By visiting Lumiwealth, you not only learn how to use the Lumibot library but also gain access to a wealth of highly profitable algorithms.</p>\n#         <p><strong>Our strategies have shown exceptional results, with some achieving over 100% annual returns and others reaching up to 1,000% in backtesting.</strong></p>\n#         <p>Join our community of traders, take comprehensive courses, and access our library of profitable trading bots. Visit <a href=\"https://www.lumiwealth.com/?utm_source=documentation&utm_medium=referral&utm_campaign=lumibot_every_page\" target=\"_blank\">Lumiwealth</a> to learn more.</p>\n#     </div>",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "html_css_files",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "html_css_files = [\"custom.css\", \"bootstrap/css/bootstrap.css\"]\n# html_theme_options = {\n#     \"announcement\": \"\"\"\n#     <div class=\"important-note\" style=\"margin-top: 20px; padding: 20px; background-color: #ffdd57; border-radius: 5px;\">\n#         <h3>Important!</h3>\n#         <p>If you need extra help building your strategies and making them profitable, Lumiwealth has you covered. By visiting Lumiwealth, you not only learn how to use the Lumibot library but also gain access to a wealth of highly profitable algorithms.</p>\n#         <p><strong>Our strategies have shown exceptional results, with some achieving over 100% annual returns and others reaching up to 1,000% in backtesting.</strong></p>\n#         <p>Join our community of traders, take comprehensive courses, and access our library of profitable trading bots. Visit <a href=\"https://www.lumiwealth.com/?utm_source=documentation&utm_medium=referral&utm_campaign=lumibot_every_page\" target=\"_blank\">Lumiwealth</a> to learn more.</p>\n#     </div>\n#     \"\"\"",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "html_context",
        "kind": 5,
        "importPath": "docs.lumibot00.docsrc.conf",
        "description": "docs.lumibot00.docsrc.conf",
        "peekOfCode": "html_context = {\n    'note': \"\"\"\n    <div class=\"important-note\" style=\"margin-top: 20px; padding: 20px; background-color: #ffdd57; border-radius: 5px;\">\n        <h3>Important!</h3>\n        <p>If you need extra help building your strategies and making them profitable, Lumiwealth has you covered. By visiting Lumiwealth, you not only learn how to use the Lumibot library but also gain access to a wealth of highly profitable algorithms.</p>\n        <p><strong>Our strategies have shown exceptional results, with some achieving over 100% annual returns and others reaching up to 1,000% in backtesting.</strong></p>\n        <p>Join our community of traders, take comprehensive courses, and access our library of profitable trading bots. Visit <a href=\"https://www.lumiwealth.com/?utm_source=documentation&utm_medium=referral&utm_campaign=lumibot_every_page\" target=\"_blank\">Lumiwealth</a> to learn more.</p>\n    </div>\n    \"\"\"\n}",
        "detail": "docs.lumibot00.docsrc.conf",
        "documentation": {}
    },
    {
        "label": "TestExampleStrategies",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_example_strategies",
        "description": "docs.lumibot00.tests.backtest.test_example_strategies",
        "peekOfCode": "class TestExampleStrategies:\n    def test_stock_bracket(self):\n        \"\"\"\n        Test the example strategy StockBracket by running a backtest and checking that the strategy object is returned\n        along with the correct results\n        \"\"\"\n        # Parameters\n        backtesting_start = datetime.datetime(2023, 3, 3)\n        backtesting_end = datetime.datetime(2023, 3, 10)\n        # Execute Backtest",
        "detail": "docs.lumibot00.tests.backtest.test_example_strategies",
        "documentation": {}
    },
    {
        "label": "POLYGON_API_KEY",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_example_strategies",
        "description": "docs.lumibot00.tests.backtest.test_example_strategies",
        "peekOfCode": "POLYGON_API_KEY = os.environ.get(\"POLYGON_API_KEY\")\nPOLYGON_IS_PAID_SUBSCRIPTION = os.getenv(\"POLYGON_IS_PAID_SUBSCRIPTION\", \"true\").lower() not in {'false', '0', 'f', 'n', 'no'}\nclass TestExampleStrategies:\n    def test_stock_bracket(self):\n        \"\"\"\n        Test the example strategy StockBracket by running a backtest and checking that the strategy object is returned\n        along with the correct results\n        \"\"\"\n        # Parameters\n        backtesting_start = datetime.datetime(2023, 3, 3)",
        "detail": "docs.lumibot00.tests.backtest.test_example_strategies",
        "documentation": {}
    },
    {
        "label": "POLYGON_IS_PAID_SUBSCRIPTION",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_example_strategies",
        "description": "docs.lumibot00.tests.backtest.test_example_strategies",
        "peekOfCode": "POLYGON_IS_PAID_SUBSCRIPTION = os.getenv(\"POLYGON_IS_PAID_SUBSCRIPTION\", \"true\").lower() not in {'false', '0', 'f', 'n', 'no'}\nclass TestExampleStrategies:\n    def test_stock_bracket(self):\n        \"\"\"\n        Test the example strategy StockBracket by running a backtest and checking that the strategy object is returned\n        along with the correct results\n        \"\"\"\n        # Parameters\n        backtesting_start = datetime.datetime(2023, 3, 3)\n        backtesting_end = datetime.datetime(2023, 3, 10)",
        "detail": "docs.lumibot00.tests.backtest.test_example_strategies",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "def run_test(strategy_name):\n    strategy_params = mapping.get(strategy_name)\n    logfile = strategy_params[\"logfile\"]\n    trader = Trader(logfile=strategy_params[\"logfile\"], debug=debug)\n    strategy_class = strategy_params[\"class\"]\n    backtesting_datasource = strategy_params[\"backtesting_datasource\"]\n    pandas_data = (\n        strategy_params[\"pandas_data\"] if \"pandas_data\" in strategy_params else None\n    )\n    kwargs = strategy_params[\"kwargs\"]",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "test_integration",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "def test_integration():\n    # delete_logs_directory()\n    agg_results = dict()\n    strategies = list(mapping.keys())\n    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count() - 2)\n    for result in pool.imap_unordered(run_test, strategies):\n        agg_results[result['strategy']] = result\n    pool.close()\n    expected_result = {\n        \"buy_and_hold\": {",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "cleanup",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "def cleanup(request):\n    \"\"\"Cleanup a testing directory once we are finished.\"\"\"\n    def remove_test_dir():\n        if os.path.exists(\"../logs\"):\n            try:\n                shutil.rmtree(\"../logs\")\n            except PermissionError:\n                # Unit test race condition where files were still marked as \"in use\" as this ran\n                sleep(1)\n                shutil.rmtree(\"../logs\")",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "debug = True\nbacktesting_start = datetime.datetime(2019, 3, 1)\nbacktesting_end = datetime.datetime(2019, 11, 1)\nlogfile = \"logs/test.log\"\ntrader = Trader(logfile=logfile, debug=debug)\ntrading_hours_start = datetime.time(9, 30)\ntrading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "backtesting_start",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "backtesting_start = datetime.datetime(2019, 3, 1)\nbacktesting_end = datetime.datetime(2019, 11, 1)\nlogfile = \"logs/test.log\"\ntrader = Trader(logfile=logfile, debug=debug)\ntrading_hours_start = datetime.time(9, 30)\ntrading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "backtesting_end",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "backtesting_end = datetime.datetime(2019, 11, 1)\nlogfile = \"logs/test.log\"\ntrader = Trader(logfile=logfile, debug=debug)\ntrading_hours_start = datetime.time(9, 30)\ntrading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "logfile",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "logfile = \"logs/test.log\"\ntrader = Trader(logfile=logfile, debug=debug)\ntrading_hours_start = datetime.time(9, 30)\ntrading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "trader = Trader(logfile=logfile, debug=debug)\ntrading_hours_start = datetime.time(9, 30)\ntrading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(\n        symbol=ticker,",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "trading_hours_start",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "trading_hours_start = datetime.time(9, 30)\ntrading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(\n        symbol=ticker,\n        asset_type=\"stock\",",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "trading_hours_end",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "trading_hours_end = datetime.time(15, 30)\npandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(\n        symbol=ticker,\n        asset_type=\"stock\",\n    )",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "pandas_data",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "pandas_data = dict()\ntickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(\n        symbol=ticker,\n        asset_type=\"stock\",\n    )\n    df = pd.read_csv(",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "tickers",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "tickers = [\"SPY\", \"DJP\", \"TLT\", \"GLD\", \"IEF\"]\ndata_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(\n        symbol=ticker,\n        asset_type=\"stock\",\n    )\n    df = pd.read_csv(\n        csv_path,",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "data_dir = Path(__file__).parent.parent / \"data\"\nfor ticker in tickers:\n    csv_path = data_dir / f\"{ticker}.csv\"\n    asset = Asset(\n        symbol=ticker,\n        asset_type=\"stock\",\n    )\n    df = pd.read_csv(\n        csv_path,\n        parse_dates=True,",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "description": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "peekOfCode": "mapping = {\n    \"momentum\": {\n        \"class\": Momentum,\n        \"backtesting_datasource\": PandasDataBacktesting,\n        \"kwargs\": {\"symbols\": list(pandas_data)},\n        \"config\": None,\n        \"pandas_data\": pandas_data,\n        \"logfile\": \"logs/log_momentum.txt\",\n    },\n    # \"diversification\": {",
        "detail": "docs.lumibot00.tests.backtest.test_main_pandas_daily",
        "documentation": {}
    },
    {
        "label": "TestPandasBacktest",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_pandas_backtest",
        "description": "docs.lumibot00.tests.backtest.test_pandas_backtest",
        "peekOfCode": "class TestPandasBacktest:\n    def test_pandas_data_fixture(self, pandas_data_fixture):\n        assert pandas_data_fixture is not None\n    def test_pandas_datasource_with_daily_data_in_backtest(self, pandas_data_fixture):\n        strategy_name = \"LifecycleLogger\"\n        strategy_class = LifecycleLogger\n        backtesting_start = DateTime(2019, 1, 14)\n        backtesting_end = DateTime(2019, 1, 20)\n        # Replace the strategy name now that it's known.\n        for data in pandas_data_fixture.values():",
        "detail": "docs.lumibot00.tests.backtest.test_pandas_backtest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_pandas_backtest",
        "description": "docs.lumibot00.tests.backtest.test_pandas_backtest",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TestPandasBacktest:\n    def test_pandas_data_fixture(self, pandas_data_fixture):\n        assert pandas_data_fixture is not None\n    def test_pandas_datasource_with_daily_data_in_backtest(self, pandas_data_fixture):\n        strategy_name = \"LifecycleLogger\"\n        strategy_class = LifecycleLogger\n        backtesting_start = DateTime(2019, 1, 14)\n        backtesting_end = DateTime(2019, 1, 20)\n        # Replace the strategy name now that it's known.",
        "detail": "docs.lumibot00.tests.backtest.test_pandas_backtest",
        "documentation": {}
    },
    {
        "label": "TestPassingTraderIntoBacktest",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_passing_trader_into_backtest",
        "description": "docs.lumibot00.tests.backtest.test_passing_trader_into_backtest",
        "peekOfCode": "class TestPassingTraderIntoBacktest:\n    def test_not_passing_trader_class_into_backtest_creates_generic_trader(self, pandas_data_fixture):\n        # When we create a backtest and don't pass in a trader_class, the trader it creates should be a Trader object\n        strategy_name = \"LifecycleLogger_with_default_trader\"\n        strategy_class = LifecycleLogger\n        backtesting_start = datetime.datetime(2019, 1, 14)\n        backtesting_end = datetime.datetime(2019, 1, 20)\n        parameters = {\n            \"sleeptime\": \"1D\",\n            \"market\": \"NYSE\",",
        "detail": "docs.lumibot00.tests.backtest.test_passing_trader_into_backtest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_passing_trader_into_backtest",
        "description": "docs.lumibot00.tests.backtest.test_passing_trader_into_backtest",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TestPassingTraderIntoBacktest:\n    def test_not_passing_trader_class_into_backtest_creates_generic_trader(self, pandas_data_fixture):\n        # When we create a backtest and don't pass in a trader_class, the trader it creates should be a Trader object\n        strategy_name = \"LifecycleLogger_with_default_trader\"\n        strategy_class = LifecycleLogger\n        backtesting_start = datetime.datetime(2019, 1, 14)\n        backtesting_end = datetime.datetime(2019, 1, 20)\n        parameters = {\n            \"sleeptime\": \"1D\",",
        "detail": "docs.lumibot00.tests.backtest.test_passing_trader_into_backtest",
        "documentation": {}
    },
    {
        "label": "PolygonBacktestStrat",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_polygon",
        "description": "docs.lumibot00.tests.backtest.test_polygon",
        "peekOfCode": "class PolygonBacktestStrat(Strategy):\n    parameters = {\"symbol\": \"AMZN\"}\n    # Set the initial values for the strategy\n    def initialize(self, custom_sleeptime=\"1D\"):\n        self.sleeptime = custom_sleeptime\n        self.first_price = None\n        self.first_option_price = None\n        self.orders = []\n        self.prices = {}\n        self.chains = {}",
        "detail": "docs.lumibot00.tests.backtest.test_polygon",
        "documentation": {}
    },
    {
        "label": "TestPolygonBacktestFull",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_polygon",
        "description": "docs.lumibot00.tests.backtest.test_polygon",
        "peekOfCode": "class TestPolygonBacktestFull:\n    def verify_backtest_results(self, poly_strat_obj):\n        assert isinstance(poly_strat_obj, PolygonBacktestStrat)\n        # Checks bug where LifeCycle methods not being called during PANDAS backtesting\n        assert poly_strat_obj.market_opens_called\n        assert poly_strat_obj.market_closes_called\n        assert len(poly_strat_obj.orders) == 3  # Stock, option, stoploss all submitted\n        assert len(poly_strat_obj.prices) == 2\n        stock_order = poly_strat_obj.orders[0]\n        option_order = poly_strat_obj.orders[1]",
        "detail": "docs.lumibot00.tests.backtest.test_polygon",
        "documentation": {}
    },
    {
        "label": "TestPolygonDataSource",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_polygon",
        "description": "docs.lumibot00.tests.backtest.test_polygon",
        "peekOfCode": "class TestPolygonDataSource:\n    @pytest.mark.skipif(POLYGON_API_KEY == '<your key here>', reason=\"This test requires a Polygon.io API key\")\n    def test_get_historical_prices(self):\n        tzinfo = pytz.timezone(\"America/New_York\")\n        start = datetime.datetime(2024, 2, 5).astimezone(tzinfo)\n        end = datetime.datetime(2024, 2, 10).astimezone(tzinfo)\n        data_source = PolygonDataBacktesting(\n            start, end, api_key=POLYGON_API_KEY\n        )\n        data_source._datetime = datetime.datetime(2024, 2, 7, 10).astimezone(tzinfo)",
        "detail": "docs.lumibot00.tests.backtest.test_polygon",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_strategy_executor",
        "description": "docs.lumibot00.tests.backtest.test_strategy_executor",
        "peekOfCode": "class MyStrategy(Strategy):\n    def initialize(self):\n        pass\n    def on_trading_iteration(self):\n        pass \nclass TestStrategyExecutor:\n    def test_calculate_strategy_trigger(self):\n        backtest_broker = PandasDataBacktesting(\n                datetime_start=datetime(2021, 1, 1),\n                datetime_end=datetime(2021, 1, 2),",
        "detail": "docs.lumibot00.tests.backtest.test_strategy_executor",
        "documentation": {}
    },
    {
        "label": "TestStrategyExecutor",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_strategy_executor",
        "description": "docs.lumibot00.tests.backtest.test_strategy_executor",
        "peekOfCode": "class TestStrategyExecutor:\n    def test_calculate_strategy_trigger(self):\n        backtest_broker = PandasDataBacktesting(\n                datetime_start=datetime(2021, 1, 1),\n                datetime_end=datetime(2021, 1, 2),\n            )\n        strategy = MyStrategy(broker=backtest_broker)\n        strategy_executor = StrategyExecutor(strategy=strategy)\n        res = strategy_executor.calculate_strategy_trigger()\n        assert res == 1",
        "detail": "docs.lumibot00.tests.backtest.test_strategy_executor",
        "documentation": {}
    },
    {
        "label": "ThetadataBacktestStrat",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "class ThetadataBacktestStrat(Strategy):\n    parameters = {\"symbol\": \"AMZN\"}\n    # Set the initial values for the strategy\n    def initialize(self, parameters=None):\n        self.sleeptime = \"1H\"\n        self.first_price = None\n        self.first_option_price = None\n        self.orders = []\n        self.prices = {}\n        self.chains = {}",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "TestThetaDataBacktestFull",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "class TestThetaDataBacktestFull:\n    def verify_backtest_results(self, theta_strat_obj):\n        assert isinstance(theta_strat_obj, ThetadataBacktestStrat)\n        # Checks bug where LifeCycle methods not being called during PANDAS backtesting\n        assert theta_strat_obj.market_opens_called\n        assert theta_strat_obj.market_closes_called\n        assert len(theta_strat_obj.orders) == 3  # Stock, option, stoploss all submitted\n        assert len(theta_strat_obj.prices) == 2\n        stock_order = theta_strat_obj.orders[0]\n        option_order = theta_strat_obj.orders[1]",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "find_git_root",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "def find_git_root(path):\n    # Traverse the directories upwards until a .git directory is found\n    original_path = path\n    while not os.path.isdir(os.path.join(path, '.git')):\n        parent_path = os.path.dirname(path)\n        if parent_path == path:\n            # Reached the root of the filesystem, .git directory not found\n            raise Exception(f\"No .git directory found starting from {original_path}\")\n        path = parent_path\n    return path",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "kill_processes_by_name",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "def kill_processes_by_name(keyword):\n    try:\n        # Find all processes related to the keyword\n        result = subprocess.run(['pgrep', '-f', keyword], capture_output=True, text=True)\n        pids = result.stdout.strip().split('\\n')\n        if pids:\n            for pid in pids:\n                if pid:  # Ensure the PID is not empty\n                    print(f\"Killing process with PID: {pid}\")\n                    subprocess.run(['kill', '-9', pid])",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "run_before_and_after_tests",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "def run_before_and_after_tests():\n    # Code to execute before running any tests\n    kill_processes_by_name(keyword)\n    print(\"Setup before any test\")\n    yield  # This is where the testing happens\n    # Code to execute after all tests\n    kill_processes_by_name(keyword)\n    print(\"Teardown after all tests\")\ntry:\n    # Find the root of the git repository",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "keyword = 'ThetaTerminal.jar'\ndef find_git_root(path):\n    # Traverse the directories upwards until a .git directory is found\n    original_path = path\n    while not os.path.isdir(os.path.join(path, '.git')):\n        parent_path = os.path.dirname(path)\n        if parent_path == path:\n            # Reached the root of the filesystem, .git directory not found\n            raise Exception(f\"No .git directory found starting from {original_path}\")\n        path = parent_path",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "THETADATA_USERNAME",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "THETADATA_USERNAME = os.environ.get(\"THETADATA_USERNAME\")\nTHETADATA_PASSWORD = os.environ.get(\"THETADATA_PASSWORD\")\n############################################################################################################\nsecrets_not_found = False\nif not THETADATA_USERNAME or THETADATA_USERNAME == \"uname\":\n    print(\"CHECK: Unable to get THETADATA_USERNAME in the environemnt variables.\")\n    secrets_not_found = True\nif not THETADATA_PASSWORD or THETADATA_PASSWORD == \"pwd\":\n    print(\"CHECK: Unable to get THETADATA_PASSWORD in the environemnt variables.\")\n    secrets_not_found = True",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "THETADATA_PASSWORD",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "THETADATA_PASSWORD = os.environ.get(\"THETADATA_PASSWORD\")\n############################################################################################################\nsecrets_not_found = False\nif not THETADATA_USERNAME or THETADATA_USERNAME == \"uname\":\n    print(\"CHECK: Unable to get THETADATA_USERNAME in the environemnt variables.\")\n    secrets_not_found = True\nif not THETADATA_PASSWORD or THETADATA_PASSWORD == \"pwd\":\n    print(\"CHECK: Unable to get THETADATA_PASSWORD in the environemnt variables.\")\n    secrets_not_found = True\nif secrets_not_found:",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "secrets_not_found",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.backtest.test_thetadata",
        "description": "docs.lumibot00.tests.backtest.test_thetadata",
        "peekOfCode": "secrets_not_found = False\nif not THETADATA_USERNAME or THETADATA_USERNAME == \"uname\":\n    print(\"CHECK: Unable to get THETADATA_USERNAME in the environemnt variables.\")\n    secrets_not_found = True\nif not THETADATA_PASSWORD or THETADATA_PASSWORD == \"pwd\":\n    print(\"CHECK: Unable to get THETADATA_PASSWORD in the environemnt variables.\")\n    secrets_not_found = True\nif secrets_not_found:\n    print(\"ERROR: Unable to get ThetaData API credentials from the environment variables.\")\nclass ThetadataBacktestStrat(Strategy):",
        "detail": "docs.lumibot00.tests.backtest.test_thetadata",
        "documentation": {}
    },
    {
        "label": "YahooPriceTest",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_yahoo",
        "description": "docs.lumibot00.tests.backtest.test_yahoo",
        "peekOfCode": "class YahooPriceTest(Strategy):\n    parameters = {\n        \"symbol\": \"SPY\",  # The symbol to trade\n    }\n    def initialize(self):\n        # There is only one trading operation per day\n        self.sleeptime = \"1D\"\n    def on_trading_iteration(self):\n        # Get the parameters\n        symbol = self.parameters[\"symbol\"]",
        "detail": "docs.lumibot00.tests.backtest.test_yahoo",
        "documentation": {}
    },
    {
        "label": "TestYahooBacktestFull",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.backtest.test_yahoo",
        "description": "docs.lumibot00.tests.backtest.test_yahoo",
        "peekOfCode": "class TestYahooBacktestFull:\n    def test_yahoo_last_price(self):\n        \"\"\"\n        Test the YahooDataBacktesting class by running a backtest and checking that the strategy object is returned\n        along with the correct results\n        \"\"\"\n        # Parameters: True = Live Trading | False = Backtest\n        # trade_live = False\n        backtesting_start = datetime.datetime(2023, 11, 1)\n        backtesting_end = datetime.datetime(2023, 11, 2)",
        "detail": "docs.lumibot00.tests.backtest.test_yahoo",
        "documentation": {}
    },
    {
        "label": "polygon_data_backtesting",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.fixtures",
        "description": "docs.lumibot00.tests.fixtures",
        "peekOfCode": "def polygon_data_backtesting():\n    datetime_start = datetime.datetime(2023, 1, 1)\n    datetime_end = datetime.datetime(2023, 2, 1)\n    api_key = \"fake_api_key\"\n    pandas_data = {}\n    polygon_data_instance = PolygonDataBacktesting(\n        datetime_start=datetime_start,\n        datetime_end=datetime_end,\n        pandas_data=pandas_data,\n        api_key=api_key,",
        "detail": "docs.lumibot00.tests.fixtures",
        "documentation": {}
    },
    {
        "label": "pandas_data_fixture",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.fixtures",
        "description": "docs.lumibot00.tests.fixtures",
        "peekOfCode": "def pandas_data_fixture() -> Dict[Asset, Data]:\n    \"\"\"\n    Get a dictionary of Lumibot Data objects from the test data in tests/data folder\n    \"\"\"\n    symbols = [\"SPY\", \"TLT\", \"GLD\"]\n    pandas_data = dict()\n    data_dir = os.getcwd() + \"/data\"\n    print(data_dir)\n    for symbol in symbols:\n        csv_path = data_dir + f\"/{symbol}.csv\"",
        "detail": "docs.lumibot00.tests.fixtures",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.fixtures",
        "description": "docs.lumibot00.tests.fixtures",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.fixture\ndef polygon_data_backtesting():\n    datetime_start = datetime.datetime(2023, 1, 1)\n    datetime_end = datetime.datetime(2023, 2, 1)\n    api_key = \"fake_api_key\"\n    pandas_data = {}\n    polygon_data_instance = PolygonDataBacktesting(\n        datetime_start=datetime_start,\n        datetime_end=datetime_end,",
        "detail": "docs.lumibot00.tests.fixtures",
        "documentation": {}
    },
    {
        "label": "test_initialize_broker_legacy",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca",
        "description": "docs.lumibot00.tests.test_alpaca",
        "peekOfCode": "def test_initialize_broker_legacy():\n    \"\"\"\n    This test to make sure the legacy way of initializing the broker still works.\n    \"\"\"\n    broker = Alpaca(ALPACA_CONFIG)\n    strategy = BuyAndHold(\n        broker=broker,\n    )\n    # Assert that strategy.broker is the same as broker\n    assert strategy.broker == broker",
        "detail": "docs.lumibot00.tests.test_alpaca",
        "documentation": {}
    },
    {
        "label": "ALPACA_CONFIG",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca",
        "description": "docs.lumibot00.tests.test_alpaca",
        "peekOfCode": "ALPACA_CONFIG = {  # Paper trading!\n    # Put your own Alpaca key here:\n    \"API_KEY\": \"PKP00CIO3VSDTZIT1HSV\",\n    # Put your own Alpaca secret here:\n    \"API_SECRET\": \"sKdQGSgtOxdARoNwkELaZqgvhGaxlPtBq82t5MhR\",\n    # If you want to use real money you must change this to False\n    \"PAPER\": True,\n}\ndef test_initialize_broker_legacy():\n    \"\"\"",
        "detail": "docs.lumibot00.tests.test_alpaca",
        "documentation": {}
    },
    {
        "label": "test_get_timestamp",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test_get_timestamp(monkeypatch):\n    def mock_clock():\n        class Clock:\n            timestamp = Timestamp(2021, 2, 1, 9, 45, 30, 234)\n        return Clock()\n    monkeypatch.setattr(alpaca.api, \"get_clock\", mock_clock)\n    assert alpaca.get_timestamp() == 1612172730.000234\ndef test_is_market_open(monkeypatch):\n    def mock_is_open():\n        class Clock:",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test_is_market_open",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test_is_market_open(monkeypatch):\n    def mock_is_open():\n        class Clock:\n            is_open = True\n        return Clock()\n    monkeypatch.setattr(alpaca.api, \"get_clock\", mock_is_open)\n    assert alpaca.is_market_open() == True\ndef test_get_time_to_open(monkeypatch):\n    def mock_to_open():\n        class Clock:",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test_get_time_to_open",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test_get_time_to_open(monkeypatch):\n    def mock_to_open():\n        class Clock:\n            next_open = Timestamp(2021, 2, 1, 9, 30, 0, 0)\n            timestamp = Timestamp(2021, 2, 1, 8, 30, 0, 0)\n        return Clock()\n    monkeypatch.setattr(alpaca.api, \"get_clock\", mock_to_open)\n    assert alpaca.get_time_to_open() == 3600\ndef test_get_time_to_close(monkeypatch):\n    def mock_to_close():",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test_get_time_to_close",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test_get_time_to_close(monkeypatch):\n    def mock_to_close():\n        class Clock:\n            timestamp = Timestamp(2021, 2, 1, 14, 0, 0, 0)\n            next_close = Timestamp(2021, 2, 1, 16, 0, 0, 0)\n        return Clock()\n    monkeypatch.setattr(alpaca.api, \"get_clock\", mock_to_close)\n    assert alpaca.get_time_to_close() == 7200\ndef test__get_balance_at_broker(monkeypatch):\n    def mock_cash():",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test__get_balance_at_broker",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test__get_balance_at_broker(monkeypatch):\n    def mock_cash():\n        class Account:\n            _raw = dict(\n                cash=\"123456.78\",\n                long_market_value=0,\n                short_market_value=0,\n                portfolio_value=123456.78,\n            )\n        return Account()",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test__parse_broker_position",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test__parse_broker_position(symbol, qty):\n    class BPosition:\n        _raw = {\"symbol\": symbol, \"qty\": str(qty), \"asset_class\": \"us_equity\"}\n    bposition = BPosition()\n    position = Position(\n        \"AlpacaTest\",\n        Asset(symbol=symbol, asset_type=\"stock\"),\n        quantity=qty,\n        orders=None,\n    )",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test_map_asset_type",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test_map_asset_type(type):\n    try:\n        alpaca.map_asset_type(type) == \"stock\"\n    except:\n        if type != \"us_equity\":\n            assert True\n        else:\n            assert False\nvars = \"symbol, qty, side, limit_price, stop_price, time_in_force, id, status,\"\nparams = [",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test__parse_broker_order",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test__parse_broker_order(\n    symbol,\n    qty,\n    side,\n    limit_price,\n    stop_price,\n    time_in_force,\n    id,\n    status,\n):",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test__pull_source_symbol_bars",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test__pull_source_symbol_bars(monkeypatch):\n    \"\"\"Dataframe results will be mocked in _pull_source_bars\"\"\"\n    asset = Asset(symbol=\"MSFT\", asset_type=\"stock\")\n    def mock_pull_source_bars(asset, length, timestep=\"minute\", timeshift=None):\n        df = \"dataframe\"\n        return {asset[0]: df}\n    monkeypatch.setattr(alpaca, \"_pull_source_bars\", mock_pull_source_bars)\n    expected = {asset: \"dataframe\"}\n    result = alpaca._pull_source_symbol_bars(\n        asset, length=10, timestep=\"day\", timeshift=0",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test__pull_source_bars",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test__pull_source_bars(length, timestep, timeshift, monkeypatch):\n    \"\"\"Only returning dummy dataframe, testing get_barset_from_api separately\"\"\"\n    symbols = [\"MSFT\", \"FB\", \"GM\"]\n    assets = []\n    for symbol in symbols:\n        assets.append(Asset(symbol=symbol, asset_type=\"stock\"))\n    def mock_get_barset_from_api(\n        method_assets, length, timestep=\"minute\", timeshift=None\n    ):\n        result = {}",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test_get_barset_from_api",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test_get_barset_from_api(symbol, freq, limit, end):\n    \"\"\"Testing _get_barset_from_api\"\"\"\n    class API:\n        barset = None\n        def get_barset(self, symbol, freq, limit=None, end=None):\n            barset = dict()\n            path = Path(\"data/\")\n            filename = f\"XYZ_{freq}.csv\"\n            filepath = path / filename\n            df = pd.read_csv(filepath, index_col=0, parse_dates=True)",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test__parse_source_symbol_bars",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "def test__parse_source_symbol_bars():\n    asset = Asset(symbol=\"XYZ\", asset_type=\"stock\")\n    response = pd.DataFrame(\n        [\n            [\n                datetime.datetime(2021, 12, 10, 11, 5, 0),\n                175.82,\n                175.885,\n                175.655,\n                175.73,",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "alpaca",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "alpaca = Alpaca(ALPACA_CONFIG)\ndef test_get_timestamp(monkeypatch):\n    def mock_clock():\n        class Clock:\n            timestamp = Timestamp(2021, 2, 1, 9, 45, 30, 234)\n        return Clock()\n    monkeypatch.setattr(alpaca.api, \"get_clock\", mock_clock)\n    assert alpaca.get_timestamp() == 1612172730.000234\ndef test_is_market_open(monkeypatch):\n    def mock_is_open():",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "vars",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "vars = \"symbol, qty, side, limit_price, stop_price, time_in_force, id, status,\"\nparams = [\n    (\"MSFT\", 10, \"buy\", None, None, None, \"100\", \"new\"),\n    (\"FB\", 100, \"sell\", \"250\", \"255\", \"day\", \"101\", \"fill\"),\n]\n@pytest.mark.parametrize(vars, params)\ndef test__parse_broker_order(\n    symbol,\n    qty,\n    side,",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "params = [\n    (\"MSFT\", 10, \"buy\", None, None, None, \"100\", \"new\"),\n    (\"FB\", 100, \"sell\", \"250\", \"255\", \"day\", \"101\", \"fill\"),\n]\n@pytest.mark.parametrize(vars, params)\ndef test__parse_broker_order(\n    symbol,\n    qty,\n    side,\n    limit_price,",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "vars",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "vars = \"length, timestep, timeshift\"\nparams = [(10, \"minute\", 0), (20, \"minute\", 1), (30, \"day\", 4), (40, \"day\", 5)]\n@pytest.mark.parametrize(vars, params)\ndef test__pull_source_bars(length, timestep, timeshift, monkeypatch):\n    \"\"\"Only returning dummy dataframe, testing get_barset_from_api separately\"\"\"\n    symbols = [\"MSFT\", \"FB\", \"GM\"]\n    assets = []\n    for symbol in symbols:\n        assets.append(Asset(symbol=symbol, asset_type=\"stock\"))\n    def mock_get_barset_from_api(",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "params = [(10, \"minute\", 0), (20, \"minute\", 1), (30, \"day\", 4), (40, \"day\", 5)]\n@pytest.mark.parametrize(vars, params)\ndef test__pull_source_bars(length, timestep, timeshift, monkeypatch):\n    \"\"\"Only returning dummy dataframe, testing get_barset_from_api separately\"\"\"\n    symbols = [\"MSFT\", \"FB\", \"GM\"]\n    assets = []\n    for symbol in symbols:\n        assets.append(Asset(symbol=symbol, asset_type=\"stock\"))\n    def mock_get_barset_from_api(\n        method_assets, length, timestep=\"minute\", timeshift=None",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "vars",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "vars = \"symbol, freq, limit, end\"\nparams = [\n    (\"XYZ\", \"1D\", 150, datetime.datetime(2019, 11, 1)),\n    (\"XYZ\", \"1D\", 100, datetime.datetime(2019, 9, 1)),\n    (\"XYZ\", \"1D\", 50, datetime.datetime(2019, 4, 1)),\n    (\"XYZ\", \"1D\", 5, datetime.datetime(2019, 12, 18)),\n    (\"XYZ\", \"1Min\", 500, datetime.datetime(2020, 4, 18)),\n    (\"XYZ\", \"1Min\", 1500, datetime.datetime(2020, 4, 18)),\n]\n@pytest.mark.parametrize(vars, params)",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_alpaca_old",
        "description": "docs.lumibot00.tests.test_alpaca_old",
        "peekOfCode": "params = [\n    (\"XYZ\", \"1D\", 150, datetime.datetime(2019, 11, 1)),\n    (\"XYZ\", \"1D\", 100, datetime.datetime(2019, 9, 1)),\n    (\"XYZ\", \"1D\", 50, datetime.datetime(2019, 4, 1)),\n    (\"XYZ\", \"1D\", 5, datetime.datetime(2019, 12, 18)),\n    (\"XYZ\", \"1Min\", 500, datetime.datetime(2020, 4, 18)),\n    (\"XYZ\", \"1Min\", 1500, datetime.datetime(2020, 4, 18)),\n]\n@pytest.mark.parametrize(vars, params)\ndef test_get_barset_from_api(symbol, freq, limit, end):",
        "detail": "docs.lumibot00.tests.test_alpaca_old",
        "documentation": {}
    },
    {
        "label": "test_check_default_asset_name",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_check_default_asset_name():\n    asset = Asset(symbol=\"ABC\")\n    assert asset.symbol == \"ABC\"\ndef test_check_default_asset_type():\n    asset = Asset(symbol=\"ABC\")\n    assert asset.asset_type == \"stock\"\ndef test_check_defaults_with_stock():\n    asset = Asset(symbol=\"ABC\")\n    assert asset.asset_type == \"stock\"\n    assert asset.expiration is None",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_check_default_asset_type",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_check_default_asset_type():\n    asset = Asset(symbol=\"ABC\")\n    assert asset.asset_type == \"stock\"\ndef test_check_defaults_with_stock():\n    asset = Asset(symbol=\"ABC\")\n    assert asset.asset_type == \"stock\"\n    assert asset.expiration is None\n    assert asset.right is None\n    assert asset.multiplier == 1\ndef test_is_hashable():",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_check_defaults_with_stock",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_check_defaults_with_stock():\n    asset = Asset(symbol=\"ABC\")\n    assert asset.asset_type == \"stock\"\n    assert asset.expiration is None\n    assert asset.right is None\n    assert asset.multiplier == 1\ndef test_is_hashable():\n    asset = Asset(symbol=\"ABC\")\n    assert isinstance(asset, Hashable)\ndef test_extra_attributes_at_initialization():",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_is_hashable",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_is_hashable():\n    asset = Asset(symbol=\"ABC\")\n    assert isinstance(asset, Hashable)\ndef test_extra_attributes_at_initialization():\n    # Ignore extra attributes during model initialization.\n    with pytest.raises(Exception):\n        Asset(symbol=\"ABC\", extra_attribute=1)\ndef test_instances_equal():\n    a = Asset(\n        symbol=\"ABC\",",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_extra_attributes_at_initialization",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_extra_attributes_at_initialization():\n    # Ignore extra attributes during model initialization.\n    with pytest.raises(Exception):\n        Asset(symbol=\"ABC\", extra_attribute=1)\ndef test_instances_equal():\n    a = Asset(\n        symbol=\"ABC\",\n        asset_type=\"option\",\n        expiration=datetime.date(2020, 1, 1),\n        strike=150,",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_instances_equal",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_instances_equal():\n    a = Asset(\n        symbol=\"ABC\",\n        asset_type=\"option\",\n        expiration=datetime.date(2020, 1, 1),\n        strike=150,\n        right=\"CALL\",\n        multiplier=100,\n    )\n    b = Asset(",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_symbol2asset",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_symbol2asset():\n    asset = Asset.symbol2asset(\"ABC\")\n    assert asset.symbol == \"ABC\"\n    assert asset.asset_type == \"stock\"\n    asset = Asset.symbol2asset(\"ABC200101C00150000\")\n    assert asset.symbol == \"ABC\"\n    assert asset.asset_type == \"option\"\n    assert asset.expiration == datetime.date(2020, 1, 1)\n    assert asset.strike == 150\n    assert asset.right == \"CALL\"",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_right_validator",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_right_validator(param):\n    with pytest.raises(Exception):\n        Asset(symbol=\"ABC\", right=param)\n@pytest.mark.parametrize(\"param\", [\"bonds\", \"cash\", \"swaptions\"])\ndef test_asset_types_validator(param):\n    with pytest.raises(Exception):\n        Asset(symbol=\"ABC\", asset_type=param)",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "test_asset_types_validator",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_asset",
        "description": "docs.lumibot00.tests.test_asset",
        "peekOfCode": "def test_asset_types_validator(param):\n    with pytest.raises(Exception):\n        Asset(symbol=\"ABC\", asset_type=param)",
        "detail": "docs.lumibot00.tests.test_asset",
        "documentation": {}
    },
    {
        "label": "TestBacktestingBroker",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_backtesting_broker",
        "description": "docs.lumibot00.tests.test_backtesting_broker",
        "peekOfCode": "class TestBacktestingBroker:\n    def test_limit_fills(self):\n        start = datetime.datetime(2023, 8, 1)\n        end = datetime.datetime(2023, 8, 2)\n        data_source = PandasData(datetime_start=start, datetime_end=end, pandas_data={})\n        broker = BacktestingBroker(data_source=data_source)\n        # Limit triggered by candle body\n        limit_price = 105\n        assert broker.limit_order(limit_price, 'sell', open_=100, high=110, low=90) == limit_price\n        # Limit triggered by candle wick",
        "detail": "docs.lumibot00.tests.test_backtesting_broker",
        "documentation": {}
    },
    {
        "label": "TestDatasourceDailyBars",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_bars",
        "description": "docs.lumibot00.tests.test_bars",
        "peekOfCode": "class TestDatasourceDailyBars:\n    \"\"\"These tests check that the Bars returned from get_historical_prices.\n     They test:\n        - the index is a timestamp\n        - they contain returns for the different data sources.\n        - they return the right number of bars\n        - returns are calculated correctly\n        - certain data_sources contain dividends\n     \"\"\"\n    length = 30",
        "detail": "docs.lumibot00.tests.test_bars",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_bars",
        "description": "docs.lumibot00.tests.test_bars",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# print_full_pandas_dataframes()\n# set_pandas_float_precision(precision=15)\nclass TestDatasourceDailyBars:\n    \"\"\"These tests check that the Bars returned from get_historical_prices.\n     They test:\n        - the index is a timestamp\n        - they contain returns for the different data sources.\n        - they return the right number of bars\n        - returns are calculated correctly",
        "detail": "docs.lumibot00.tests.test_bars",
        "documentation": {}
    },
    {
        "label": "test_initialize_ccxt_broker_legacy",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_ccxt",
        "description": "docs.lumibot00.tests.test_ccxt",
        "peekOfCode": "def test_initialize_ccxt_broker_legacy(mocker):\n    \"\"\"\n    This test to make sure the legacy way of initializing the broker still works.\n    \"\"\"\n    broker = Ccxt(KRAKEN_CONFIG)\n    mocker.patch.object(broker, '_get_balances_at_broker', return_value=None)\n    mocker.patch.object(broker, '_set_initial_positions')\n    strategy = ImportantFunctions(\n        broker=broker,\n    )",
        "detail": "docs.lumibot00.tests.test_ccxt",
        "documentation": {}
    },
    {
        "label": "KUCOIN_LIVE",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_ccxt",
        "description": "docs.lumibot00.tests.test_ccxt",
        "peekOfCode": "KUCOIN_LIVE = {\n    \"exchange_id\": \"kucoin\",\n    \"password\": \"not_my_pass\",\n    \"apiKey\": \"a1b2c3d4\",\n    \"secret\": \"f6e5d4c3b2a1\",\n    \"sandbox\": True,\n}\n# KRAKEN_CONFIG = {\n#     \"exchange_id\": \"kraken\",\n#     \"apiKey\": \"a1b2c3d4\",",
        "detail": "docs.lumibot00.tests.test_ccxt",
        "documentation": {}
    },
    {
        "label": "KRAKEN_CONFIG",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_ccxt",
        "description": "docs.lumibot00.tests.test_ccxt",
        "peekOfCode": "KRAKEN_CONFIG = {\n    \"exchange_id\": \"kraken\",\n    \"apiKey\": \"K4VEtgr0dQ9E7UqkyS4/G60r+uH6fVj5mKmO3m1\",\n    \"secret\": \"KWFQzQjvnXEzecSIy0+OBFaYUIrggNUfqrfn6Ksi0UAA==\",\n    \"margin\": True,\n    \"sandbox\": False,\n}\ndef test_initialize_ccxt_broker_legacy(mocker):\n    \"\"\"\n    This test to make sure the legacy way of initializing the broker still works.",
        "detail": "docs.lumibot00.tests.test_ccxt",
        "documentation": {}
    },
    {
        "label": "test_cache_download_data",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_ccxt_store",
        "description": "docs.lumibot00.tests.test_ccxt_store",
        "peekOfCode": "def test_cache_download_data(exchange_id:str, symbol:str, timeframe:str, start:datetime, end:datetime)->None:\n    cache = CcxtCacheDB(exchange_id)\n    cache_file_path = cache.get_cache_file_name(symbol,timeframe)\n    # Remove cache file if exists.\n    if os.path.exists(cache_file_path):\n        os.remove(cache_file_path)\n    # Download data and store in cache.\n    df1 = cache.download_ohlcv(symbol,timeframe,start,end)\n    assert os.path.exists(cache_file_path)\n    # Counting data for the requested time period.",
        "detail": "docs.lumibot00.tests.test_ccxt_store",
        "documentation": {}
    },
    {
        "label": "test_cache_download_data_without_overap",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_ccxt_store",
        "description": "docs.lumibot00.tests.test_ccxt_store",
        "peekOfCode": "def test_cache_download_data_without_overap(exchange_id:str, symbol:str, timeframe:str, start:datetime, end:datetime)->None:\n    \"\"\"Test for cases where the requested time range is partially covered by cache, but not partially covered by cache, if cache already exists.\n    In this case, you need to combine the data in the cache with the newly downloaded data to create the data for the requested time range.\n    Therefore, the existing start range must be larger than the requested start range and the existing end range must be smaller than the requested end range.\n    The final range of updated data should be from the existing start range to the requested end range.\n    \"\"\"\n    cache = CcxtCacheDB(exchange_id)\n    cache_file_path = cache.get_cache_file_name(symbol,timeframe)\n    # Read the cache_dt_ranges table before caching new data to duckdb\n    with duckdb.connect(cache_file_path) as con:",
        "detail": "docs.lumibot00.tests.test_ccxt_store",
        "documentation": {}
    },
    {
        "label": "DataSourceTestable",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_data_source",
        "description": "docs.lumibot00.tests.test_data_source",
        "peekOfCode": "class DataSourceTestable(DataSource):\n    def __init__(self, api_key):\n        super().__init__(api_key=api_key)\n    def get_chains(self, asset: Asset, quote: Asset = None) -> dict:\n        return {}\n    def get_last_price(self, asset, quote=None, exchange=None):\n        return 0.0\n    def get_historical_prices(\n        self, asset, length, timestep=\"\", timeshift=None, quote=None, exchange=None, include_after_hours=True\n    ):",
        "detail": "docs.lumibot00.tests.test_data_source",
        "documentation": {}
    },
    {
        "label": "TestDataSource",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_data_source",
        "description": "docs.lumibot00.tests.test_data_source",
        "peekOfCode": "class TestDataSource:\n    def test_get_chain_full_info(self, mocker):\n        ds = DataSourceTestable(api_key='test')\n        chains = {'Chains': {\n            \"PUT\": {\n                \"2023-12-01\": [101, 102, 103],\n            },\n            \"CALL\": {\n                \"2023-12-01\": [101, 102, 103],\n            },",
        "detail": "docs.lumibot00.tests.test_data_source",
        "documentation": {}
    },
    {
        "label": "TestDriftCalculationLogic",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_drift_rebalancer",
        "description": "docs.lumibot00.tests.test_drift_rebalancer",
        "peekOfCode": "class TestDriftCalculationLogic:\n    def test_add_position(self):\n        target_weights = {\n            \"AAPL\": Decimal(\"0.5\"),\n            \"GOOGL\": Decimal(\"0.3\"),\n            \"MSFT\": Decimal(\"0.2\")\n        }\n        self.calculator = DriftCalculationLogic(target_weights=target_weights)\n        self.calculator.add_position(\n            symbol=\"AAPL\",",
        "detail": "docs.lumibot00.tests.test_drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "MockStrategy",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_drift_rebalancer",
        "description": "docs.lumibot00.tests.test_drift_rebalancer",
        "peekOfCode": "class MockStrategy(Strategy):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.orders = []\n    def get_last_price(\n            self,\n            asset: Any,\n            quote: Any = None,\n            exchange: str = None,\n            should_use_last_close: bool = True) -> float | None:",
        "detail": "docs.lumibot00.tests.test_drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "TestLimitOrderRebalance",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_drift_rebalancer",
        "description": "docs.lumibot00.tests.test_drift_rebalancer",
        "peekOfCode": "class TestLimitOrderRebalance:\n    def setup_method(self):\n        date_start = datetime.datetime(2021, 7, 10)\n        date_end = datetime.datetime(2021, 7, 13)\n        self.data_source = YahooDataBacktesting(date_start, date_end)\n        self.backtesting_broker = BacktestingBroker(self.data_source)\n    def test_selling_everything(self):\n        strategy = MockStrategy(broker=self.backtesting_broker)\n        df = pd.DataFrame({\n            \"symbol\": [\"AAPL\"],",
        "detail": "docs.lumibot00.tests.test_drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "TestDriftRebalancer",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_drift_rebalancer",
        "description": "docs.lumibot00.tests.test_drift_rebalancer",
        "peekOfCode": "class TestDriftRebalancer:\n    # Need to start two days after the first data point in pandas for backtesting\n    backtesting_start = datetime.datetime(2019, 1, 2)\n    backtesting_end = datetime.datetime(2019, 12, 31)\n    def test_classic_60_60(self, pandas_data_fixture):\n        parameters = {\n            \"market\": \"NYSE\",\n            \"sleeptime\": \"1D\",\n            \"drift_threshold\": \"0.03\",\n            \"acceptable_slippage\": \"0.005\",",
        "detail": "docs.lumibot00.tests.test_drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "test_initialize_interactive_broker_legacy",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_interactive_brokers",
        "description": "docs.lumibot00.tests.test_interactive_brokers",
        "peekOfCode": "def test_initialize_interactive_broker_legacy():\n    \"\"\"\n    This test to make sure the legacy way of initializing the broker still works.\n    \"\"\"\n    broker = InteractiveBrokers(IBKR_CONFIG)\n    strategy = BuyAndHold(\n        broker=broker,\n    )\n    # Assert that strategy.broker is the same as broker\n    assert strategy.broker == broker",
        "detail": "docs.lumibot00.tests.test_interactive_brokers",
        "documentation": {}
    },
    {
        "label": "IBKR_CONFIG",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_interactive_brokers",
        "description": "docs.lumibot00.tests.test_interactive_brokers",
        "peekOfCode": "IBKR_CONFIG = {  # Paper trading!\n    # Put your own IBKR TraderWorkstation IP here:\n    \"IP\": \"localhost:7497\",\n    # Put your own IBKR secret here:\n    \"CLIENT_ID\": \"a1b2c3d4\",\n    \"SOCKET_PORT\": 794,\n}\ndef test_initialize_interactive_broker_legacy():\n    \"\"\"\n    This test to make sure the legacy way of initializing the broker still works.",
        "detail": "docs.lumibot00.tests.test_interactive_brokers",
        "documentation": {}
    },
    {
        "label": "TestLogging",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_logging",
        "description": "docs.lumibot00.tests.test_logging",
        "peekOfCode": "class TestLogging:\n    def test_logging(self, caplog):\n        caplog.set_level(logging.INFO)\n        logger = logging.getLogger()\n        logger.info(\"This is an info message\")\n        assert \"This is an info message\" in caplog.text\n    def test_backtest_produces_no_logs_when_quiet_logs_is_true(self, caplog):\n        caplog.set_level(logging.INFO)\n        backtesting_start = datetime.datetime(2023, 1, 2)\n        backtesting_end = datetime.datetime(2023, 1, 4)",
        "detail": "docs.lumibot00.tests.test_logging",
        "documentation": {}
    },
    {
        "label": "MomoTester",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_momentum",
        "description": "docs.lumibot00.tests.test_momentum",
        "peekOfCode": "class MomoTester(Strategy):\n    \"\"\"This strategy saves the momentum values calculated each trading iteration, so we can compare them later.\"\"\"\n    symbol: str = \"\"\n    lookback_period: int = 0\n    actual_df: pd.DataFrame = None\n    parameters = {\n        \"lookback_period\": 2,\n    }\n    def initialize(self, parameters: Any = None) -> None:\n        self.set_market(\"NYSE\")",
        "detail": "docs.lumibot00.tests.test_momentum",
        "documentation": {}
    },
    {
        "label": "TestMomentum",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_momentum",
        "description": "docs.lumibot00.tests.test_momentum",
        "peekOfCode": "class TestMomentum:\n    df = None\n    backtesting_start = datetime.datetime(2019, 3, 1)\n    backtesting_end = datetime.datetime(2019, 3, 31)\n    @classmethod\n    def setup_class(cls):\n        # We load the SPY data directly and calculate the adjusted returns.\n        file_path = os.getcwd() + \"/data/SPY.csv\"\n        df = pd.read_csv(file_path)\n        df.rename(columns={\"Date\": \"date\"}, inplace=True)",
        "detail": "docs.lumibot00.tests.test_momentum",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_momentum",
        "description": "docs.lumibot00.tests.test_momentum",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# print_full_pandas_dataframes()\n# set_pandas_float_precision(precision=15)\nclass MomoTester(Strategy):\n    \"\"\"This strategy saves the momentum values calculated each trading iteration, so we can compare them later.\"\"\"\n    symbol: str = \"\"\n    lookback_period: int = 0\n    actual_df: pd.DataFrame = None\n    parameters = {\n        \"lookback_period\": 2,",
        "detail": "docs.lumibot00.tests.test_momentum",
        "documentation": {}
    },
    {
        "label": "TestOrderBasics",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_order",
        "description": "docs.lumibot00.tests.test_order",
        "peekOfCode": "class TestOrderBasics:\n    def test_side_must_be_one_of(self):\n        assert Order(asset=Asset(\"SPY\"), quantity=10, side=\"buy\", strategy='abc').side == 'buy'\n        assert Order(asset=Asset(\"SPY\"), quantity=10, side=\"sell\", strategy='abc').side == 'sell'\n    def test_blank_oco(self):\n        # Create an OCO order without any child \n        order = Order(\n            strategy=\"\",\n            type=Order.OrderType.OCO,\n        )",
        "detail": "docs.lumibot00.tests.test_order",
        "documentation": {}
    },
    {
        "label": "TestPandasData",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_pandas_data",
        "description": "docs.lumibot00.tests.test_pandas_data",
        "peekOfCode": "class TestPandasData:\n    def test_pandas_data_fixture(self, pandas_data_fixture):\n        assert pandas_data_fixture is not None\n    def test_spy_has_dividends(self, pandas_data_fixture):\n        spy = list(pandas_data_fixture.values())[0]\n        expected_columns = [\n            \"open\",\n            \"high\",\n            \"low\",\n            \"close\",",
        "detail": "docs.lumibot00.tests.test_pandas_data",
        "documentation": {}
    },
    {
        "label": "FakeContract",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_polygon_helper",
        "description": "docs.lumibot00.tests.test_polygon_helper",
        "peekOfCode": "class FakeContract:\n    def __init__(self, ticker):\n        self.ticker = ticker\nclass TestPolygonHelpers:\n    def test_build_cache_filename(self, mocker, tmpdir):\n        asset = Asset(\"SPY\")\n        timespan = \"1D\"\n        mocker.patch.object(ph, \"LUMIBOT_CACHE_FOLDER\", tmpdir)\n        expected = tmpdir / \"polygon\" / \"stock_SPY_1D.feather\"\n        assert ph.build_cache_filename(asset, timespan) == expected",
        "detail": "docs.lumibot00.tests.test_polygon_helper",
        "documentation": {}
    },
    {
        "label": "TestPolygonHelpers",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_polygon_helper",
        "description": "docs.lumibot00.tests.test_polygon_helper",
        "peekOfCode": "class TestPolygonHelpers:\n    def test_build_cache_filename(self, mocker, tmpdir):\n        asset = Asset(\"SPY\")\n        timespan = \"1D\"\n        mocker.patch.object(ph, \"LUMIBOT_CACHE_FOLDER\", tmpdir)\n        expected = tmpdir / \"polygon\" / \"stock_SPY_1D.feather\"\n        assert ph.build_cache_filename(asset, timespan) == expected\n        expire_date = datetime.date(2023, 8, 1)\n        option_asset = Asset(\"SPY\", asset_type=\"option\", expiration=expire_date, strike=100, right=\"CALL\")\n        expected = tmpdir / \"polygon\" / \"option_SPY_230801_100_CALL_1D.feather\"",
        "detail": "docs.lumibot00.tests.test_polygon_helper",
        "documentation": {}
    },
    {
        "label": "TestPolygonPriceData",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_polygon_helper",
        "description": "docs.lumibot00.tests.test_polygon_helper",
        "peekOfCode": "class TestPolygonPriceData:\n    def test_get_price_data_from_polygon(self, mocker, tmpdir):\n        # Ensure we don't accidentally call the real Polygon API\n        mock_polyclient = mocker.MagicMock()\n        mocker.patch.object(ph, \"PolygonClient\", mock_polyclient)\n        mocker.patch.object(ph, \"LUMIBOT_CACHE_FOLDER\", tmpdir)\n        # Options Contracts to return\n        option_ticker = \"O:SPY230801C00100000\"\n        mock_polyclient().list_options_contracts.return_value = [FakeContract(option_ticker)]\n        # Basic Setup",
        "detail": "docs.lumibot00.tests.test_polygon_helper",
        "documentation": {}
    },
    {
        "label": "TestStrategyMethods",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_strategy_methods",
        "description": "docs.lumibot00.tests.test_strategy_methods",
        "peekOfCode": "class TestStrategyMethods:\n    def test_get_option_expiration_after_date(self):\n        \"\"\"\n        Test the get_option_expiration_after_date method by checking that the correct expiration date is returned\n        \"\"\"\n        date_start = datetime(2021, 7, 10)\n        date_end = datetime(2021, 7, 13)\n        data_source = YahooDataBacktesting(date_start, date_end)\n        backtesting_broker = BacktestingBroker(data_source)\n        strategy = BuyAndHold(",
        "detail": "docs.lumibot00.tests.test_strategy_methods",
        "documentation": {}
    },
    {
        "label": "test_get_price_data_with_cached_data",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_price_data_with_cached_data(mock_tqdm, mock_build_cache_filename, mock_load_cache, mock_get_missing_dates, mock_get_historical_data, mock_update_df, mock_update_cache):\n    # Arrange\n    mock_build_cache_filename.return_value.exists.return_value = True\n    mock_load_cache.return_value = pd.DataFrame({\n        \"datetime\": [\n                    \"2023-07-01 09:30:00\",\n                    \"2023-07-01 09:31:00\",\n                    \"2023-07-01 09:32:00\",\n                    \"2023-07-01 09:33:00\",\n                    \"2023-07-01 09:34:00\",",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_price_data_without_cached_data",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_price_data_without_cached_data(mock_build_cache_filename, mock_get_missing_dates, \n                                            mock_get_historical_data, mock_update_df, mock_update_cache):\n    # Arrange\n    mock_build_cache_filename.return_value.exists.return_value = False\n    mock_get_missing_dates.return_value = [datetime.datetime(2023, 7, 1)]\n    mock_get_historical_data.return_value = pd.DataFrame({\n        \"datetime\": pd.date_range(\"2023-07-01\", periods=5, freq=\"min\"),\n        \"price\": [100, 101, 102, 103, 104]\n    })\n    mock_update_df.return_value = mock_get_historical_data.return_value",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_price_data_partial_cache_hit",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_price_data_partial_cache_hit(mock_build_cache_filename, mock_load_cache, mock_get_missing_dates, \n                                          mock_get_historical_data, mock_update_df, mock_update_cache):\n    # Arrange\n    cached_data = pd.DataFrame({\n        \"datetime\": pd.date_range(\"2023-07-01\", periods=5, freq='min'),\n        \"price\": [100, 101, 102, 103, 104]\n    })\n    mock_build_cache_filename.return_value.exists.return_value = True\n    mock_load_cache.return_value = cached_data\n    mock_get_missing_dates.return_value = [datetime.datetime(2023, 7, 2)]",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_price_data_empty_response",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_price_data_empty_response(mock_build_cache_filename, mock_get_missing_dates, \n                                       mock_get_historical_data, mock_update_df, mock_update_cache):\n    # Arrange\n    mock_build_cache_filename.return_value.exists.return_value = False\n    mock_get_historical_data.return_value = pd.DataFrame()\n    mock_get_missing_dates.return_value = [datetime.datetime(2023, 7, 1)]\n    asset = Asset(asset_type=\"stock\", symbol=\"AAPL\")\n    start = datetime.datetime(2023, 7, 1)\n    end = datetime.datetime(2023, 7, 2)\n    timespan = \"minute\"",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_trading_dates",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_trading_dates():\n    # Define test data\n    asset = Asset(\"AAPL\")\n    start = datetime.datetime(2024, 8, 5)\n    end = datetime.datetime(2024, 8, 11)\n    dt = datetime.datetime(2024, 8, 6, 13, 30)\n    #convert dt from tz-navie to tz-aware\n    timezone = pytz.timezone('America/New_York')\n    dt = timezone.localize(dt)\n    trading_dates = thetadata_helper.get_trading_dates(asset, start, end)",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_build_cache_filename",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_build_cache_filename(mocker, tmpdir, datastyle):\n    asset = Asset(\"SPY\")\n    timespan = \"1D\"\n    mocker.patch.object(thetadata_helper, \"LUMIBOT_CACHE_FOLDER\", tmpdir)\n    expected = tmpdir / \"thetadata\" / f\"stock_SPY_1D_{datastyle}.feather\"\n    assert thetadata_helper.build_cache_filename(asset, timespan, datastyle) == expected\n    expire_date = datetime.date(2023, 8, 1)\n    option_asset = Asset(\"SPY\", asset_type=\"option\", expiration=expire_date, strike=100, right=\"CALL\")\n    expected = tmpdir / \"thetadata\" / f\"option_SPY_230801_100_CALL_1D_{datastyle}.feather\"\n    assert thetadata_helper.build_cache_filename(option_asset, timespan, datastyle) == expected",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_missing_dates",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_missing_dates():\n        # Setup some basics\n        asset = Asset(\"SPY\")\n        start_date = datetime.datetime(2023, 8, 1, 9, 30)  # Tuesday\n        end_date = datetime.datetime(2023, 8, 1, 10, 0)\n        # Empty DataFrame\n        missing_dates = thetadata_helper.get_missing_dates(pd.DataFrame(), asset, start_date, end_date)\n        assert len(missing_dates) == 1\n        assert datetime.date(2023, 8, 1) in missing_dates\n        # Small dataframe that meets start/end criteria",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_cache",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_cache(mocker, tmpdir, df_all, df_feather, datastyle):\n    mocker.patch.object(thetadata_helper, \"LUMIBOT_CACHE_FOLDER\", tmpdir)\n    cache_file = Path(tmpdir / \"thetadata\" / f\"stock_SPY_1D_{datastyle}.feather\")\n    # Empty DataFrame of df_all, don't write cache file\n    thetadata_helper.update_cache(cache_file, df_all, df_feather)\n    assert not cache_file.exists()\n    # When df_all and df_feather are the same, don't write cache file\n    thetadata_helper.update_cache(cache_file, df_feather, df_feather)\n    assert not cache_file.exists()\n    # Changes in data, write cache file",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_load_data_from_cache",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_load_data_from_cache(mocker, tmpdir, df_feather, datastyle):\n    # Setup some basics\n    mocker.patch.object(thetadata_helper, \"LUMIBOT_CACHE_FOLDER\", tmpdir)\n    cache_file = Path(tmpdir / \"thetadata\" / f\"stock_SPY_1D_{datastyle}.feather\")\n    # No cache file\n    with pytest.raises(FileNotFoundError):\n        thetadata_helper.load_cache(cache_file)\n    # Cache file exists\n    cache_file.parent.mkdir(parents=True, exist_ok=True)\n    df_feather.to_feather(cache_file)",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_with_empty_result",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_with_empty_result():\n    df_all = pd.DataFrame(\n            {\n                \"close\": [2, 3, 4, 5, 6],\n                \"open\": [1, 2, 3, 4, 5],\n                \"datetime\": [\n                    \"2023-07-01 09:30:00-04:00\",\n                    \"2023-07-01 09:31:00-04:00\",\n                    \"2023-07-01 09:32:00-04:00\",\n                    \"2023-07-01 09:33:00-04:00\",",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_empty_df_all_and_empty_result",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_empty_df_all_and_empty_result():\n    # Test with empty dataframe and no new data\n    df_all = None\n    result = []\n    df_new = thetadata_helper.update_df(df_all, result)\n    assert df_new is None or df_new.empty\ndef test_update_df_empty_df_all_and_result_no_datetime():\n    # Test with empty dataframe and no new data\n    df_all = None\n    result = [",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_empty_df_all_and_result_no_datetime",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_empty_df_all_and_result_no_datetime():\n    # Test with empty dataframe and no new data\n    df_all = None\n    result = [\n        {\"o\": 1, \"h\": 4, \"l\": 1, \"c\": 2, \"v\": 100, \"t\": 1690896600000},\n        {\"o\": 5, \"h\": 8, \"l\": 3, \"c\": 7, \"v\": 100, \"t\": 1690896660000},\n    ]\n    with pytest.raises(KeyError):\n        thetadata_helper.update_df(df_all, result)\ndef test_update_df_empty_df_all_with_new_data():",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_empty_df_all_with_new_data",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_empty_df_all_with_new_data():\n    result = pd.DataFrame(\n            {\n                \"close\": [2, 3, 4, 5, 6],\n                \"open\": [1, 2, 3, 4, 5],\n                \"datetime\": [\n                    \"2023-07-01 09:30:00\",\n                    \"2023-07-01 09:31:00\",\n                    \"2023-07-01 09:32:00\",\n                    \"2023-07-01 09:33:00\",",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_existing_df_all_with_new_data",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_existing_df_all_with_new_data():\n    # Test with existing dataframe and new data\n    initial_data = [\n        {\"o\": 1, \"h\": 4, \"l\": 1, \"c\": 2, \"v\": 100, \"t\": 1690896600000},\n        {\"o\": 5, \"h\": 8, \"l\": 3, \"c\": 7, \"v\": 100, \"t\": 1690896660000},\n    ]\n    for r in initial_data:\n        r[\"datetime\"] = pd.to_datetime(r.pop(\"t\"), unit='ms', utc=True)\n    df_all = pd.DataFrame(initial_data).set_index(\"datetime\")\n    new_data = [",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_with_overlapping_data",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_with_overlapping_data():\n    # Test with some overlapping rows\n    initial_data = [\n        {\"o\": 1, \"h\": 4, \"l\": 1, \"c\": 2, \"v\": 100, \"t\": 1690896600000},\n        {\"o\": 5, \"h\": 8, \"l\": 3, \"c\": 7, \"v\": 100, \"t\": 1690896660000},\n        {\"o\": 9, \"h\": 12, \"l\": 7, \"c\": 10, \"v\": 100, \"t\": 1690896720000},\n        {\"o\": 13, \"h\": 16, \"l\": 11, \"c\": 14, \"v\": 100, \"t\": 1690896780000},\n    ]\n    for r in initial_data:\n        r[\"datetime\"] = pd.to_datetime(r.pop(\"t\"), unit='ms', utc=True)",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_update_df_with_timezone_awareness",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_update_df_with_timezone_awareness():\n    # Test that timezone awareness is properly handled\n    result = [\n        {\"o\": 1, \"h\": 4, \"l\": 1, \"c\": 2, \"v\": 100, \"t\": 1690896600000},\n    ]\n    for r in result:\n        r[\"datetime\"] = pd.to_datetime(r.pop(\"t\"), unit='ms', utc=True)\n    df_all = None\n    df_new = thetadata_helper.update_df(df_all, result)\n    assert df_new.index.tzinfo is not None",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_start_theta_data_client",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_start_theta_data_client(mock_ThetaClient,mock_get):\n    # Arrange\n    mock_get.return_value = MagicMock(status_code=200)\n    mock_client_instance = MagicMock()\n    mock_ThetaClient.return_value = mock_client_instance\n    BASE_URL = \"http://127.0.0.1:25510\"\n    # Act\n    client = thetadata_helper.start_theta_data_client(\"test_user\", \"test_password\")\n    # Assert\n    mock_get.assert_called_once_with(f\"{BASE_URL}/v2/system/terminal/shutdown\")",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_check_connection",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_check_connection(mock_sleep, mock_get, mock_start_client):\n    # Arrange\n    mock_start_client.return_value = MagicMock()  # Mock the client that would be returned\n    mock_get.side_effect = [\n        MagicMock(text=\"DISCONNECTED\"),  # First call returns DISCONNECTED\n        MagicMock(text=\"RandomWords\"),  # Second call force into else condition\n        MagicMock(text=\"CONNECTED\"),  # third call returns CONNECTED\n    ]\n    # Act\n    client, connected = thetadata_helper.check_connection(\"test_user\", \"test_password\")",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_check_connection_with_exception",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_check_connection_with_exception(mock_sleep, mock_get, mock_start_client):\n    # Arrange\n    mock_start_client.return_value = MagicMock()\n    mock_get.side_effect = [requests.exceptions.RequestException]  # Simulate a request exception\n    # Act\n    client, connected = thetadata_helper.check_connection(\"test_user\", \"test_password\")\n    # Assert\n    assert connected is False  # Should not be connected due to the exception\n    assert mock_start_client.call_count == 16\n    assert mock_get.call_count == 16",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_request_successful",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_request_successful(mock_get, mock_check_connection):\n    # Arrange\n    mock_response = MagicMock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\n        \"header\": {\n            \"error_type\": \"null\"\n        },\n        \"data\": \"some_data\"\n    }",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_request_non_200_status_code",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_request_non_200_status_code(mock_get, mock_check_connection):\n    # Arrange\n    mock_response = MagicMock()\n    mock_response.status_code = 500\n    mock_response.json.return_value = None\n    mock_get.return_value = mock_response\n    url = \"http://test.com\"\n    headers = {\"Authorization\": \"Bearer test_token\"}\n    querystring = {\"param1\": \"value1\"}\n    # Act",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_request_error_in_json",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_request_error_in_json(mock_get, mock_check_connection):\n    # Arrange\n    mock_response = MagicMock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\n        \"header\": {\n            \"error_type\": \"SomeError\"\n        }\n    }\n    mock_get.return_value = mock_response",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_request_exception_handling",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_request_exception_handling(mock_get, mock_check_connection):\n    # Arrange\n    mock_get.side_effect = requests.exceptions.RequestException\n    url = \"http://test.com\"\n    headers = {\"Authorization\": \"Bearer test_token\"}\n    querystring = {\"param1\": \"value1\"}\n    # Act\n    with pytest.raises(ValueError):\n        thetadata_helper.get_request(url, headers, querystring, \"test_user\", \"test_password\")\n    # Assert",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_historical_data_stock",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_historical_data_stock(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"date\", \"ms_of_day\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"count\"]},\n        \"response\": [\n            {\"date\": 20230701, \"ms_of_day\": 3600000, \"open\": 100, \"high\": 110, \"low\": 95, \"close\": 105, \"volume\": 1000, \"count\": 10},\n            {\"date\": 20230702, \"ms_of_day\": 7200000, \"open\": 110, \"high\": 120, \"low\": 105, \"close\": 115, \"volume\": 2000, \"count\": 20}\n        ]\n    }\n    mock_get_request.return_value = mock_json_response",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_historical_data_option",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_historical_data_option(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"date\", \"ms_of_day\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"count\"]},\n        \"response\": [\n            {\"date\": 20230701, \"ms_of_day\": 3600000, \"open\": 1, \"high\": 1.1, \"low\": 0.95, \"close\": 1.05, \"volume\": 100, \"count\": 10},\n            {\"date\": 20230702, \"ms_of_day\": 7200000, \"open\": 1.1, \"high\": 1.2, \"low\": 1.05, \"close\": 1.15, \"volume\": 200, \"count\": 20}\n        ]\n    }\n    mock_get_request.return_value = mock_json_response",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_historical_data_empty_response",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_historical_data_empty_response(mock_get_request):\n    # Arrange\n    mock_get_request.return_value = None\n    asset = Asset(asset_type=\"stock\", symbol=\"AAPL\")\n    start_dt = datetime.datetime(2023, 7, 1)\n    end_dt = datetime.datetime(2023, 7, 2)\n    ivl = 60000\n    # Act\n    df = thetadata_helper.get_historical_data(asset, start_dt, end_dt, ivl, \"test_user\", \"test_password\")\n    # Assert",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_historical_data_quote_style",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_historical_data_quote_style(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"date\", \"ms_of_day\", \"bid_size\",\"bid_condition\",\"bid\",\"bid_exchange\",\"ask_size\",\"ask_condition\",\"ask\",\"ask_exchange\"]},\n        \"response\": [\n            {\"date\": 20230701, \"ms_of_day\": 3600000, \"bid_size\": 0, \"bid_condition\": 0, \"bid\": 100, \"bid_exchange\": 110, \"ask_size\": 0, \"ask_condition\": 105, \"ask\": 1000, \"ask_exchange\": 10}\n        ]\n    }\n    mock_get_request.return_value = mock_json_response\n    asset = Asset(asset_type=\"stock\", symbol=\"AAPL\")",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_historical_data_ohlc_style_with_zero_in_response",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_historical_data_ohlc_style_with_zero_in_response(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"date\", \"ms_of_day\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"count\"]},\n        \"response\": [\n            {\"date\": 20230701, \"ms_of_day\": 3600000, \"open\": 0, \"high\": 0, \"low\": 0, \"close\": 0, \"volume\": 0, \"count\": 0}\n        ]\n    }\n    mock_get_request.return_value = mock_json_response\n    asset = Asset(asset_type=\"stock\", symbol=\"AAPL\")",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_expirations_normal_operation",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_expirations_normal_operation(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"expiration_date\"]},\n        \"response\": [\n            {\"expiration_date\": 20230721},\n            {\"expiration_date\": 20230728},\n            {\"expiration_date\": 20230804}\n        ]\n    }",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_expirations_empty_response",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_expirations_empty_response(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"expiration_date\"]},\n        \"response\": []\n    }\n    mock_get_request.return_value = mock_json_response\n    username = \"test_user\"\n    password = \"test_password\"\n    ticker = \"AAPL\"",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_expirations_dates_before_after_date",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_expirations_dates_before_after_date(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"expiration_date\"]},\n        \"response\": [\n            {\"expiration_date\": 20230714},\n            {\"expiration_date\": 20230721}\n        ]\n    }\n    mock_get_request.return_value = mock_json_response",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_strikes_normal_operation",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_strikes_normal_operation(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"strike_price\"]},\n        \"response\": [\n            {\"strike_price\": 1400},\n            {\"strike_price\": 1450},\n            {\"strike_price\": 1500}\n        ]\n    }",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "test_get_strikes_empty_response",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_thetadata_helper",
        "description": "docs.lumibot00.tests.test_thetadata_helper",
        "peekOfCode": "def test_get_strikes_empty_response(mock_get_request):\n    # Arrange\n    mock_json_response = {\n        \"header\": {\"format\": [\"strike_price\"]},\n        \"response\": []\n    }\n    mock_get_request.return_value = mock_json_response\n    username = \"test_user\"\n    password = \"test_password\"\n    ticker = \"AAPL\"",
        "detail": "docs.lumibot00.tests.test_thetadata_helper",
        "documentation": {}
    },
    {
        "label": "TestTradierDataAPI",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "class TestTradierDataAPI:\n    \"\"\"\n    API Tests skipped by default. To run all API tests, use the following command:\n    python -m pytest -m apitest\n    \"\"\"\n    def test_basics(self):\n        tdata = TradierData(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n        assert tdata._account_number == TRADIER_ACCOUNT_ID_PAPER\n    def test_get_last_price(self, tradier_ds):\n        asset = Asset(\"AAPL\")",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "TestTradierBrokerAPI",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "class TestTradierBrokerAPI:\n    \"\"\"\n    API Tests skipped by default. To run all API tests, use the following command:\n    python -m pytest -m apitest\n    \"\"\"\n    def test_get_last_price(self, tradier):\n        asset = Asset(\"AAPL\")\n        price = tradier.get_last_price(asset)\n        assert isinstance(price, float)\n        assert price > 0.0",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "TestTradierBroker",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "class TestTradierBroker:\n    \"\"\"\n    Unit tests for the Tradier broker. These tests do not require any API calls.\n    \"\"\"\n    def test_basics(self):\n        broker = Tradier(account_number=\"1234\", access_token=\"a1b2c3\", paper=True)\n        assert broker.name == \"Tradier\"\n        assert broker._tradier_account_number == \"1234\"\n    def test_tradier_side2lumi(self):\n        broker = Tradier(account_number=\"1234\", access_token=\"a1b2c3\", paper=True)",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "tradier_ds",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "def tradier_ds():\n    return TradierData(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.fixture\ndef tradier():\n    return Tradier(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.mark.apitest\n@pytest.mark.skipif(not TRADIER_ACCOUNT_ID_PAPER or not TRADIER_TOKEN_PAPER, reason=\"No Tradier credentials provided.\")\nclass TestTradierDataAPI:\n    \"\"\"\n    API Tests skipped by default. To run all API tests, use the following command:",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "tradier",
        "kind": 2,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "def tradier():\n    return Tradier(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.mark.apitest\n@pytest.mark.skipif(not TRADIER_ACCOUNT_ID_PAPER or not TRADIER_TOKEN_PAPER, reason=\"No Tradier credentials provided.\")\nclass TestTradierDataAPI:\n    \"\"\"\n    API Tests skipped by default. To run all API tests, use the following command:\n    python -m pytest -m apitest\n    \"\"\"\n    def test_basics(self):",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "TRADIER_ACCOUNT_ID_PAPER",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "TRADIER_ACCOUNT_ID_PAPER = os.getenv(\"TRADIER_ACCOUNT_ID_PAPER\")\nTRADIER_TOKEN_PAPER = os.getenv(\"TRADIER_TOKEN_PAPER\")\n@pytest.fixture\ndef tradier_ds():\n    return TradierData(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.fixture\ndef tradier():\n    return Tradier(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.mark.apitest\n@pytest.mark.skipif(not TRADIER_ACCOUNT_ID_PAPER or not TRADIER_TOKEN_PAPER, reason=\"No Tradier credentials provided.\")",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "TRADIER_TOKEN_PAPER",
        "kind": 5,
        "importPath": "docs.lumibot00.tests.test_tradier",
        "description": "docs.lumibot00.tests.test_tradier",
        "peekOfCode": "TRADIER_TOKEN_PAPER = os.getenv(\"TRADIER_TOKEN_PAPER\")\n@pytest.fixture\ndef tradier_ds():\n    return TradierData(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.fixture\ndef tradier():\n    return Tradier(account_number=TRADIER_ACCOUNT_ID_PAPER, access_token=TRADIER_TOKEN_PAPER, paper=True)\n@pytest.mark.apitest\n@pytest.mark.skipif(not TRADIER_ACCOUNT_ID_PAPER or not TRADIER_TOKEN_PAPER, reason=\"No Tradier credentials provided.\")\nclass TestTradierDataAPI:",
        "detail": "docs.lumibot00.tests.test_tradier",
        "documentation": {}
    },
    {
        "label": "TestTradingFee",
        "kind": 6,
        "importPath": "docs.lumibot00.tests.test_tradingfee",
        "description": "docs.lumibot00.tests.test_tradingfee",
        "peekOfCode": "class TestTradingFee:\n    def test_init(self):\n        fee = TradingFee(flat_fee=5.2)\n        assert fee.flat_fee == 5.2",
        "detail": "docs.lumibot00.tests.test_tradingfee",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "project = \"FinRL\"\ncopyright = \"2021, FinRL\"\nauthor = \"FinRL\"\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "copyright = \"2021, FinRL\"\nauthor = \"FinRL\"\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "author = \"FinRL\"\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "version = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "release = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "extensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.doctest\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.githubpages\",\n    \"sphinx.ext.autosectionlabel\",\n    \"recommonmark\",  # for including markdown\n    #     'sphinx_markdown_tables'  # Support rendering tables in markdown\n]\nautodoc_mock_imports = [",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_mock_imports",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_mock_imports = [\n    \"gym\",\n    \"matplotlib\",\n    \"numpy\",\n    \"pybullet\",\n    \"torch\",\n    \"opencv-python\",\n]\npygments_style = \"sphinx\"\n# Add any paths that contain templates here, relative to this directory.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "pygments_style = \"sphinx\"\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = \".rst\"\n# The master toctree document.\nmaster_doc = \"index\"",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "templates_path = [\"_templates\"]\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = \".rst\"\n# The master toctree document.\nmaster_doc = \"index\"\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "source_suffix = \".rst\"\n# The master toctree document.\nmaster_doc = \"index\"\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "master_doc = \"index\"\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "language = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "exclude_patterns = []\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "pygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme = \"sphinx_rtd_theme\"\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_logo",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n# Add any paths that contain custom static files (such as style sheets) here,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_static_path = [\"_static\"]\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don't match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',\n# 'searchbox.html']``.\n#\n# html_sidebars = {}",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "htmlhelp_basename = \"FinRLdoc\"\n# -- Options for LaTeX output ------------------------------------------------\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "latex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "latex_documents = [\n    (master_doc, \"FinRL.tex\", \"FinRL Documentation\", \"FinRL\", \"manual\"),\n]\n# -- Options for manual page output ------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [(master_doc, \"finrl\", \"FinRL Documentation\", [author], 1)]\n# -- Options for Texinfo output ----------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "man_pages = [(master_doc, \"finrl\", \"FinRL Documentation\", [author], 1)]\n# -- Options for Texinfo output ----------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (\n        master_doc,\n        \"FinRL\",\n        \"FinRL Documentation\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "texinfo_documents = [\n    (\n        master_doc,\n        \"FinRL\",\n        \"FinRL Documentation\",\n        author,\n        \"FinRL\",\n        \"One line description of project.\",\n        \"Miscellaneous\",\n    ),",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_title",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "epub_title = project\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = ''\n# A unique identification for the text.\n#\n# epub_uid = ''\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = [\"search.html\"]",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_exclude_files",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "epub_exclude_files = [\"search.html\"]\n# -- Extension configuration -------------------------------------------------",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "docs.utils",
        "description": "docs.utils",
        "peekOfCode": "ALPACA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\nALPACA_API_SECRET  = \"BxT64PIQtDBb*tnW\"\nALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.utils",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.utils",
        "description": "docs.utils",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.utils",
        "documentation": {}
    },
    {
        "label": "AlpacaConfig",
        "kind": 6,
        "importPath": "lib.LumibotML.credentials",
        "description": "lib.LumibotML.credentials",
        "peekOfCode": "class AlpacaConfig:\n    # Put your own Alpaca api key here:\n    # API_KEY = \"PK674RO5M858JZ217SPM\"\n    API_KEY = \"PKEJH4W0URAU56SHKQW3\"\n    # Put your own Alpaca secret here:\n    API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\n    # API_SECRET = \"uWm6opmroTTWuZ9Yr81XRTMsOMLNv8nvBmmLO4Dt\"\n    # If you want to go live, you must change this\n    ENDPOINT = \"https://paper-api.alpaca.markets\"\n    def __init__(self, load_from_secret_manager=True):",
        "detail": "lib.LumibotML.credentials",
        "documentation": {}
    },
    {
        "label": "symbols",
        "kind": 5,
        "importPath": "lib.LumibotML.download_price_data_alpha_vantage",
        "description": "lib.LumibotML.download_price_data_alpha_vantage",
        "peekOfCode": "symbols = [\"VIX\", \"VXX\", \"XIV\", \"PBP\", \"SPXL\"]\ninterval = \"1min\"\napi_key = \"30WM6G3P2TVGCIWL\"\n################################################################################\nyears = 2\nmonths = 12\nwith tqdm(total=months * years * len(symbols)) as pbar:\n    for symbol in symbols:\n        dfs = []\n        for y in range(years):",
        "detail": "lib.LumibotML.download_price_data_alpha_vantage",
        "documentation": {}
    },
    {
        "label": "interval",
        "kind": 5,
        "importPath": "lib.LumibotML.download_price_data_alpha_vantage",
        "description": "lib.LumibotML.download_price_data_alpha_vantage",
        "peekOfCode": "interval = \"1min\"\napi_key = \"30WM6G3P2TVGCIWL\"\n################################################################################\nyears = 2\nmonths = 12\nwith tqdm(total=months * years * len(symbols)) as pbar:\n    for symbol in symbols:\n        dfs = []\n        for y in range(years):\n            for m in range(months):",
        "detail": "lib.LumibotML.download_price_data_alpha_vantage",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "lib.LumibotML.download_price_data_alpha_vantage",
        "description": "lib.LumibotML.download_price_data_alpha_vantage",
        "peekOfCode": "api_key = \"30WM6G3P2TVGCIWL\"\n################################################################################\nyears = 2\nmonths = 12\nwith tqdm(total=months * years * len(symbols)) as pbar:\n    for symbol in symbols:\n        dfs = []\n        for y in range(years):\n            for m in range(months):\n                slice = f\"year{y+1}month{m+1}\"",
        "detail": "lib.LumibotML.download_price_data_alpha_vantage",
        "documentation": {}
    },
    {
        "label": "years",
        "kind": 5,
        "importPath": "lib.LumibotML.download_price_data_alpha_vantage",
        "description": "lib.LumibotML.download_price_data_alpha_vantage",
        "peekOfCode": "years = 2\nmonths = 12\nwith tqdm(total=months * years * len(symbols)) as pbar:\n    for symbol in symbols:\n        dfs = []\n        for y in range(years):\n            for m in range(months):\n                slice = f\"year{y+1}month{m+1}\"\n                url = f\"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY_EXTENDED&symbol={symbol}&interval={interval}&slice={slice}&apikey={api_key}\"\n                df = pd.read_csv(url)",
        "detail": "lib.LumibotML.download_price_data_alpha_vantage",
        "documentation": {}
    },
    {
        "label": "months",
        "kind": 5,
        "importPath": "lib.LumibotML.download_price_data_alpha_vantage",
        "description": "lib.LumibotML.download_price_data_alpha_vantage",
        "peekOfCode": "months = 12\nwith tqdm(total=months * years * len(symbols)) as pbar:\n    for symbol in symbols:\n        dfs = []\n        for y in range(years):\n            for m in range(months):\n                slice = f\"year{y+1}month{m+1}\"\n                url = f\"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY_EXTENDED&symbol={symbol}&interval={interval}&slice={slice}&apikey={api_key}\"\n                df = pd.read_csv(url)\n                dfs.append(df)",
        "detail": "lib.LumibotML.download_price_data_alpha_vantage",
        "documentation": {}
    },
    {
        "label": "MachineLearningCrypto",
        "kind": 6,
        "importPath": "lib.LumibotML.ml_strategy_crypto",
        "description": "lib.LumibotML.ml_strategy_crypto",
        "peekOfCode": "class MachineLearningCrypto(Strategy):\n    \"\"\"Parameters:\n    symbol (str, optional): The symbol that we want to trade. Defaults to \"SRNE\".\n    compute_frequency (int, optional): The time (in minutes) that we should retrain our model.\n    lookback_period (int, optional): The amount of data (in minutes) that we get from our data source to use in the model.\n    pct_portfolio_per_trade (float, optional): The size that each trade will be (in percent of the total portfolio).\n    price_change_threshold_up (float, optional): The difference between predicted price and the current price that will trigger a buy order (in percentage change).\n    price_change_threshold_down (float, optional): The difference between predicted price and the current price that will trigger a sell order (in percentage change).\n    max_pct_portfolio (float, optional): The maximum that the strategy will buy or sell as a percentage of the portfolio (eg. if this is 0.8 - or 80% - and our portfolio is worth $100k, then we will stop buying when we own $80k worth of the symbol)\n    take_profit_factor: Where you place your limit order based on the prediction",
        "detail": "lib.LumibotML.ml_strategy_crypto",
        "documentation": {}
    },
    {
        "label": "MachineLearningStocks",
        "kind": 6,
        "importPath": "lib.LumibotML.ml_strategy_stocks",
        "description": "lib.LumibotML.ml_strategy_stocks",
        "peekOfCode": "class MachineLearningStocks(Strategy):\n    \"\"\"Parameters:\n    symbol (str, optional): The symbol that we want to trade. Defaults to \"SRNE\".\n    compute_frequency (int, optional): The time (in minutes) that we should retrain our model.\n    lookback_period (int, optional): The amount of data (in minutes) that we get from our data source to use in the model.\n    pct_portfolio_per_trade (float, optional): The size that each trade will be (in percent of the total portfolio).\n    price_change_threshold_up (float, optional): The difference between predicted price and the current price that will trigger a buy order (in percentage change).\n    price_change_threshold_down (float, optional): The difference between predicted price and the current price that will trigger a sell order (in percentage change).\n    max_pct_portfolio (float, optional): The maximum that the strategy will buy or sell as a percentage of the portfolio (eg. if this is 0.8 - or 80% - and our portfolio is worth $100k, then we will stop buying when we own $80k worth of the symbol)\n    take_profit_factor: Where you place your limit order based on the prediction",
        "detail": "lib.LumibotML.ml_strategy_stocks",
        "documentation": {}
    },
    {
        "label": "AlpacaBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.alpaca_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.alpaca_backtesting",
        "peekOfCode": "class AlpacaBacktesting(DataSourceBacktesting, AlpacaData):\n    def __init__(self, datetime_start, datetime_end, **kwargs):\n        raise Exception(\"AlpacaBacktesting is not currently operational\")\n        AlpacaData.__init__(self, **kwargs)\n        DataSourceBacktesting.__init__(self, datetime_start, datetime_end)",
        "detail": "lib.MLTradingBot.lumibot.backtesting.alpaca_backtesting",
        "documentation": {}
    },
    {
        "label": "AlphaVantageBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.alpha_vantage_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.alpha_vantage_backtesting",
        "peekOfCode": "class AlphaVantageBacktesting(DataSourceBacktesting, AlphaVantageData):\n    def __init__(self, datetime_start, datetime_end, **kwargs):\n        raise Exception(\"AlphaVantageBacktesting is not currently operational\")\n        AlphaVantageData.__init__(self, **kwargs)\n        DataSourceBacktesting.__init__(self, datetime_start, datetime_end)",
        "detail": "lib.MLTradingBot.lumibot.backtesting.alpha_vantage_backtesting",
        "documentation": {}
    },
    {
        "label": "BacktestingBroker",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.backtesting_broker",
        "description": "lib.MLTradingBot.lumibot.backtesting.backtesting_broker",
        "peekOfCode": "class BacktestingBroker(Broker):\n    # Metainfo\n    IS_BACKTESTING_BROKER = True\n    def __init__(self, data_source, option_source=None, connect_stream=True, max_workers=20, config=None, **kwargs):\n        super().__init__(name=\"backtesting\", data_source=data_source,\n                         option_source=option_source, connect_stream=connect_stream, **kwargs)\n        # Calling init methods\n        self.max_workers = max_workers\n        self.market = \"NASDAQ\"\n        self.option_source = option_source",
        "detail": "lib.MLTradingBot.lumibot.backtesting.backtesting_broker",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.backtesting_broker",
        "description": "lib.MLTradingBot.lumibot.backtesting.backtesting_broker",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BacktestingBroker(Broker):\n    # Metainfo\n    IS_BACKTESTING_BROKER = True\n    def __init__(self, data_source, option_source=None, connect_stream=True, max_workers=20, config=None, **kwargs):\n        super().__init__(name=\"backtesting\", data_source=data_source,\n                         option_source=option_source, connect_stream=connect_stream, **kwargs)\n        # Calling init methods\n        self.max_workers = max_workers\n        self.market = \"NASDAQ\"",
        "detail": "lib.MLTradingBot.lumibot.backtesting.backtesting_broker",
        "documentation": {}
    },
    {
        "label": "CcxtBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.ccxt_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.ccxt_backtesting",
        "peekOfCode": "class CcxtBacktesting(CcxtBacktestingData):\n    def __init__(self, datetime_start, datetime_end, **kwargs):\n        CcxtBacktestingData.__init__(self, datetime_start, datetime_end, **kwargs)",
        "detail": "lib.MLTradingBot.lumibot.backtesting.ccxt_backtesting",
        "documentation": {}
    },
    {
        "label": "PandasDataBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.pandas_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.pandas_backtesting",
        "peekOfCode": "class PandasDataBacktesting(PandasData):\n    \"\"\"\n    Backtesting implementation of the PandasData class.  This class is just kept around for legacy purposes.\n    Please just use PandasData directly instead.\n    \"\"\"\n    def __init__(self, *args, pandas_data=None, **kwargs):\n        super().__init__(*args, pandas_data=pandas_data, **kwargs)",
        "detail": "lib.MLTradingBot.lumibot.backtesting.pandas_backtesting",
        "documentation": {}
    },
    {
        "label": "PolygonDataBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.polygon_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.polygon_backtesting",
        "peekOfCode": "class PolygonDataBacktesting(PandasData):\n    \"\"\"\n    Backtesting implementation of Polygon\n    \"\"\"\n    def __init__(\n        self,\n        datetime_start,\n        datetime_end,\n        pandas_data=None,\n        api_key=None,",
        "detail": "lib.MLTradingBot.lumibot.backtesting.polygon_backtesting",
        "documentation": {}
    },
    {
        "label": "START_BUFFER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.polygon_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.polygon_backtesting",
        "peekOfCode": "START_BUFFER = timedelta(days=5)\nclass PolygonDataBacktesting(PandasData):\n    \"\"\"\n    Backtesting implementation of Polygon\n    \"\"\"\n    def __init__(\n        self,\n        datetime_start,\n        datetime_end,\n        pandas_data=None,",
        "detail": "lib.MLTradingBot.lumibot.backtesting.polygon_backtesting",
        "documentation": {}
    },
    {
        "label": "ThetaDataBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.thetadata_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.thetadata_backtesting",
        "peekOfCode": "class ThetaDataBacktesting(PandasData):\n    \"\"\"\n    Backtesting implementation of ThetaData\n    \"\"\"\n    def __init__(\n        self,\n        datetime_start,\n        datetime_end,\n        pandas_data=None,\n        username=None,",
        "detail": "lib.MLTradingBot.lumibot.backtesting.thetadata_backtesting",
        "documentation": {}
    },
    {
        "label": "START_BUFFER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.thetadata_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.thetadata_backtesting",
        "peekOfCode": "START_BUFFER = timedelta(days=5)\nclass ThetaDataBacktesting(PandasData):\n    \"\"\"\n    Backtesting implementation of ThetaData\n    \"\"\"\n    def __init__(\n        self,\n        datetime_start,\n        datetime_end,\n        pandas_data=None,",
        "detail": "lib.MLTradingBot.lumibot.backtesting.thetadata_backtesting",
        "documentation": {}
    },
    {
        "label": "YahooDataBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.backtesting.yahoo_backtesting",
        "description": "lib.MLTradingBot.lumibot.backtesting.yahoo_backtesting",
        "peekOfCode": "class YahooDataBacktesting(YahooData):\n    \"\"\"\n    YahooDataBacktesting is a DataSourceBacktesting that uses YahooData as a\n    backtesting data source.\n    \"\"\"\n    def __init__(self, datetime_start, datetime_end, **kwargs):\n        YahooData.__init__(self, datetime_start, datetime_end, **kwargs)",
        "detail": "lib.MLTradingBot.lumibot.backtesting.yahoo_backtesting",
        "documentation": {}
    },
    {
        "label": "OrderData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.alpaca",
        "description": "lib.MLTradingBot.lumibot.brokers.alpaca",
        "peekOfCode": "class OrderData:\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n    def to_request_fields(self):\n        return self.__dict__\nclass Alpaca(Broker):\n    \"\"\"A broker class that connects to Alpaca\n    Attributes\n    ----------\n    api : tradeapi.REST",
        "detail": "lib.MLTradingBot.lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.alpaca",
        "description": "lib.MLTradingBot.lumibot.brokers.alpaca",
        "peekOfCode": "class Alpaca(Broker):\n    \"\"\"A broker class that connects to Alpaca\n    Attributes\n    ----------\n    api : tradeapi.REST\n        Alpaca API object\n    Methods\n    -------\n    get_timestamp()\n        Returns the current UNIX timestamp representation from Alpaca",
        "detail": "lib.MLTradingBot.lumibot.brokers.alpaca",
        "documentation": {}
    },
    {
        "label": "CustomLoggerAdapter",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.broker",
        "description": "lib.MLTradingBot.lumibot.brokers.broker",
        "peekOfCode": "class CustomLoggerAdapter(logging.LoggerAdapter):\n    def process(self, msg, kwargs):\n        # Check if the level is enabled to avoid formatting costs if not necessary\n        if self.logger.isEnabledFor(kwargs.get('level', logging.INFO)):\n            # Lazy formatting of the message\n            return f'[{self.extra[\"strategy_name\"]}] {msg}', kwargs\n        else:\n            return msg, kwargs\n    def update_strategy_name(self, new_strategy_name):\n        self.extra['strategy_name'] = new_strategy_name",
        "detail": "lib.MLTradingBot.lumibot.brokers.broker",
        "documentation": {}
    },
    {
        "label": "Broker",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.broker",
        "description": "lib.MLTradingBot.lumibot.brokers.broker",
        "peekOfCode": "class Broker(ABC):\n    # Metainfo\n    IS_BACKTESTING_BROKER = False\n    # Trading events flags\n    NEW_ORDER = \"new\"\n    CANCELED_ORDER = \"canceled\"\n    FILLED_ORDER = \"fill\"\n    PARTIALLY_FILLED_ORDER = \"partial_fill\"\n    CASH_SETTLED = \"cash_settled\"\n    ERROR_ORDER = \"error\"",
        "detail": "lib.MLTradingBot.lumibot.brokers.broker",
        "documentation": {}
    },
    {
        "label": "Ccxt",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.ccxt",
        "description": "lib.MLTradingBot.lumibot.brokers.ccxt",
        "peekOfCode": "class Ccxt(Broker):\n    \"\"\"\n    Crypto broker using CCXT.\n    \"\"\"\n    def __init__(self, config, data_source: CcxtData = None, max_workers=20, chunk_size=100, **kwargs):\n        if data_source is None:\n            data_source = CcxtData(config, max_workers=max_workers, chunk_size=chunk_size)\n        super().__init__(name=\"ccxt\", config=config, data_source=data_source, max_workers=max_workers, **kwargs)\n        self.market = \"24/7\"\n        self.fetch_open_orders_last_request_time = None",
        "detail": "lib.MLTradingBot.lumibot.brokers.ccxt",
        "documentation": {}
    },
    {
        "label": "ExampleBroker",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.example_broker",
        "description": "lib.MLTradingBot.lumibot.brokers.example_broker",
        "peekOfCode": "class ExampleBroker(Broker):\n    \"\"\"\n    Example broker that demonstrates how to connect to an API.\n    \"\"\"\n    NAME = \"ExampleBroker\"\n    def __init__(\n            self,\n            config=None,\n            data_source=None,\n    ):",
        "detail": "lib.MLTradingBot.lumibot.brokers.example_broker",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokers",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "class InteractiveBrokers(Broker):\n    \"\"\"Inherit InteractiveBrokerData first and all the price market\n    methods than inherits broker\"\"\"\n    def __init__(self, config, max_workers=20, chunk_size=100, data_source=None, **kwargs):\n        if data_source is None:\n            data_source = InteractiveBrokersData(config, max_workers=max_workers, chunk_size=chunk_size)\n        super().__init__(\n            name=\"interactive_brokers\", \n            config=config, \n            data_source=data_source, ",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "IBWrapper",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "class IBWrapper(EWrapper):\n    \"\"\"Listens and collects data from IB.\"\"\"\n    # Error handling code.\n    def init_error(self):\n        error_queue = queue.Queue()\n        self.my_errors_queue = error_queue\n    def is_error(self):\n        error_exist = not self.my_errors_queue.empty()\n        return error_exist\n    def get_error(self, timeout=6):",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "IBClient",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "class IBClient(EClient):\n    \"\"\"Sends data to IB\"\"\"\n    def __init__(self, wrapper):\n        ## Set up with a wrapper inside\n        EClient.__init__(self, wrapper)\n        self.max_wait_time = 13\n        self.reqId = 10000\n    def get_reqid(self):\n        self.reqId += 1\n        return self.reqId",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "IBApp",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "class IBApp(IBWrapper, IBClient):\n    def __init__(self, ip_address, socket_port, client_id, subaccount=None, ib_broker=None):\n        IBWrapper.__init__(self)\n        IBClient.__init__(self, wrapper=self)\n        self.ip_address = ip_address\n        self.socket_port = socket_port\n        self.client_id = client_id\n        self.ib_broker = ib_broker\n        self.subaccount = subaccount\n        self.reqAutoOpenOrders(True)",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "TYPE_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "TYPE_MAP = dict(\n    stock=\"STK\",\n    option=\"OPT\",\n    future=\"FUT\",\n    forex=\"CASH\",\n    index=\"IND\",\n    multileg=\"BAG\",\n)\nDATE_MAP = dict(\n    future=\"%Y%m%d\",",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "DATE_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "DATE_MAP = dict(\n    future=\"%Y%m%d\",\n    option=\"%Y%m%d\",\n)\nORDERTYPE_MAPPING = dict(\n    market=\"MKT\",\n    limit=\"LMT\",\n    stop=\"STP\",\n    stop_limit=\"STP LMT\",\n    trailing_stop=\"TRAIL\",",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "ORDERTYPE_MAPPING",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "peekOfCode": "ORDERTYPE_MAPPING = dict(\n    market=\"MKT\",\n    limit=\"LMT\",\n    stop=\"STP\",\n    stop_limit=\"STP LMT\",\n    trailing_stop=\"TRAIL\",\n)\nclass InteractiveBrokers(Broker):\n    \"\"\"Inherit InteractiveBrokerData first and all the price market\n    methods than inherits broker\"\"\"",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersREST",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "peekOfCode": "class InteractiveBrokersREST(Broker):\n    \"\"\"\n    Broker that connects to the Interactive Brokers REST API.\n    \"\"\"\n    NAME = \"InteractiveBrokersREST\"\n    def __init__(self, config, data_source=None):\n        if data_source is None:\n            data_source = InteractiveBrokersRESTData(config)\n        super().__init__(name=self.NAME, data_source=data_source, config=config)\n        self.market = \"NYSE\"  # The default market is NYSE.",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "documentation": {}
    },
    {
        "label": "TYPE_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "peekOfCode": "TYPE_MAP = dict(\n    stock=\"STK\",\n    option=\"OPT\",\n    future=\"FUT\",\n    forex=\"CASH\",\n    index=\"IND\",\n    multileg=\"BAG\",\n)\nDATE_MAP = dict(\n    future=\"%Y%m%d\",",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "documentation": {}
    },
    {
        "label": "DATE_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "peekOfCode": "DATE_MAP = dict(\n    future=\"%Y%m%d\",\n    option=\"%Y%m%d\",\n)\nORDERTYPE_MAPPING = dict(\n    market=\"MKT\",\n    limit=\"LMT\",\n    stop=\"STP\",\n    stop_limit=\"STP LMT\",\n    trailing_stop=\"TRAIL\",",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "documentation": {}
    },
    {
        "label": "ORDERTYPE_MAPPING",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "peekOfCode": "ORDERTYPE_MAPPING = dict(\n    market=\"MKT\",\n    limit=\"LMT\",\n    stop=\"STP\",\n    stop_limit=\"STP LMT\",\n    trailing_stop=\"TRAIL\",\n)\nSPREAD_CONID_MAP = {\n    \"AUD\": 61227077,\n    \"CAD\": 61227082,",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "documentation": {}
    },
    {
        "label": "SPREAD_CONID_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "peekOfCode": "SPREAD_CONID_MAP = {\n    \"AUD\": 61227077,\n    \"CAD\": 61227082,\n    \"CHF\": 61227087,\n    \"CNH\": 136000441,\n    \"GBP\": 58666491,\n    \"HKD\": 61227072,\n    \"INR\": 136000444,\n    \"JPY\": 61227069,\n    \"KRW\": 136000424,",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "documentation": {}
    },
    {
        "label": "ASSET_CLASS_MAPPING",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "description": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "peekOfCode": "ASSET_CLASS_MAPPING = {\n    \"STK\": Asset.AssetType.STOCK,\n    \"OPT\": Asset.AssetType.OPTION,\n    \"FUT\": Asset.AssetType.FUTURE,\n    \"CASH\": Asset.AssetType.FOREX,\n}\nclass InteractiveBrokersREST(Broker):\n    \"\"\"\n    Broker that connects to the Interactive Brokers REST API.\n    \"\"\"",
        "detail": "lib.MLTradingBot.lumibot.brokers.interactive_brokers_rest",
        "documentation": {}
    },
    {
        "label": "Tradier",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.brokers.tradier",
        "description": "lib.MLTradingBot.lumibot.brokers.tradier",
        "peekOfCode": "class Tradier(Broker):\n    \"\"\"\n    Broker that connects to Tradier API to place orders and retrieve data. Tradier API only supports Order streaming\n    for live accounts, paper trading accounts must use a 'polling' method to retrieve order updates. This class will\n    still use a CustomStream object to process order updates (which can be confusing!), but this will more seamlessly\n    match what other LumiBrokers are doing without requiring changes to the stategy_executor. This\n    polling method will also work for Live accounts, so it will be used by default. However, future updates will be\n    made to natively support websocket streaming for Live accounts.\n    \"\"\"\n    POLL_EVENT = PollingStream.POLL_EVENT",
        "detail": "lib.MLTradingBot.lumibot.brokers.tradier",
        "documentation": {}
    },
    {
        "label": "AlpacaData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.alpaca_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.alpaca_data",
        "peekOfCode": "class AlpacaData(DataSource):\n    SOURCE = \"ALPACA\"\n    MIN_TIMESTEP = \"minute\"\n    TIMESTEP_MAPPING = [\n        {\n            \"timestep\": \"minute\",\n            \"representations\": [TimeFrame.Minute, \"minute\"],\n        },\n        {\n            \"timestep\": \"5 minutes\",",
        "detail": "lib.MLTradingBot.lumibot.data_sources.alpaca_data",
        "documentation": {}
    },
    {
        "label": "AlphaVantageData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.alpha_vantage_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.alpha_vantage_data",
        "peekOfCode": "class AlphaVantageData(DataSource):\n    SOURCE = \"ALPHA_VANTAGE\"\n    MIN_TIMESTEP = \"minute\"\n    DATA_STALE_AFTER = timedelta(days=1)\n    def __init__(self, config=None, auto_adjust=True, **kwargs):\n        self.name = \"alpha vantage\"\n        self.auto_adjust = auto_adjust\n        self._data_store = {}\n        self.config = config\n    def _append_data(self, asset, data):",
        "detail": "lib.MLTradingBot.lumibot.data_sources.alpha_vantage_data",
        "documentation": {}
    },
    {
        "label": "CcxtBacktestingData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.ccxt_backtesting_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.ccxt_backtesting_data",
        "peekOfCode": "class CcxtBacktestingData(DataSourceBacktesting):\n    \"\"\"Use CcxtCacheDB to download and cache data.\n    \"\"\"\n    # SOURCE must be `CCXT` for the DataSourceBacktesting to work\n    # `CCXT` is used in DataSource name\n    SOURCE = \"CCXT\"\n    MIN_TIMESTEP = \"day\"\n    TIMESTEP_MAPPING = [\n        {\"timestep\": \"minute\", \"representations\": [\"1m\"]},\n        {\"timestep\": \"day\", \"representations\": [\"1d\"]},",
        "detail": "lib.MLTradingBot.lumibot.data_sources.ccxt_backtesting_data",
        "documentation": {}
    },
    {
        "label": "CcxtData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.ccxt_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.ccxt_data",
        "peekOfCode": "class CcxtData(DataSource):\n    SOURCE = \"CCXT\"\n    MIN_TIMESTEP = \"minute\"\n    TIMESTEP_MAPPING = [\n        {\"timestep\": \"minute\", \"representations\": [\"1m\"]},\n        {\"timestep\": \"day\", \"representations\": [\"1d\"]},\n    ]\n    IS_BACKTESTING_DATA_SOURCE = False\n    \"\"\"Common base class for data_sources/ccxt and brokers/ccxt\"\"\"\n    @staticmethod",
        "detail": "lib.MLTradingBot.lumibot.data_sources.ccxt_data",
        "documentation": {}
    },
    {
        "label": "DataSource",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.data_source",
        "description": "lib.MLTradingBot.lumibot.data_sources.data_source",
        "peekOfCode": "class DataSource(ABC):\n    SOURCE = \"\"\n    IS_BACKTESTING_DATA_SOURCE = False\n    MIN_TIMESTEP = \"minute\"\n    TIMESTEP_MAPPING = []\n    DEFAULT_TIMEZONE = LUMIBOT_DEFAULT_TIMEZONE\n    DEFAULT_PYTZ = LUMIBOT_DEFAULT_PYTZ\n    def __init__(self, api_key=None, delay=None):\n        \"\"\"\n        Parameters",
        "detail": "lib.MLTradingBot.lumibot.data_sources.data_source",
        "documentation": {}
    },
    {
        "label": "DataSourceBacktesting",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.data_source_backtesting",
        "description": "lib.MLTradingBot.lumibot.data_sources.data_source_backtesting",
        "peekOfCode": "class DataSourceBacktesting(DataSource, ABC):\n    \"\"\"\n    This class is the base class for all backtesting data sources.  It is also an abstract class and should not be\n    instantiated directly because it does not define all necessary methods. Instead, instantiate one of the\n    child classes like PandasData.\n    \"\"\"\n    IS_BACKTESTING_DATA_SOURCE = True\n    def __init__(\n        self,\n        datetime_start,",
        "detail": "lib.MLTradingBot.lumibot.data_sources.data_source_backtesting",
        "documentation": {}
    },
    {
        "label": "ExampleBrokerData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.example_broker_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.example_broker_data",
        "peekOfCode": "class ExampleBrokerData(DataSource):\n    \"\"\"\n    Data source that connects to the Example Broker API.\n    \"\"\"\n    MIN_TIMESTEP = \"minute\"\n    SOURCE = \"ExampleBroker\"\n    def __init__(self):\n        super().__init__()\n    # Method stubs with logging for not yet implemented methods\n    def get_chains(self, asset: Asset, quote: Asset = None) -> dict:",
        "detail": "lib.MLTradingBot.lumibot.data_sources.example_broker_data",
        "documentation": {}
    },
    {
        "label": "NoDataFound",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.exceptions",
        "description": "lib.MLTradingBot.lumibot.data_sources.exceptions",
        "peekOfCode": "class NoDataFound(Exception):\n    def __init__(self, source, asset):\n        message = (\n            f\"{source} did not return data for symbol {asset}. \"\n            f\"Make sure there is no symbol typo or use another data source\"\n        )\n        super(NoDataFound, self).__init__(message)\nclass UnavailabeTimestep(Exception):\n    def __init__(self, source, timestep):\n        message = \"%s data source does not have data with %r timestep\" % (",
        "detail": "lib.MLTradingBot.lumibot.data_sources.exceptions",
        "documentation": {}
    },
    {
        "label": "UnavailabeTimestep",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.exceptions",
        "description": "lib.MLTradingBot.lumibot.data_sources.exceptions",
        "peekOfCode": "class UnavailabeTimestep(Exception):\n    def __init__(self, source, timestep):\n        message = \"%s data source does not have data with %r timestep\" % (\n            source,\n            timestep,\n        )\n        super(UnavailabeTimestep, self).__init__(message)",
        "detail": "lib.MLTradingBot.lumibot.data_sources.exceptions",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_data",
        "peekOfCode": "class InteractiveBrokersData(DataSource):\n    \"\"\"Make Interactive Brokers connection and gets data.\n    Create connection to Interactive Brokers market through either Gateway or TWS\n    which must be running locally for connection to be made.\n    \"\"\"\n    SOURCE = \"InteractiveBrokers\"\n    MIN_TIMESTEP = \"minute\"\n    TIMESTEP_MAPPING = [\n        {\n            \"timestep\": \"second\",",
        "detail": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_data",
        "documentation": {}
    },
    {
        "label": "TYPE_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_data",
        "peekOfCode": "TYPE_MAP = dict(\n    stock=\"STK\",\n    option=\"OPT\",\n    future=\"FUT\",\n    forex=\"CASH\",\n    index=\"IND\",\n    multileg=\"BAG\",\n)\nclass InteractiveBrokersData(DataSource):\n    \"\"\"Make Interactive Brokers connection and gets data.",
        "detail": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_data",
        "documentation": {}
    },
    {
        "label": "InteractiveBrokersRESTData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_rest_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_rest_data",
        "peekOfCode": "class InteractiveBrokersRESTData(DataSource):\n    \"\"\"\n    Data source that connects to the Interactive Brokers REST API.\n    \"\"\"\n    MIN_TIMESTEP = \"minute\"\n    SOURCE = \"InteractiveBrokersREST\"\n    def __init__(self, config):\n        if config[\"API_URL\"] is None:\n            self.port = \"4234\"\n            self.base_url = f\"https://localhost:{self.port}/v1/api\"",
        "detail": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_rest_data",
        "documentation": {}
    },
    {
        "label": "TYPE_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_rest_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_rest_data",
        "peekOfCode": "TYPE_MAP = dict(\n    stock=\"STK\",\n    option=\"OPT\",\n    future=\"FUT\",\n    forex=\"CASH\",\n    index=\"IND\",\n    multileg=\"BAG\",\n)\nclass InteractiveBrokersRESTData(DataSource):\n    \"\"\"",
        "detail": "lib.MLTradingBot.lumibot.data_sources.interactive_brokers_rest_data",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.pandas_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.pandas_data",
        "peekOfCode": "class PandasData(DataSourceBacktesting):\n    \"\"\"\n    PandasData is a Backtesting-only DataSource that uses a Pandas DataFrame (read from CSV) as the source of\n    data for a backtest run. It is not possible to use this class to run a live trading strategy.\n    \"\"\"\n    SOURCE = \"PANDAS\"\n    TIMESTEP_MAPPING = [\n        {\"timestep\": \"day\", \"representations\": [\"1D\", \"day\"]},\n        {\"timestep\": \"minute\", \"representations\": [\"1M\", \"minute\"]},\n    ]",
        "detail": "lib.MLTradingBot.lumibot.data_sources.pandas_data",
        "documentation": {}
    },
    {
        "label": "TradierAPIError",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.tradier_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.tradier_data",
        "peekOfCode": "class TradierAPIError(Exception):\n    pass\nclass TradierData(DataSource):\n    MIN_TIMESTEP = \"minute\"\n    SOURCE = \"Tradier\"\n    TIMESTEP_MAPPING = [\n        {\n            \"timestep\": \"tick\",\n            \"representations\": [\n                \"tick\",",
        "detail": "lib.MLTradingBot.lumibot.data_sources.tradier_data",
        "documentation": {}
    },
    {
        "label": "TradierData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.tradier_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.tradier_data",
        "peekOfCode": "class TradierData(DataSource):\n    MIN_TIMESTEP = \"minute\"\n    SOURCE = \"Tradier\"\n    TIMESTEP_MAPPING = [\n        {\n            \"timestep\": \"tick\",\n            \"representations\": [\n                \"tick\",\n            ],\n        },",
        "detail": "lib.MLTradingBot.lumibot.data_sources.tradier_data",
        "documentation": {}
    },
    {
        "label": "YahooData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.yahoo_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.yahoo_data",
        "peekOfCode": "class YahooData(DataSourceBacktesting):\n    SOURCE = \"YAHOO\"\n    MIN_TIMESTEP = \"day\"\n    TIMESTEP_MAPPING = [\n        {\"timestep\": \"day\", \"representations\": [\"1d\", \"day\"]},\n        {\"timestep\": \"15 minutes\", \"representations\": [\"15m\", \"15 minutes\"]},\n        {\"timestep\": \"minute\", \"representations\": [\"1m\", \"1 minute\"]},\n    ]\n    def __init__(self, *args, auto_adjust=True, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "lib.MLTradingBot.lumibot.data_sources.yahoo_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.data_sources.yahoo_data",
        "description": "lib.MLTradingBot.lumibot.data_sources.yahoo_data",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass YahooData(DataSourceBacktesting):\n    SOURCE = \"YAHOO\"\n    MIN_TIMESTEP = \"day\"\n    TIMESTEP_MAPPING = [\n        {\"timestep\": \"day\", \"representations\": [\"1d\", \"day\"]},\n        {\"timestep\": \"15 minutes\", \"representations\": [\"15m\", \"15 minutes\"]},\n        {\"timestep\": \"minute\", \"representations\": [\"1m\", \"1 minute\"]},\n    ]\n    def __init__(self, *args, auto_adjust=True, **kwargs):",
        "detail": "lib.MLTradingBot.lumibot.data_sources.yahoo_data",
        "documentation": {}
    },
    {
        "label": "Asset",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.asset",
        "description": "lib.MLTradingBot.lumibot.entities.asset",
        "peekOfCode": "class Asset:\n    \"\"\"\n    This is a base class for Assets including stocks, futures, options,\n    forex, and crypto.\n    Parameters\n    ----------\n    symbol : str\n        Symbol of the stock or underlying in case of futures/options.\n    asset_type : str\n        Type of the asset. Asset types are only 'stock', 'option', 'future', 'forex', 'crypto'",
        "detail": "lib.MLTradingBot.lumibot.entities.asset",
        "documentation": {}
    },
    {
        "label": "AssetsMapping",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.asset",
        "description": "lib.MLTradingBot.lumibot.entities.asset",
        "peekOfCode": "class AssetsMapping(UserDict):\n    def __init__(self, mapping):\n        UserDict.__init__(self, mapping)\n        symbols_mapping = {k.symbol: v for k, v in mapping.items()}\n        self._symbols_mapping = symbols_mapping\n    def __missing__(self, key):\n        if isinstance(key, str):\n            if key in self._symbols_mapping:\n                return self._symbols_mapping[key]\n        raise KeyError(key)",
        "detail": "lib.MLTradingBot.lumibot.entities.asset",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.bar",
        "description": "lib.MLTradingBot.lumibot.entities.bar",
        "peekOfCode": "class Bar(ComparaisonMixin):\n    \"\"\"\n    The Bar class represents a single bar (OHLC) of data.\n    Attributes\n    ----------\n    timestamp : datetime.datetime\n        The timestamp of the bar.\n    open : float\n        The opening price of the bar.\n    high : float",
        "detail": "lib.MLTradingBot.lumibot.entities.bar",
        "documentation": {}
    },
    {
        "label": "Bars",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.bars",
        "description": "lib.MLTradingBot.lumibot.entities.bars",
        "peekOfCode": "class Bars:\n    \"\"\"Pricing and financial data for given Symbol.\n    The OHLCV, and if available, dividends, stock splits for a given\n    financial instrument. Price change, dividend yield and return\n    are calculated if appropriate.\n    Parameters\n    ----------\n    df : Pandas Dataframe\n        Dataframe with:\n            datetime.datetime index time zone aware.",
        "detail": "lib.MLTradingBot.lumibot.entities.bars",
        "documentation": {}
    },
    {
        "label": "NoBarDataFound",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.bars",
        "description": "lib.MLTradingBot.lumibot.entities.bars",
        "peekOfCode": "class NoBarDataFound(Exception):\n    def __init__(self, source, asset):\n        message = (\n            f\"{source} did not return data for symbol {asset}. \"\n            f\"Make sure there is no symbol typo or use another data source\"\n        )\n        super(NoBarDataFound, self).__init__(message)\n    def aggregate_bars(self, frequency):\n        \"\"\"\n        Will convert a set of bars to a different timeframe (eg. 1 min to 15 min)",
        "detail": "lib.MLTradingBot.lumibot.entities.bars",
        "documentation": {}
    },
    {
        "label": "NoBarDataFound",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.bars",
        "description": "lib.MLTradingBot.lumibot.entities.bars",
        "peekOfCode": "class NoBarDataFound(Exception):\n    def __init__(self, source, asset):\n        message = (\n            f\"{source} did not return data for symbol {asset}. \"\n            f\"Make sure there is no symbol typo or use another data source\"\n        )\n        super(NoBarDataFound, self).__init__(message)",
        "detail": "lib.MLTradingBot.lumibot.entities.bars",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.data",
        "description": "lib.MLTradingBot.lumibot.entities.data",
        "peekOfCode": "class Data:\n    \"\"\"Input and manage Pandas dataframes for backtesting.\n    Parameters\n    ----------\n    asset : Asset Object\n        Asset to which this data is attached.\n    df : dataframe\n        Pandas dataframe containing OHLCV etc. trade data. Loaded by user\n        from csv.\n        Index is date and must be pandas datetime64.",
        "detail": "lib.MLTradingBot.lumibot.entities.data",
        "documentation": {}
    },
    {
        "label": "Dataline",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.dataline",
        "description": "lib.MLTradingBot.lumibot.entities.dataline",
        "peekOfCode": "class Dataline:\n    def __init__(self, asset, name, dataline, dtype):\n        self.asset = asset\n        self.name = name\n        self.dataline = dataline\n        self.dtype = dtype",
        "detail": "lib.MLTradingBot.lumibot.entities.dataline",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.order",
        "description": "lib.MLTradingBot.lumibot.entities.order",
        "peekOfCode": "class Order:\n    Transaction = namedtuple(\"Transaction\", [\"quantity\", \"price\"])\n    class OrderClass:\n        BRACKET = \"bracket\"\n        OCO = \"oco\"\n        OTO = \"oto\"\n        MULTILEG = \"multileg\"\n    class OrderType:\n        MARKET = \"market\"\n        LIMIT = \"limit\"",
        "detail": "lib.MLTradingBot.lumibot.entities.order",
        "documentation": {}
    },
    {
        "label": "SELL",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.entities.order",
        "description": "lib.MLTradingBot.lumibot.entities.order",
        "peekOfCode": "SELL = \"sell\"\nBUY = \"buy\"\nVALID_STATUS = [\"unprocessed\", \"new\", \"open\", \"submitted\", \"fill\", \"partial_fill\", \"cancelling\", \"canceled\", \"error\", \"cash_settled\"]\nSTATUS_ALIAS_MAP = {\n    \"cancelled\": \"canceled\",\n    \"cancel\": \"canceled\",\n    \"cash\": \"cash_settled\",\n    \"expired\": \"canceled\",  # Alpaca/Tradier status\n    \"filled\": \"fill\",  # Alpaca/Tradier status\n    \"partially_filled\": \"partial_filled\",  # Alpaca/Tradier status",
        "detail": "lib.MLTradingBot.lumibot.entities.order",
        "documentation": {}
    },
    {
        "label": "BUY",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.entities.order",
        "description": "lib.MLTradingBot.lumibot.entities.order",
        "peekOfCode": "BUY = \"buy\"\nVALID_STATUS = [\"unprocessed\", \"new\", \"open\", \"submitted\", \"fill\", \"partial_fill\", \"cancelling\", \"canceled\", \"error\", \"cash_settled\"]\nSTATUS_ALIAS_MAP = {\n    \"cancelled\": \"canceled\",\n    \"cancel\": \"canceled\",\n    \"cash\": \"cash_settled\",\n    \"expired\": \"canceled\",  # Alpaca/Tradier status\n    \"filled\": \"fill\",  # Alpaca/Tradier status\n    \"partially_filled\": \"partial_filled\",  # Alpaca/Tradier status\n    \"pending\": \"open\",  # Tradier status",
        "detail": "lib.MLTradingBot.lumibot.entities.order",
        "documentation": {}
    },
    {
        "label": "VALID_STATUS",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.entities.order",
        "description": "lib.MLTradingBot.lumibot.entities.order",
        "peekOfCode": "VALID_STATUS = [\"unprocessed\", \"new\", \"open\", \"submitted\", \"fill\", \"partial_fill\", \"cancelling\", \"canceled\", \"error\", \"cash_settled\"]\nSTATUS_ALIAS_MAP = {\n    \"cancelled\": \"canceled\",\n    \"cancel\": \"canceled\",\n    \"cash\": \"cash_settled\",\n    \"expired\": \"canceled\",  # Alpaca/Tradier status\n    \"filled\": \"fill\",  # Alpaca/Tradier status\n    \"partially_filled\": \"partial_filled\",  # Alpaca/Tradier status\n    \"pending\": \"open\",  # Tradier status\n    \"presubmitted\": \"new\",  # IBKR status",
        "detail": "lib.MLTradingBot.lumibot.entities.order",
        "documentation": {}
    },
    {
        "label": "STATUS_ALIAS_MAP",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.entities.order",
        "description": "lib.MLTradingBot.lumibot.entities.order",
        "peekOfCode": "STATUS_ALIAS_MAP = {\n    \"cancelled\": \"canceled\",\n    \"cancel\": \"canceled\",\n    \"cash\": \"cash_settled\",\n    \"expired\": \"canceled\",  # Alpaca/Tradier status\n    \"filled\": \"fill\",  # Alpaca/Tradier status\n    \"partially_filled\": \"partial_filled\",  # Alpaca/Tradier status\n    \"pending\": \"open\",  # Tradier status\n    \"presubmitted\": \"new\",  # IBKR status\n    \"rejected\": \"error\",  # Tradier status",
        "detail": "lib.MLTradingBot.lumibot.entities.order",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.position",
        "description": "lib.MLTradingBot.lumibot.entities.position",
        "peekOfCode": "class Position:\n    \"\"\"\n    This is a Position object. It is used to keep track of the quantity of an asset owned in a strategy.\n    Position objects are retreived from the broker using the get_positions() or get_position() methods.\n    Attributes\n    ----------\n    strategy : str\n        The strategy that owns this position.\n    asset : Asset\n        The asset that this position is for.",
        "detail": "lib.MLTradingBot.lumibot.entities.position",
        "documentation": {}
    },
    {
        "label": "TradingFee",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.entities.trading_fee",
        "description": "lib.MLTradingBot.lumibot.entities.trading_fee",
        "peekOfCode": "class TradingFee:\n    \"\"\"TradingFee class. Used to define the trading fees for a broker in a strategy/backtesting.\"\"\"\n    def __init__(self, flat_fee=0.0, percent_fee=0.0, maker=True, taker=True):\n        \"\"\"\n        Parameters\n        ----------\n        flat_fee : Decimal, float, or None\n            Flat fee to pay for each order. This is a fixed fee that is paid for each order in the quote currency.\n        percent_fee : Decimal, float, or None\n            Percentage fee to pay for each order. This is a percentage of the order value that is paid for each order in the quote currency.",
        "detail": "lib.MLTradingBot.lumibot.entities.trading_fee",
        "documentation": {}
    },
    {
        "label": "Developing_Momentum_Trading_Strategy",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "peekOfCode": "class Developing_Momentum_Trading_Strategy:\n    # https://github.com/mjmacarty/alphavantage/blob/main/3-momentum_algorithmic.ipynb\n    # Many services for this, some paid some free\n    # Yahoo Finance API\n    # Typically trading \"systems\" involve a number of securities\n    # For this demonstration we are just going to look at GLD --> the gold ETF\n    import numpy as np\n    import pandas as pd\n    import pandas_datareader as pdr\n    import matplotlib.pyplot as plt   ",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "documentation": {}
    },
    {
        "label": "FastTrading",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "peekOfCode": "class FastTrading(Strategy):\n    # =========over loading life cycle methods\n    def initialize(self, momentum_length = 2, max_assets = 4):\n        self.momentum_length =  momentum_length # in minutes\n        self.sleeptime = 1\n         # set symbols tht we want to be monitoring\n        self.symbols = ['TSLA', 'SPY', 'GLD', 'TLT', 'MSFT', 'MCHI', 'SPXL', 'SPXS']\n        # Initialise our variables  \n        self.assets_quantity = {symbol:0 for symbol in self.symbols}\n        self.max_assets = min(max_assets, len(self.symbols))",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Developing_Momentum_Trading_Strategy:\n    # https://github.com/mjmacarty/alphavantage/blob/main/3-momentum_algorithmic.ipynb\n    # Many services for this, some paid some free\n    # Yahoo Finance API\n    # Typically trading \"systems\" involve a number of securities\n    # For this demonstration we are just going to look at GLD --> the gold ETF\n    import numpy as np\n    import pandas as pd\n    import pandas_datareader as pdr",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.FastTrading_1",
        "documentation": {}
    },
    {
        "label": "FastTrading",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.fasttrading_2",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.fasttrading_2",
        "peekOfCode": "class FastTrading(Strategy):\n    IS_BACKTESTING = False\n    # ===== Overloading Lifecycle Methods =====\n    def initialize(self, momentum_length=2, max_assets=4):\n        # Set symbols we want to monitor\n        self.symbols = ['TSLA', 'SPY', 'GLD', 'TLT', 'MSFT', 'MCHI', 'SPXL', 'SPXS']\n        self.momentum_length = momentum_length  # in minutes\n        self.sleeptime = 1  # Optional: For slowing down execution\n        self.frequency = \"minute\"  # For minute-level trading\n        self.max_assets = min(max_assets, len(self.symbols))  # Limit max assets to trade",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.fasttrading_2",
        "documentation": {}
    },
    {
        "label": "AlpacaConfig",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "AlpacaConfig = {\n    \"API_KEY\":  \"PKEJH4W0URAU56SHKQW3\" ,\n    \"API_SECRET\": \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\",\n    \"PAPER\": True\n}  \nlogfile = \"logs/test.log\"\ntrader = Trader(logfile=logfile)\nbroker = Alpaca(AlpacaConfig)\n# strategy_name = \"RedditSentiment\" \n# strategy = RedditSentiment(name=strategy_name, budget=budget, broker= broker)",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "logfile",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "logfile = \"logs/test.log\"\ntrader = Trader(logfile=logfile)\nbroker = Alpaca(AlpacaConfig)\n# strategy_name = \"RedditSentiment\" \n# strategy = RedditSentiment(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"DebtTrading\" \n# strategy = DebtTrading(name=strategy_name, budget=budget, broker= broker)\nstrategy_name = \"FastTrading\" \nstrategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"My Strategy\" ",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "trader = Trader(logfile=logfile)\nbroker = Alpaca(AlpacaConfig)\n# strategy_name = \"RedditSentiment\" \n# strategy = RedditSentiment(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"DebtTrading\" \n# strategy = DebtTrading(name=strategy_name, budget=budget, broker= broker)\nstrategy_name = \"FastTrading\" \nstrategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"My Strategy\" \n# strategy = FastTrading(name=strategy_name, budget=budget, broker= broker)",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "broker",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "broker = Alpaca(AlpacaConfig)\n# strategy_name = \"RedditSentiment\" \n# strategy = RedditSentiment(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"DebtTrading\" \n# strategy = DebtTrading(name=strategy_name, budget=budget, broker= broker)\nstrategy_name = \"FastTrading\" \nstrategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"My Strategy\" \n# strategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# if type(strategy) != IntrdayMomentum and type(strategy) != FastTrading:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "strategy_name",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "strategy_name = \"FastTrading\" \nstrategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"My Strategy\" \n# strategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# if type(strategy) != IntrdayMomentum and type(strategy) != FastTrading:\n    ###\n    # 1. Backtest the strtegy\n    ###\nbacktesting_start = datetime(2012, 1, 1)\nbacktesting_end   = datetime(2021, 1, 1)",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "strategy",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "strategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# strategy_name = \"My Strategy\" \n# strategy = FastTrading(name=strategy_name, budget=budget, broker= broker)\n# if type(strategy) != IntrdayMomentum and type(strategy) != FastTrading:\n    ###\n    # 1. Backtest the strtegy\n    ###\nbacktesting_start = datetime(2012, 1, 1)\nbacktesting_end   = datetime(2021, 1, 1)\ndatestring = datetime.now.strftime(\"%Y-%m-%d %H:%M:%S\")",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "backtesting_start",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "backtesting_start = datetime(2012, 1, 1)\nbacktesting_end   = datetime(2021, 1, 1)\ndatestring = datetime.now.strftime(\"%Y-%m-%d %H:%M:%S\")\nstats_file = f\"logs/{strategy_name}_{datestring}.csv\"\n# Run the actual backtest\nprint(f\"Starting Backtest...\")\nstrategy.backtest(\n    YahooDataBacktesting, \n    backtesting_start, \n    backtesting_end,",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "datestring",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "datestring = datetime.now.strftime(\"%Y-%m-%d %H:%M:%S\")\nstats_file = f\"logs/{strategy_name}_{datestring}.csv\"\n# Run the actual backtest\nprint(f\"Starting Backtest...\")\nstrategy.backtest(\n    YahooDataBacktesting, \n    backtesting_start, \n    backtesting_end,\n    stats_file=stats_file\n) ",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "stats_file",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "description": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "peekOfCode": "stats_file = f\"logs/{strategy_name}_{datestring}.csv\"\n# Run the actual backtest\nprint(f\"Starting Backtest...\")\nstrategy.backtest(\n    YahooDataBacktesting, \n    backtesting_start, \n    backtesting_end,\n    stats_file=stats_file\n) \n###",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.FastTrading.main",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "key = open('../1-alphavantage.txt').read()\n# ### 3. Create TimeSeries Object and Make API Call\n# In[8]:\nts = TimeSeries(key, output_format='pandas')\ndata, meta = ts.get_intraday('TSLA', interval='1min', outputsize='full')\n# ### 4. Examine Data\n# In[7]:\nmeta",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "ts",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "ts = TimeSeries(key, output_format='pandas')\ndata, meta = ts.get_intraday('TSLA', interval='1min', outputsize='full')\n# ### 4. Examine Data\n# In[7]:\nmeta\n# In[8]:\ndata.info()\n# In[9]:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "columns = ['open', 'high', 'low', 'close', 'volume']\ndata.columns = columns\n# In[13]:\ndata['TradeDate'] = data.index.date\ndata['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "data.columns",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "data.columns = columns\n# In[13]:\ndata['TradeDate'] = data.index.date\ndata['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:\nmarket = data.between_time('09:30:00', '16:00:00').copy()",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "data['TradeDate']",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "data['TradeDate'] = data.index.date\ndata['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:\nmarket = data.between_time('09:30:00', '16:00:00').copy()\nmarket.sort_index(inplace=True)\nmarket.info()\n# In[16]:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "data['time']",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "data['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:\nmarket = data.between_time('09:30:00', '16:00:00').copy()\nmarket.sort_index(inplace=True)\nmarket.info()\n# In[16]:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "market",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "market = data.between_time('09:30:00', '16:00:00').copy()\nmarket.sort_index(inplace=True)\nmarket.info()\n# In[16]:\nmarket.groupby('TradeDate').agg({'low':min, 'high':max})\n# In[17]:\nmarket.loc[market.groupby('TradeDate')['low'].idxmin()]\n# In[18]:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "CcxtBacktestingExampleStrategy",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.ccxt_backtesting_example",
        "description": "lib.MLTradingBot.lumibot.example_strategies.ccxt_backtesting_example",
        "peekOfCode": "class CcxtBacktestingExampleStrategy(Strategy):\n    def initialize(self, asset:tuple[Asset,Asset] = None,\n                   cash_at_risk:float=.25,window:int=21):\n        if asset is None:\n            raise ValueError(\"You must provide a valid asset pair\")\n        # for crypto, market is 24/7\n        self.set_market(\"24/7\")\n        self.sleeptime = \"1D\"\n        self.asset = asset\n        self.base, self.quote = asset",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.ccxt_backtesting_example",
        "documentation": {}
    },
    {
        "label": "ImportantFunctions",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.crypto_important_functions",
        "description": "lib.MLTradingBot.lumibot.example_strategies.crypto_important_functions",
        "peekOfCode": "class ImportantFunctions(Strategy):\n    def initialize(self):\n        # Set the time between trading iterations\n        self.sleeptime = \"30S\"\n        # Set the market to 24/7 since those are the hours for the crypto market\n        self.set_market(\"24/7\")\n    def on_trading_iteration(self):\n        ###########################\n        # Placing an Order\n        ###########################",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.crypto_important_functions",
        "documentation": {}
    },
    {
        "label": "DriftRebalancer",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "description": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "peekOfCode": "class DriftRebalancer(Strategy):\n    \"\"\"The DriftRebalancer strategy rebalances a portfolio based on drift from target weights.\n    The strategy calculates the drift of each asset in the portfolio and triggers a rebalance if the drift exceeds\n    the drift_threshold. The strategy will sell assets that have drifted above the threshold and\n    buy assets that have drifted below the threshold.\n    The current version of the DriftRebalancer strategy only supports limit orders and whole share quantities.\n    Submit an issue if you need market orders or fractional shares. It should be pretty easy to add.\n    Example parameters:\n    parameters = {\n        ### Standard lumibot strategy parameters",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "DriftCalculationLogic",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "description": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "peekOfCode": "class DriftCalculationLogic:\n    def __init__(self, target_weights: Dict[str, Decimal]) -> None:\n        self.df = pd.DataFrame({\n            \"symbol\": target_weights.keys(),\n            \"is_quote_asset\": False,\n            \"current_quantity\": Decimal(0),\n            \"current_value\": Decimal(0),\n            \"current_weight\": Decimal(0),\n            \"target_weight\": [Decimal(weight) for weight in target_weights.values()],\n            \"target_value\": Decimal(0),",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "LimitOrderRebalanceLogic",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "description": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "peekOfCode": "class LimitOrderRebalanceLogic:\n    def __init__(\n            self,\n            *,\n            strategy: Strategy,\n            df: pd.DataFrame,\n            fill_sleeptime: int = 15,\n            acceptable_slippage: Decimal = Decimal(\"0.005\"),\n            shorting: bool = False\n    ) -> None:",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.drift_rebalancer",
        "documentation": {}
    },
    {
        "label": "LifecycleLogger",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.lifecycle_logger",
        "description": "lib.MLTradingBot.lumibot.example_strategies.lifecycle_logger",
        "peekOfCode": "class LifecycleLogger(Strategy):\n    parameters = {\n        \"sleeptime\": \"10s\",\n        \"market\": \"24/7\",\n    }\n    def initialize(self, symbol=\"\"):\n        self.sleeptime = self.parameters[\"sleeptime\"]\n        self.set_market(self.parameters[\"market\"])\n    def before_market_opens(self):\n        dt = self.get_datetime()",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.lifecycle_logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.lifecycle_logger",
        "description": "lib.MLTradingBot.lumibot.example_strategies.lifecycle_logger",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LifecycleLogger(Strategy):\n    parameters = {\n        \"sleeptime\": \"10s\",\n        \"market\": \"24/7\",\n    }\n    def initialize(self, symbol=\"\"):\n        self.sleeptime = self.parameters[\"sleeptime\"]\n        self.set_market(self.parameters[\"market\"])\n    def before_market_opens(self):",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.lifecycle_logger",
        "documentation": {}
    },
    {
        "label": "OptionsHoldToExpiry",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.options_hold_to_expiry",
        "description": "lib.MLTradingBot.lumibot.example_strategies.options_hold_to_expiry",
        "peekOfCode": "class OptionsHoldToExpiry(Strategy):\n    parameters = {\n        \"buy_symbol\": \"SPY\",\n        \"expiry\": datetime(2023, 10, 20),\n    }\n    # =====Overloading lifecycle methods=============\n    def initialize(self):\n        # Set the initial variables or constants\n        # Built in Variables\n        self.sleeptime = \"1D\"",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.options_hold_to_expiry",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.simple_start_single_file",
        "description": "lib.MLTradingBot.lumibot.example_strategies.simple_start_single_file",
        "peekOfCode": "class MyStrategy(Strategy):\n    def initialize(self, symbol=\"\"):\n        # Will make on_trading_iteration() run every 180 minutes\n        self.sleeptime = 180\n        # Custom parameters\n        self.symbol = symbol\n        self.quantity = 1\n        self.side = \"buy\"\n    def on_trading_iteration(self):\n        self.order = self.create_order(self.symbol, self.quantity, self.side)",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.simple_start_single_file",
        "documentation": {}
    },
    {
        "label": "StockBracket",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.stock_bracket",
        "description": "lib.MLTradingBot.lumibot.example_strategies.stock_bracket",
        "peekOfCode": "class StockBracket(Strategy):\n    parameters = {\n        \"buy_symbol\": \"SPY\",\n        \"take_profit_price\": 405,\n        \"stop_loss_price\": 395,\n        \"quantity\": 10,\n    }\n    # =====Overloading lifecycle methods=============\n    def initialize(self):\n        # Set the initial variables or constants",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.stock_bracket",
        "documentation": {}
    },
    {
        "label": "BuyAndHold",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.stock_buy_and_hold",
        "description": "lib.MLTradingBot.lumibot.example_strategies.stock_buy_and_hold",
        "peekOfCode": "class BuyAndHold(Strategy):\n    parameters = {\n        \"buy_symbol\": \"QQQ\",\n    }\n    # =====Overloading lifecycle methods=============\n    def initialize(self):\n        # Set the sleep time to one day (the strategy will run once per day)\n        self.sleeptime = \"1D\"\n    def on_trading_iteration(self):\n        \"\"\"Buys the self.buy_symbol once, then never again\"\"\"",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.stock_buy_and_hold",
        "documentation": {}
    },
    {
        "label": "DiversifiedLeverage",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.stock_diversified_leverage",
        "description": "lib.MLTradingBot.lumibot.example_strategies.stock_diversified_leverage",
        "peekOfCode": "class DiversifiedLeverage(Strategy):\n    # =====Overloading lifecycle methods=============\n    parameters = {\n        \"portfolio\": [\n            {\n                \"symbol\": \"TQQQ\",  # 3x Leveraged Nasdaq\n                \"weight\": 0.20,\n            },\n            {\n                \"symbol\": \"UPRO\",  # 3x Leveraged S&P 500",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.stock_diversified_leverage",
        "documentation": {}
    },
    {
        "label": "LimitAndTrailingStop",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.stock_limit_and_trailing_stops",
        "description": "lib.MLTradingBot.lumibot.example_strategies.stock_limit_and_trailing_stops",
        "peekOfCode": "class LimitAndTrailingStop(Strategy):\n    parameters = {\n        \"buy_symbol\": \"SPY\",\n        \"limit_buy_price\": 403,\n        \"limit_sell_price\": 407,\n        \"trail_percent\": 0.02,\n        \"trail_price\": 7,\n    }\n    # =====Overloading lifecycle methods=============\n    def initialize(self):",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.stock_limit_and_trailing_stops",
        "documentation": {}
    },
    {
        "label": "Momentum",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.stock_momentum",
        "description": "lib.MLTradingBot.lumibot.example_strategies.stock_momentum",
        "peekOfCode": "class Momentum(Strategy):\n    # =====Overloading lifecycle methods=============\n    def initialize(self, symbols=None):\n        # Setting the waiting period (in days)\n        self.period = 2\n        # The counter for the number of days we have been holding the current asset\n        self.counter = 0\n        # There is only one trading operation per day\n        # No need to sleep between iterations\n        self.sleeptime = 0",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.stock_momentum",
        "documentation": {}
    },
    {
        "label": "StockOco",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.stock_oco",
        "description": "lib.MLTradingBot.lumibot.example_strategies.stock_oco",
        "peekOfCode": "class StockOco(Strategy):\n    parameters = {\n        \"buy_symbol\": \"SPY\",\n        \"take_profit_price\": 405,\n        \"stop_loss_price\": 395,\n        \"quantity\": 10,\n    }\n    # =====Overloading lifecycle methods=============\n    def initialize(self):\n        # Set the initial variables or constants",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.stock_oco",
        "documentation": {}
    },
    {
        "label": "Strangle",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.strangle",
        "description": "lib.MLTradingBot.lumibot.example_strategies.strangle",
        "peekOfCode": "class Strangle(Strategy):\n    \"\"\"Strategy Description: Strangle\n    In a long strangle—the more common strategy—the investor simultaneously buys an\n    out-of-the-money call and an out-of-the-money put option. The call option's strike\n    price is higher than the underlying asset's current market price, while the put has a\n    strike price that is lower than the asset's market price. This strategy has large profit\n    potential since the call option has theoretically unlimited upside if the underlying\n    asset rises in price, while the put option can profit if the underlying asset falls.\n    The risk on the trade is limited to the premium paid for the two options.\n    Place the strangle two weeks before earnings announcement.",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.strangle",
        "documentation": {}
    },
    {
        "label": "BrokerTest",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.example_strategies.test_broker_functions",
        "description": "lib.MLTradingBot.lumibot.example_strategies.test_broker_functions",
        "peekOfCode": "class BrokerTest(Strategy):\n    # =====Overloading lifecycle methods=============\n    def initialize(self):\n        # Set the time between trading iterations\n        self.sleeptime = \"20S\"\n        # Set the market to 24/7 since those are the hours for the crypto market\n        self.set_market(\"24/7\")\n        # Record the last trade time\n        self.last_trade_time = None\n        self.strike = 520",
        "detail": "lib.MLTradingBot.lumibot.example_strategies.test_broker_functions",
        "documentation": {}
    },
    {
        "label": "CustomLoggerAdapter",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.strategies._strategy",
        "description": "lib.MLTradingBot.lumibot.strategies._strategy",
        "peekOfCode": "class CustomLoggerAdapter(logging.LoggerAdapter):\n    def __init__(self, logger, extra):\n        super().__init__(logger, extra)\n        self.prefix = f'[{self.extra[\"strategy_name\"]}] '\n    def process(self, msg, kwargs):\n        try:\n            return self.prefix + msg, kwargs\n        except Exception as e:\n            return msg, kwargs\nclass Vars:",
        "detail": "lib.MLTradingBot.lumibot.strategies._strategy",
        "documentation": {}
    },
    {
        "label": "Vars",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.strategies._strategy",
        "description": "lib.MLTradingBot.lumibot.strategies._strategy",
        "peekOfCode": "class Vars:\n    def __init__(self):\n        super().__setattr__('_vars_dict', {})\n    def __getattr__(self, name):\n        try:\n            return self._vars_dict[name]\n        except KeyError:\n            raise AttributeError(f\"'Vars' object has no attribute '{name}'\")\n    def __setattr__(self, name, value):\n        self._vars_dict[name] = value",
        "detail": "lib.MLTradingBot.lumibot.strategies._strategy",
        "documentation": {}
    },
    {
        "label": "_Strategy",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.strategies._strategy",
        "description": "lib.MLTradingBot.lumibot.strategies._strategy",
        "peekOfCode": "class _Strategy:\n    IS_BACKTESTABLE = True\n    _trader = None\n    def __init__(\n        self,\n        broker=None,\n        minutes_before_closing=1,\n        minutes_before_opening=60,\n        minutes_after_closing=0,\n        sleeptime=\"1M\",",
        "detail": "lib.MLTradingBot.lumibot.strategies._strategy",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.strategies.strategy",
        "description": "lib.MLTradingBot.lumibot.strategies.strategy",
        "peekOfCode": "class Strategy(_Strategy):\n    @property\n    def name(self):\n        \"\"\"Returns the name of the strategy.\n        Returns:\n            str: The name of the strategy.\n        Example\n        -------\n        >>> self.log_message(f'Strategy name: {self.name}')\n        \"\"\"",
        "detail": "lib.MLTradingBot.lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "STATS_TABLE_NAME",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.strategies.strategy",
        "description": "lib.MLTradingBot.lumibot.strategies.strategy",
        "peekOfCode": "STATS_TABLE_NAME = \"strategy_tracker\"\nclass Strategy(_Strategy):\n    @property\n    def name(self):\n        \"\"\"Returns the name of the strategy.\n        Returns:\n            str: The name of the strategy.\n        Example\n        -------\n        >>> self.log_message(f'Strategy name: {self.name}')",
        "detail": "lib.MLTradingBot.lumibot.strategies.strategy",
        "documentation": {}
    },
    {
        "label": "StrategyExecutor",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.strategies.strategy_executor",
        "description": "lib.MLTradingBot.lumibot.strategies.strategy_executor",
        "peekOfCode": "class StrategyExecutor(Thread):\n    # Trading events flags\n    NEW_ORDER = \"new\"\n    CANCELED_ORDER = \"canceled\"\n    FILLED_ORDER = \"fill\"\n    PARTIALLY_FILLED_ORDER = \"partial_fill\"\n    def __init__(self, strategy):\n        super(StrategyExecutor, self).__init__()\n        self.daemon = True\n        self.stop_event = Event()",
        "detail": "lib.MLTradingBot.lumibot.strategies.strategy_executor",
        "documentation": {}
    },
    {
        "label": "GK",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "class GK:\n    \"\"\"Garman-Kohlhagen\n\tUsed for pricing European options on currencies\n\tGK([underlyingPrice, strikePrice, domesticRate, foreignRate, \\\n\t\t\tdaysToExpiration], volatility=x, callPrice=y, putPrice=z)\n\teg: \n\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], volatility=20)\n\t\tc.callPrice\t\t\t\t# Returns the call price\n\t\tc.putPrice\t\t\t\t# Returns the put price\n\t\tc.callDelta\t\t\t\t# Returns the call delta",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "BS",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "class BS:\n    \"\"\"Black-Scholes\n\tUsed for pricing European options on stocks without dividends\n\tBS([underlyingPrice, strikePrice, interestRate, daysToExpiration], \\\n\t\t\tvolatility=x, callPrice=y, putPrice=z)\n\teg: \n\t\tc = mibian.BS([1.4565, 1.45, 1, 30], volatility=20)\n\t\tc.callPrice\t\t\t\t# Returns the call price\n\t\tc.putPrice\t\t\t\t# Returns the put price\n\t\tc.callDelta\t\t\t\t# Returns the call delta",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "Me",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "class Me:\n    \"\"\"Merton\n\tUsed for pricing European options on stocks with dividends\n\tMe([underlyingPrice, strikePrice, interestRate, annualDividends, \\\n\t\t\tdaysToExpiration], volatility=x, callPrice=y, putPrice=z)\n\teg: \n\t\tc = mibian.Me([52, 50, 1, 1, 30], volatility=20)\n\t\tc.callPrice\t\t\t\t# Returns the call price\n\t\tc.putPrice\t\t\t\t# Returns the put price\n\t\tc.callDelta\t\t\t\t# Returns the call delta",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "impliedVolatility",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "def impliedVolatility(className, args, callPrice=None, putPrice=None, high=500.0, low=0.0):\n    \"\"\"Returns the estimated implied volatility\"\"\"\n    if callPrice:\n        target = callPrice\n        restimate = eval(className)(args, volatility=high, performance=True).callPrice\n        if restimate < target:\n            return high\n        if args[0] > args[1] + callPrice:\n            return 0.001\n    if putPrice:",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], volatility=20)\n\t\tc.callPrice\t\t\t\t# Returns the call price\n\t\tc.putPrice\t\t\t\t# Returns the put price\n\t\tc.callDelta\t\t\t\t# Returns the call delta\n\t\tc.putDelta\t\t\t\t# Returns the put delta\n\t\tc.callDelta2\t\t\t# Returns the call dual delta\n\t\tc.putDelta2\t\t\t\t# Returns the put dual delta\n\t\tc.callTheta\t\t\t\t# Returns the call theta\n\t\tc.putTheta\t\t\t\t# Returns the put theta\n\t\tc.callRhoD\t\t\t\t# Returns the call domestic rho",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], callPrice=0.0359)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the call price\n\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], putPrice=0.03)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the put price\n\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], callPrice=0.0359, putPrice=0.03)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], putPrice=0.03)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the put price\n\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], callPrice=0.0359, putPrice=0.03)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])\n        self.domesticRate = float(args[2]) / 100\n        self.foreignRate = float(args[3]) / 100",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.GK([1.4565, 1.45, 1, 2, 30], callPrice=0.0359, putPrice=0.03)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])\n        self.domesticRate = float(args[2]) / 100\n        self.foreignRate = float(args[3]) / 100\n        self.daysToExpiration = float(args[4]) / 365\n        for i in [",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.BS([1.4565, 1.45, 1, 30], volatility=20)\n\t\tc.callPrice\t\t\t\t# Returns the call price\n\t\tc.putPrice\t\t\t\t# Returns the put price\n\t\tc.callDelta\t\t\t\t# Returns the call delta\n\t\tc.putDelta\t\t\t\t# Returns the put delta\n\t\tc.callDelta2\t\t\t# Returns the call dual delta\n\t\tc.putDelta2\t\t\t\t# Returns the put dual delta\n\t\tc.callTheta\t\t\t\t# Returns the call theta\n\t\tc.putTheta\t\t\t\t# Returns the put theta\n\t\tc.callRho\t\t\t\t# Returns the call rho",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.BS([1.4565, 1.45, 1, 30], callPrice=0.0359)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the call price\n\t\tc = mibian.BS([1.4565, 1.45, 1, 30], putPrice=0.0306)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the put price\n\t\tc = mibian.BS([1.4565, 1.45, 1, 30], callPrice=0.0359, putPrice=0.0306)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.BS([1.4565, 1.45, 1, 30], putPrice=0.0306)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the put price\n\t\tc = mibian.BS([1.4565, 1.45, 1, 30], callPrice=0.0359, putPrice=0.0306)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])\n        self.interestRate = float(args[2]) / 100\n        self.daysToExpiration = float(args[3]) / 365",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.BS([1.4565, 1.45, 1, 30], callPrice=0.0359, putPrice=0.0306)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])\n        self.interestRate = float(args[2]) / 100\n        self.daysToExpiration = float(args[3]) / 365\n        for i in [\n            \"callPrice\",",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.Me([52, 50, 1, 1, 30], volatility=20)\n\t\tc.callPrice\t\t\t\t# Returns the call price\n\t\tc.putPrice\t\t\t\t# Returns the put price\n\t\tc.callDelta\t\t\t\t# Returns the call delta\n\t\tc.putDelta\t\t\t\t# Returns the put delta\n\t\tc.callDelta2\t\t\t# Returns the call dual delta\n\t\tc.putDelta2\t\t\t\t# Returns the put dual delta\n\t\tc.callTheta\t\t\t\t# Returns the call theta\n\t\tc.putTheta\t\t\t\t# Returns the put theta\n\t\tc.callRho\t\t\t\t# Returns the call rho",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.Me([52, 50, 1, 1, 30], callPrice=0.0359)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the call price\n\t\tc = mibian.Me([52, 50, 1, 1, 30], putPrice=0.0306)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the put price\n\t\tc = mibian.Me([52, 50, 1, 1, 30], callPrice=0.0359, putPrice=0.0306)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.Me([52, 50, 1, 1, 30], putPrice=0.0306)\n\t\tc.impliedVolatility\t\t# Returns the implied volatility from the put price\n\t\tc = mibian.Me([52, 50, 1, 1, 30], callPrice=0.0359, putPrice=0.0306)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])\n        self.interestRate = float(args[2]) / 100\n        self.dividend = float(args[3])",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "description": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "peekOfCode": "\t\tc = mibian.Me([52, 50, 1, 1, 30], callPrice=0.0359, putPrice=0.0306)\n\t\tc.putCallParity\t\t\t# Returns the put-call parity\n\t\"\"\"\n    def __init__(self, args, volatility=None, callPrice=None, putPrice=None, performance=None):\n        self.underlyingPrice = float(args[0])\n        self.strikePrice = float(args[1])\n        self.interestRate = float(args[2]) / 100\n        self.dividend = float(args[3])\n        self.dividendYield = self.dividend / self.underlyingPrice\n        self.daysToExpiration = float(args[4]) / 365",
        "detail": "lib.MLTradingBot.lumibot.tools.black_scholes",
        "documentation": {}
    },
    {
        "label": "CcxtCacheDB",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.ccxt_data_store",
        "description": "lib.MLTradingBot.lumibot.tools.ccxt_data_store",
        "peekOfCode": "class CcxtCacheDB:\n    \"\"\"A ccxt data cache class using duckdb.\n    The data being cached is OHLCV data and is stored in UTC.\n    After importing the data, you'll need to change the timezone if necessary.\n    Create an exchange_id folder in the cache folder, and create a symbol_timeframe.duckdb file under it.\n    ex) Create a BTC_USDT_1m.duckdb file in the binance folder.\n    If there is an existing cache file, it will use it to fetch the data, otherwise it will use ccxt to fetch the data.\n    If a cache file exists, but the requested data range is not in the cache file, the data will be fetched using ccxt.\n    For example, if the cache file contains data from 2023-01-01 to 2023-01-10, and you request data from 2023-01-05 to 2023-01-15,\n    the data from 2023-01-05 to 2023-01-10 will be fetched from the cache file, and the data from 2023-01-11 to 2023-01-15 will be fetched using ccxt.",
        "detail": "lib.MLTradingBot.lumibot.tools.ccxt_data_store",
        "documentation": {}
    },
    {
        "label": "PerfCounters",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.debugers",
        "description": "lib.MLTradingBot.lumibot.tools.debugers",
        "peekOfCode": "class PerfCounters:\n    def __init__(self):\n        self.counters = {}\n    def add_counter(self, name):\n        self.counters[name] = [0, 0]\n    def tic_counter(self, name):\n        self.counters[name][1] = perf_counter()\n    def toc_counter(self, name):\n        toc = perf_counter()\n        counter = self.counters[name]",
        "detail": "lib.MLTradingBot.lumibot.tools.debugers",
        "documentation": {}
    },
    {
        "label": "perf_counters",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.debugers",
        "description": "lib.MLTradingBot.lumibot.tools.debugers",
        "peekOfCode": "perf_counters = PerfCounters()",
        "detail": "lib.MLTradingBot.lumibot.tools.debugers",
        "documentation": {}
    },
    {
        "label": "staticdecorator",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.decorators",
        "description": "lib.MLTradingBot.lumibot.tools.decorators",
        "peekOfCode": "def staticdecorator(func):\n    \"\"\"Makes a function decorated with staticmethod executable\"\"\"\n    return func.__get__(\"\")\ndef call_function_get_frame(func, *args, **kwargs):\n    \"\"\"\n    Calls the function *func* with the specified arguments and keyword\n    arguments and snatches its local frame before it actually executes.\n    \"\"\"\n    frame = None\n    trace = sys.gettrace()",
        "detail": "lib.MLTradingBot.lumibot.tools.decorators",
        "documentation": {}
    },
    {
        "label": "call_function_get_frame",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.decorators",
        "description": "lib.MLTradingBot.lumibot.tools.decorators",
        "peekOfCode": "def call_function_get_frame(func, *args, **kwargs):\n    \"\"\"\n    Calls the function *func* with the specified arguments and keyword\n    arguments and snatches its local frame before it actually executes.\n    \"\"\"\n    frame = None\n    trace = sys.gettrace()\n    def snatch_locals(_frame, name, arg):\n        nonlocal frame\n        if frame is None and name == \"call\":",
        "detail": "lib.MLTradingBot.lumibot.tools.decorators",
        "documentation": {}
    },
    {
        "label": "snatch_locals",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.decorators",
        "description": "lib.MLTradingBot.lumibot.tools.decorators",
        "peekOfCode": "def snatch_locals(store):\n    \"\"\"Snatch a function local variables\n    and store them in store variable\"\"\"\n    def wrapper(func_input):\n        @wraps(func_input)\n        def func_output(*args, **kwargs):\n            global store\n            frame, result = call_function_get_frame(func_input, *args, **kwargs)\n            store = frame.f_locals\n            return result",
        "detail": "lib.MLTradingBot.lumibot.tools.decorators",
        "documentation": {}
    },
    {
        "label": "append_locals",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.decorators",
        "description": "lib.MLTradingBot.lumibot.tools.decorators",
        "peekOfCode": "def append_locals(func_input):\n    \"\"\"Snatch a function local variables\n    and store them in store variable\"\"\"\n    @wraps(func_input)\n    def func_output(*args, **kwargs):\n        frame, result = call_function_get_frame(func_input, *args, **kwargs)\n        if frame is not None:\n            func_output.locals = frame.f_locals\n        else:\n            func_output.locals = None",
        "detail": "lib.MLTradingBot.lumibot.tools.decorators",
        "documentation": {}
    },
    {
        "label": "execute_after",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.decorators",
        "description": "lib.MLTradingBot.lumibot.tools.decorators",
        "peekOfCode": "def execute_after(actions):\n    def decorator_func(input_func):\n        @wraps(input_func)\n        def output_func(*args, **kwargs):\n            input_func(*args, **kwargs)\n            for action in actions:\n                action()\n        return output_func\n    return decorator_func",
        "detail": "lib.MLTradingBot.lumibot.tools.decorators",
        "documentation": {}
    },
    {
        "label": "ComparaisonMixin",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "class ComparaisonMixin:\n    COMPARAISON_PROP = \"timestamp\"\n    def __eq__(self, other):\n        return getattr(self, self.COMPARAISON_PROP) == getattr(other, self.COMPARAISON_PROP)\n    def __ne__(self, other):\n        return getattr(self, self.COMPARAISON_PROP) != getattr(other, self.COMPARAISON_PROP)\n    def __gt__(self, other):\n        return getattr(self, self.COMPARAISON_PROP) > getattr(other, self.COMPARAISON_PROP)\n    def __ge__(self, other):\n        return getattr(self, self.COMPARAISON_PROP) >= getattr(other, self.COMPARAISON_PROP)",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "get_chunks",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def get_chunks(l, chunk_size):\n    chunks = []\n    for i in range(0, len(l), chunk_size):\n        chunks.append(l[i: i + chunk_size])\n    return chunks\ndef deduplicate_sequence(seq, key=\"\"):\n    seen = set()\n    pos = 0\n    if key:\n        get_ref = lambda item: getattr(item, key)",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "deduplicate_sequence",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def deduplicate_sequence(seq, key=\"\"):\n    seen = set()\n    pos = 0\n    if key:\n        get_ref = lambda item: getattr(item, key)\n    else:\n        get_ref = lambda item: item\n    for item in seq:\n        ref = get_ref(item)\n        if ref not in seen:",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def get_trading_days(market=\"NYSE\", start_date=\"1950-01-01\", end_date=None):\n    format_datetime = lambda dt: dt.to_pydatetime().astimezone(LUMIBOT_DEFAULT_PYTZ)\n    start_date = to_datetime_aware(pd.to_datetime(start_date))\n    today = get_lumibot_datetime()\n    # macl's \"24/7\" calendar doesn't return consecutive days, so need to be generated manually.\n    if market == \"24/7\":\n        market_open = pd.date_range(\n            start=start_date, end=end_date or today).to_frame(index=False,name=\"market_open\")\n        market_close = pd.date_range(\n            start=start_date.replace(hour=23,minute=59,second=59,microsecond=999999), ",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "print_progress_bar",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def print_progress_bar(\n    value,\n    start_value,\n    end_value,\n    backtesting_started,\n    file=sys.stdout,\n    length=None,\n    prefix=\"Progress\",\n    suffix=\"\",\n    decimals=2,",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "get_lumibot_datetime",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def get_lumibot_datetime():\n    return dt.datetime.now().astimezone(LUMIBOT_DEFAULT_PYTZ)\ndef to_datetime_aware(dt_in):\n    \"\"\"Convert naive time to datetime aware on default timezone.\"\"\"\n    if not dt_in:\n        return dt_in\n    elif isinstance(dt_in, dt.datetime) and (dt_in.tzinfo is None):\n        return LUMIBOT_DEFAULT_PYTZ.localize(dt_in)\n    elif isinstance(dt_in, dt.datetime) and (dt_in.tzinfo.utcoffset(dt_in) is None):\n        # TODO: This will fail because an exception is thrown if tzinfo is not None.",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "to_datetime_aware",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def to_datetime_aware(dt_in):\n    \"\"\"Convert naive time to datetime aware on default timezone.\"\"\"\n    if not dt_in:\n        return dt_in\n    elif isinstance(dt_in, dt.datetime) and (dt_in.tzinfo is None):\n        return LUMIBOT_DEFAULT_PYTZ.localize(dt_in)\n    elif isinstance(dt_in, dt.datetime) and (dt_in.tzinfo.utcoffset(dt_in) is None):\n        # TODO: This will fail because an exception is thrown if tzinfo is not None.\n        return LUMIBOT_DEFAULT_PYTZ.localize(dt_in)\n    else:",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "parse_symbol",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def parse_symbol(symbol):\n    \"\"\"\n    Parse the given symbol and determine if it's an option or a stock.\n    For options, extract and return the stock symbol, expiration date (as a datetime.date object),\n    type (call or put), and strike price.\n    For stocks, simply return the stock symbol.\n    TODO: Crypto and Forex support\n    \"\"\"\n    # Check that the symbol is a string\n    if not isinstance(symbol, str):",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "create_options_symbol",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def create_options_symbol(stock_symbol, expiration_date, option_type, strike_price):\n    \"\"\"\n    Create an option symbol string from its components.\n    Parameters\n    ----------\n    stock_symbol : str\n        The stock symbol, e.g., 'AAPL'.\n    expiration_date : dt.date or dt.datetime\n        The expiration date of the option.\n    option_type : str",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "parse_timestep_qty_and_unit",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.helpers",
        "description": "lib.MLTradingBot.lumibot.tools.helpers",
        "peekOfCode": "def parse_timestep_qty_and_unit(timestep):\n    \"\"\"\n    Parse the timestep string and return the quantity and unit.\n    Parameters\n    ----------\n    timestep : str\n        The timestep string to parse.\n    Returns\n    -------\n    tuple",
        "detail": "lib.MLTradingBot.lumibot.tools.helpers",
        "documentation": {}
    },
    {
        "label": "total_return",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def total_return(_df):\n    \"\"\"Calculate the cumulative return in a dataframe\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    \"\"\"\n    df = _df.copy()\n    df = df.sort_index(ascending=True)\n    df[\"cum_return\"] = (1 + df[\"return\"]).cumprod()\n    total_ret = df[\"cum_return\"].iloc[-1] - 1\n    return total_ret",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "cagr",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def cagr(_df):\n    \"\"\"Calculate the Compound Annual Growth Rate\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    Example:\n    >>> df = pd.DataFrame({\"return\": [0.1, 0.2, 0.3, 0.4, 0.5]})\n    >>> cagr(df)\n    0.3125\n    \"\"\"\n    df = _df.copy()",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "volatility",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def volatility(_df):\n    \"\"\"Calculate the volatility (standard deviation)\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    \"\"\"\n    df = _df.copy()\n    start = datetime.fromtimestamp(df.index.values[0].astype(\"O\") / 1e9, pytz.UTC)\n    end = datetime.fromtimestamp(df.index.values[-1].astype(\"O\") / 1e9, pytz.UTC)\n    period_years = (end - start).days / 365.25\n    if period_years == 0:",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "sharpe",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def sharpe(_df, risk_free_rate):\n    \"\"\"Calculate the Sharpe Rate, or (CAGR - risk_free_rate) / volatility\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily).\n    risk_free_rate should be either LIBOR, or the shortest possible US Treasury Rate\n    \"\"\"\n    ret = cagr(_df)\n    vol = volatility(_df)\n    if vol == 0:\n        return 0",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "max_drawdown",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def max_drawdown(_df):\n    \"\"\"Calculate the Max Drawdown, or the biggest percentage drop\n    from peak to trough.\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    \"\"\"\n    if _df.shape[0] == 1:\n        return {\"drawdown\": 0, \"date\": _df.index[0]}\n    df = _df.copy()\n    df = df.sort_index(ascending=True)",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "romad",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def romad(_df):\n    \"\"\"Calculate the Return Over Maximum Drawdown (RoMaD)\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    \"\"\"\n    ret = cagr(_df)\n    mdd = max_drawdown(_df)\n    if mdd[\"drawdown\"] == 0:\n        return 0\n    romad = ret / mdd[\"drawdown\"]",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "stats_summary",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def stats_summary(_df, risk_free_rate):\n    return {\n        \"cagr\": cagr(_df),\n        \"volatility\": volatility(_df),\n        \"sharpe\": sharpe(_df, risk_free_rate),\n        \"max_drawdown\": max_drawdown(_df),\n        \"romad\": romad(_df),\n        \"total_return\": total_return(_df),\n    }\ndef performance(_df, risk_free, prefix=\"\"):",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "performance",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def performance(_df, risk_free, prefix=\"\"):\n    \"\"\"Calculate and print out all of our performance indicators\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    \"\"\"\n    cagr_adj = cagr(_df)\n    vol_adj = volatility(_df)\n    sharpe_adj = sharpe(_df, risk_free)\n    maxdown_adj = max_drawdown(_df)\n    romad_adj = romad(_df)",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "get_symbol_returns",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def get_symbol_returns(symbol, start=datetime(1900, 1, 1), end=datetime.now()):\n    \"\"\"Get the returns for a symbol between two dates\n    Parameters\n    ----------\n    symbol : str\n        The symbol to get the returns for\n    start : datetime, optional\n        The start date, by default datetime(1900, 1, 1)\n    end : datetime, optional\n        The end date, by default datetime.now()",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "calculate_returns",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def calculate_returns(symbol, start=datetime(1900, 1, 1), end=datetime.now()):\n    start = to_datetime_aware(start)\n    end = to_datetime_aware(end)\n    benchmark_df = get_symbol_returns(symbol, start, end)\n    risk_free_rate = get_risk_free_rate()\n    performance(benchmark_df, risk_free_rate, symbol)\ndef plot_indicators(\n    plot_file_html=\"indicators.html\",\n    chart_markers_df=None,\n    chart_lines_df=None,",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "plot_indicators",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def plot_indicators(\n    plot_file_html=\"indicators.html\",\n    chart_markers_df=None,\n    chart_lines_df=None,\n    strategy_name=None,\n    show_indicators=True,\n):\n    # If show plot is False, then we don't want to open the plot in the browser\n    if not show_indicators:\n        logger.debug(\"show_indicators is False, not creating the plot file.\")",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "plot_returns",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def plot_returns(\n    strategy_df,\n    strategy_name,\n    benchmark_df,\n    benchmark_name,\n    plot_file_html=\"backtest_result.html\",\n    trades_df=None,\n    show_plot=True,\n    initial_budget=1,\n    # chart_markers_df=None,",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "create_tearsheet",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def create_tearsheet(\n    # =========BY DOV========\n    strategy_df: pd.DataFrame.to_numpy,\n    strat_name: str,\n    tearsheet_file: str,\n    benchmark_df: pd.DataFrame.to_numpy,\n    benchmark_asset,  # This is causing a circular import: Asset,\n    show_tearsheet: bool,\n    save_tearsheet: bool,\n    risk_free_rate: float,",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "get_risk_free_rate",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "def get_risk_free_rate(dt: datetime = None):\n    try:\n        result = yh.get_risk_free_rate(dt=dt)\n    except Exception as e:\n        logging.error(f\"Error getting the risk free rate: {e}\")\n        result = 0\n    return result",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.indicators",
        "description": "lib.MLTradingBot.lumibot.tools.indicators",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef total_return(_df):\n    \"\"\"Calculate the cumulative return in a dataframe\n    The dataframe _df must include a column \"return\" that\n    has the return for that time period (eg. daily)\n    \"\"\"\n    df = _df.copy()\n    df = df.sort_index(ascending=True)\n    df[\"cum_return\"] = (1 + df[\"return\"]).cumprod()\n    total_ret = df[\"cum_return\"].iloc[-1] - 1",
        "detail": "lib.MLTradingBot.lumibot.tools.indicators",
        "documentation": {}
    },
    {
        "label": "warning_time_sleep",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "description": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "peekOfCode": "def warning_time_sleep(sleeptime):\n    global warned_against_calling_time_sleep\n    if warned_against_calling_time_sleep is False:\n        thread_name = currentThread().getName()\n        authorized_threads_with_sleep = [r\"^.*_requesting_data_.*$\"]\n        if not any(\n            [re.match(expr, thread_name) for expr in authorized_threads_with_sleep]\n        ):\n            warned_against_calling_time_sleep = True\n            # TODO: Look into this warning being handled more gracefully. Right now it",
        "detail": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "documentation": {}
    },
    {
        "label": "default_time_sleep",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "description": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "peekOfCode": "default_time_sleep = time.sleep\nwarned_against_calling_time_sleep = False\ndef warning_time_sleep(sleeptime):\n    global warned_against_calling_time_sleep\n    if warned_against_calling_time_sleep is False:\n        thread_name = currentThread().getName()\n        authorized_threads_with_sleep = [r\"^.*_requesting_data_.*$\"]\n        if not any(\n            [re.match(expr, thread_name) for expr in authorized_threads_with_sleep]\n        ):",
        "detail": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "documentation": {}
    },
    {
        "label": "warned_against_calling_time_sleep",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "description": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "peekOfCode": "warned_against_calling_time_sleep = False\ndef warning_time_sleep(sleeptime):\n    global warned_against_calling_time_sleep\n    if warned_against_calling_time_sleep is False:\n        thread_name = currentThread().getName()\n        authorized_threads_with_sleep = [r\"^.*_requesting_data_.*$\"]\n        if not any(\n            [re.match(expr, thread_name) for expr in authorized_threads_with_sleep]\n        ):\n            warned_against_calling_time_sleep = True",
        "detail": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "documentation": {}
    },
    {
        "label": "time.sleep",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "description": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "peekOfCode": "time.sleep = warning_time_sleep",
        "detail": "lib.MLTradingBot.lumibot.tools.lumibot_time",
        "documentation": {}
    },
    {
        "label": "day_deduplicate",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.pandas",
        "description": "lib.MLTradingBot.lumibot.tools.pandas",
        "peekOfCode": "def day_deduplicate(df_):\n    df_copy = df_.copy()\n    df_copy = df_copy.groupby(level=0).head(1)\n    return df_copy\ndef is_daily_data(df_):\n    times = pd.Series(df_.index).apply(lambda x: x.time()).unique()\n    if len(times) == 1 and times[0] == time(0, 0):\n        return True\n    return False\ndef fill_void(df_, interval, end):",
        "detail": "lib.MLTradingBot.lumibot.tools.pandas",
        "documentation": {}
    },
    {
        "label": "is_daily_data",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.pandas",
        "description": "lib.MLTradingBot.lumibot.tools.pandas",
        "peekOfCode": "def is_daily_data(df_):\n    times = pd.Series(df_.index).apply(lambda x: x.time()).unique()\n    if len(times) == 1 and times[0] == time(0, 0):\n        return True\n    return False\ndef fill_void(df_, interval, end):\n    n_rows = len(df_.index)\n    missing_lines = pd.DataFrame()\n    for index, row in df_.iterrows():\n        position = df_.index.get_loc(index)",
        "detail": "lib.MLTradingBot.lumibot.tools.pandas",
        "documentation": {}
    },
    {
        "label": "fill_void",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.pandas",
        "description": "lib.MLTradingBot.lumibot.tools.pandas",
        "peekOfCode": "def fill_void(df_, interval, end):\n    n_rows = len(df_.index)\n    missing_lines = pd.DataFrame()\n    for index, row in df_.iterrows():\n        position = df_.index.get_loc(index)\n        if position + 1 == n_rows:\n            if index < end:\n                n_missing = (end - index) // interval\n                missing_days = [index + (i + 1) * interval for i in range(n_missing)]\n                missing_lines = pd.concat(",
        "detail": "lib.MLTradingBot.lumibot.tools.pandas",
        "documentation": {}
    },
    {
        "label": "print_full_pandas_dataframes",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.pandas",
        "description": "lib.MLTradingBot.lumibot.tools.pandas",
        "peekOfCode": "def print_full_pandas_dataframes():\n    \"\"\"\n    Show the whole dataframe when printing pandas dataframes\n    \"\"\"\n    pd.set_option('display.max_columns', None)\n    pd.set_option('display.max_colwidth', None)\n    pd.set_option('display.max_rows', None)\n    pd.set_option('display.width', 1000)\ndef set_pandas_float_precision(precision: int = 5):\n    format_str = '{:.' + str(precision) + 'f}'",
        "detail": "lib.MLTradingBot.lumibot.tools.pandas",
        "documentation": {}
    },
    {
        "label": "set_pandas_float_precision",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.pandas",
        "description": "lib.MLTradingBot.lumibot.tools.pandas",
        "peekOfCode": "def set_pandas_float_precision(precision: int = 5):\n    format_str = '{:.' + str(precision) + 'f}'\n    pd.set_option('display.float_format', format_str.format)\ndef prettify_dataframe_with_decimals(df: pd.DataFrame, decimal_places: int = 5) -> str:\n    def decimal_formatter(x):\n        if isinstance(x, Decimal):\n            return f\"{x:.{decimal_places}f}\"\n        return x\n    return df.to_string(formatters={col: decimal_formatter for col in df.columns})",
        "detail": "lib.MLTradingBot.lumibot.tools.pandas",
        "documentation": {}
    },
    {
        "label": "prettify_dataframe_with_decimals",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.pandas",
        "description": "lib.MLTradingBot.lumibot.tools.pandas",
        "peekOfCode": "def prettify_dataframe_with_decimals(df: pd.DataFrame, decimal_places: int = 5) -> str:\n    def decimal_formatter(x):\n        if isinstance(x, Decimal):\n            return f\"{x:.{decimal_places}f}\"\n        return x\n    return df.to_string(formatters={col: decimal_formatter for col in df.columns})",
        "detail": "lib.MLTradingBot.lumibot.tools.pandas",
        "documentation": {}
    },
    {
        "label": "PolygonClient",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "class PolygonClient(RESTClient):\n    ''' Rate Limited RESTClient with factory method '''\n    WAIT_SECONDS_RETRY = 60\n    @classmethod\n    def create(cls, *args, **kwargs) -> RESTClient:\n        \"\"\"\n        Factory method to create a RESTClient or PolygonClient instance.\n        The method uses environment variables to determine default values for the API key \n        and subscription type. If the `api_key` is not provided in `kwargs`, it defaults \n        to the value of the `POLYGON_API_KEY` environment variable.",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "get_cached_schedule",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def get_cached_schedule(cal, start_date, end_date, buffer_days=30):\n    \"\"\"\n    Fetch schedule with a buffer at the end. This is done to reduce the number of calls to the calendar API (which is slow).\n    \"\"\"\n    global buffered_schedules\n    buffer_end = end_date + timedelta(days=buffer_days)\n    cache_key = (cal.name, start_date, end_date)\n    # Check if the required range is in the schedule cache\n    if cache_key in schedule_cache:\n        return schedule_cache[cache_key]",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "get_price_data_from_polygon",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def get_price_data_from_polygon(\n    api_key: str,\n    asset: Asset,\n    start: datetime,\n    end: datetime,\n    timespan: str = \"minute\",\n    quote_asset: Asset = None,\n    force_cache_update: bool = False,\n):\n    \"\"\"",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "validate_cache",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def validate_cache(force_cache_update: bool, asset: Asset, cache_file: Path, api_key: str):\n    \"\"\"\n    If the list of splits for a stock have changed then we need to invalidate its cache\n    because all of the prices will have changed (because we're using split adjusted prices).\n    Get the splits data from Polygon only once per day per stock.\n    Use the timestamp on the splits feather file to determine if we need to get the splits again.\n    When invalidating we delete the cache file and return force_cache_update=True too.\n    \"\"\"\n    if asset.asset_type not in [Asset.AssetType.STOCK, Asset.AssetType.OPTION]:\n        return force_cache_update",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "get_trading_dates",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def get_trading_dates(asset: Asset, start: datetime, end: datetime):\n    \"\"\"\n    Get a list of trading days for the asset between the start and end dates\n    Parameters\n    ----------\n    asset : Asset\n        Asset we are getting data for\n    start : datetime\n        Start date for the data requested\n    end : datetime",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "get_polygon_symbol",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def get_polygon_symbol(asset, polygon_client, quote_asset=None):\n    \"\"\"\n    Get the symbol for the asset in a format that Polygon will understand\n    Parameters\n    ----------\n    asset : Asset\n        Asset we are getting data for\n    polygon_client : RESTClient\n        The RESTClient connection for Polygon Stock-Equity API\n    quote_asset : Asset",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "build_cache_filename",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def build_cache_filename(asset: Asset, timespan: str):\n    \"\"\"Helper function to create the cache filename for a given asset and timespan\"\"\"\n    lumibot_polygon_cache_folder = Path(LUMIBOT_CACHE_FOLDER) / \"polygon\"\n    # If It's an option then also add the expiration date, strike price and right to the filename\n    if asset.asset_type == \"option\":\n        if asset.expiration is None:\n            raise ValueError(f\"Expiration date is required for option {asset} but it is None\")\n        # Make asset.expiration datetime into a string like \"YYMMDD\"\n        expiry_string = asset.expiration.strftime(\"%y%m%d\")\n        uniq_str = f\"{asset.symbol}_{expiry_string}_{asset.strike}_{asset.right}\"",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "get_missing_dates",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def get_missing_dates(df_all, asset, start, end):\n    \"\"\"\n    Check if we have data for the full range\n    Later Query to Polygon will pad an extra full day to start/end dates so that there should never\n    be any gap with intraday data missing.\n    Parameters\n    ----------\n    df_all : pd.DataFrame\n        Data loaded from the cache file\n    asset : Asset",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "load_cache",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def load_cache(cache_file):\n    \"\"\"Load the data from the cache file and return a DataFrame with a DateTimeIndex\"\"\"\n    df_feather = pd.read_feather(cache_file)\n    # Set the 'datetime' column as the index of the DataFrame\n    df_feather.set_index(\"datetime\", inplace=True)\n    df_feather.index = pd.to_datetime(\n        df_feather.index\n    )  # TODO: Is there some way to speed this up? It takes several times longer than just reading the feather file\n    df_feather = df_feather.sort_index()\n    # Check if the index is already timezone aware",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "update_cache",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def update_cache(cache_file, df_all, missing_dates=None):\n    \"\"\"Update the cache file with the new data.  Missing dates are added as empty (all NaN) \n    rows before it is saved to the cache file.\n    Parameters\n    ----------\n    cache_file : Path\n        The path to the cache file\n    df_all : pd.DataFrame\n        The DataFrame with the data we want to cache\n    missing_dates : list[datetime.date]",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "update_polygon_data",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "def update_polygon_data(df_all, result):\n    \"\"\"\n    Update the DataFrame with the new data from Polygon\n    Parameters\n    ----------\n    df_all : pd.DataFrame\n        A DataFrame with the data we already have\n    result : list\n        A List of dictionaries with the new data from Polygon\n        Format: [{'o': 1.0, 'h': 2.0, 'l': 3.0, 'c': 4.0, 'v': 5.0, 't': 116120000000}]",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "MAX_POLYGON_DAYS",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "MAX_POLYGON_DAYS = 30\n# Define a cache dictionary to store schedules and a global dictionary for buffered schedules\nschedule_cache = {}\nbuffered_schedules = {}\ndef get_cached_schedule(cal, start_date, end_date, buffer_days=30):\n    \"\"\"\n    Fetch schedule with a buffer at the end. This is done to reduce the number of calls to the calendar API (which is slow).\n    \"\"\"\n    global buffered_schedules\n    buffer_end = end_date + timedelta(days=buffer_days)",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "schedule_cache",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "schedule_cache = {}\nbuffered_schedules = {}\ndef get_cached_schedule(cal, start_date, end_date, buffer_days=30):\n    \"\"\"\n    Fetch schedule with a buffer at the end. This is done to reduce the number of calls to the calendar API (which is slow).\n    \"\"\"\n    global buffered_schedules\n    buffer_end = end_date + timedelta(days=buffer_days)\n    cache_key = (cal.name, start_date, end_date)\n    # Check if the required range is in the schedule cache",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "buffered_schedules",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "description": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "peekOfCode": "buffered_schedules = {}\ndef get_cached_schedule(cal, start_date, end_date, buffer_days=30):\n    \"\"\"\n    Fetch schedule with a buffer at the end. This is done to reduce the number of calls to the calendar API (which is slow).\n    \"\"\"\n    global buffered_schedules\n    buffer_end = end_date + timedelta(days=buffer_days)\n    cache_key = (cal.name, start_date, end_date)\n    # Check if the required range is in the schedule cache\n    if cache_key in schedule_cache:",
        "detail": "lib.MLTradingBot.lumibot.tools.polygon_helper",
        "documentation": {}
    },
    {
        "label": "get_price_data",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_price_data(\n    username: str,\n    password: str,\n    asset: Asset,\n    start: datetime,\n    end: datetime,\n    timespan: str = \"minute\",\n    quote_asset: Asset = None,\n    dt=None,\n    datastyle: str = \"ohlc\"",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "get_trading_dates",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_trading_dates(asset: Asset, start: datetime, end: datetime):\n    \"\"\"\n    Get a list of trading days for the asset between the start and end dates\n    Parameters\n    ----------\n    asset : Asset\n        Asset we are getting data for\n    start : datetime\n        Start date for the data requested\n    end : datetime",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "build_cache_filename",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def build_cache_filename(asset: Asset, timespan: str, datastyle: str = \"ohlc\"):\n    \"\"\"Helper function to create the cache filename for a given asset and timespan\"\"\"\n    lumibot_cache_folder = Path(LUMIBOT_CACHE_FOLDER) / CACHE_SUBFOLDER\n    # If It's an option then also add the expiration date, strike price and right to the filename\n    if asset.asset_type == \"option\":\n        if asset.expiration is None:\n            raise ValueError(f\"Expiration date is required for option {asset} but it is None\")\n        # Make asset.expiration datetime into a string like \"YYMMDD\"\n        expiry_string = asset.expiration.strftime(\"%y%m%d\")\n        uniq_str = f\"{asset.symbol}_{expiry_string}_{asset.strike}_{asset.right}\"",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "get_missing_dates",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_missing_dates(df_all, asset, start, end):\n    \"\"\"\n    Check if we have data for the full range\n    Later Query to Polygon will pad an extra full day to start/end dates so that there should never\n    be any gap with intraday data missing.\n    Parameters\n    ----------\n    df_all : pd.DataFrame\n        Data loaded from the cache file\n    asset : Asset",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "load_cache",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def load_cache(cache_file):\n    \"\"\"Load the data from the cache file and return a DataFrame with a DateTimeIndex\"\"\"\n    df_feather = pd.read_feather(cache_file)\n    # Set the 'datetime' column as the index of the DataFrame\n    df_feather.set_index(\"datetime\", inplace=True)\n    df_feather.index = pd.to_datetime(\n        df_feather.index\n    )  # TODO: Is there some way to speed this up? It takes several times longer than just reading the feather file\n    df_feather = df_feather.sort_index()\n    # Check if the index is already timezone aware",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "update_cache",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def update_cache(cache_file, df_all, df_feather):\n    \"\"\"Update the cache file with the new data\"\"\"\n    # Check if df_all is different from df_feather (if df_feather exists)\n    if df_all is not None and len(df_all) > 0:\n        # Check if the dataframes are the same\n        if df_all.equals(df_feather):\n            return\n        # Create the directory if it doesn't exist\n        cache_file.parent.mkdir(parents=True, exist_ok=True)\n        # Reset the index to convert DatetimeIndex to a regular column",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "update_df",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def update_df(df_all, result):\n    \"\"\"\n    Update the DataFrame with the new data from ThetaData\n    Parameters\n    ----------\n    df_all : pd.DataFrame\n        A DataFrame with the data we already have\n    result : pandas DataFrame\n        A List of dictionaries with the new data from Polygon\n        Format:",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "start_theta_data_client",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def start_theta_data_client(username: str, password: str):\n    # First try shutting down any existing connection\n    try:\n        requests.get(f\"{BASE_URL}/v2/system/terminal/shutdown\")\n    except Exception:\n        pass\n    client = ThetaClient(username=username, passwd=password)\n    time.sleep(1)\n    return client\ndef check_connection(username: str, password: str):",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "check_connection",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def check_connection(username: str, password: str):\n    # Do endless while loop and check if connected every 100 milliseconds\n    MAX_RETRIES = 15\n    counter = 0\n    client = None\n    connected = False\n    while True:\n        try:\n            time.sleep(0.5)\n            res = requests.get(f\"{BASE_URL}/v2/system/mdds/status\", timeout=1)",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "get_request",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_request(url: str, headers: dict, querystring: dict, username: str, password: str):\n    counter = 0\n    while True:\n        try:\n            response = requests.get(url, headers=headers, params=querystring)\n            # If status code is not 200, then we are not connected\n            if response.status_code != 200:\n                check_connection(username=username, password=password)\n            else:\n                json_resp = response.json()",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "get_historical_data",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_historical_data(asset: Asset, start_dt: datetime, end_dt: datetime, ivl: int, username: str, password: str, datastyle:str = \"ohlc\"):\n    \"\"\"\n    Get data from ThetaData\n    Parameters\n    ----------\n    asset : Asset\n        The asset we are getting data for\n    start_dt : datetime\n        The start date/time for the data we want\n    end_dt : datetime",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "get_expirations",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_expirations(username: str, password: str, ticker: str, after_date: date):\n    \"\"\"\n    Get a list of expiration dates for the given ticker\n    Parameters\n    ----------\n    username : str\n        Your ThetaData username\n    password : str\n        Your ThetaData password\n    ticker : str",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "get_strikes",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "def get_strikes(username: str, password: str, ticker: str, expiration: datetime):\n    \"\"\"\n    Get a list of strike prices for the given ticker and expiration date\n    Parameters\n    ----------\n    username : str\n        Your ThetaData username\n    password : str\n        Your ThetaData password\n    ticker : str",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "WAIT_TIME",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "WAIT_TIME = 60\nMAX_DAYS = 30\nCACHE_SUBFOLDER = \"thetadata\"\nBASE_URL = \"http://127.0.0.1:25510\"\ndef get_price_data(\n    username: str,\n    password: str,\n    asset: Asset,\n    start: datetime,\n    end: datetime,",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "MAX_DAYS",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "MAX_DAYS = 30\nCACHE_SUBFOLDER = \"thetadata\"\nBASE_URL = \"http://127.0.0.1:25510\"\ndef get_price_data(\n    username: str,\n    password: str,\n    asset: Asset,\n    start: datetime,\n    end: datetime,\n    timespan: str = \"minute\",",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "CACHE_SUBFOLDER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "CACHE_SUBFOLDER = \"thetadata\"\nBASE_URL = \"http://127.0.0.1:25510\"\ndef get_price_data(\n    username: str,\n    password: str,\n    asset: Asset,\n    start: datetime,\n    end: datetime,\n    timespan: str = \"minute\",\n    quote_asset: Asset = None,",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "description": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "peekOfCode": "BASE_URL = \"http://127.0.0.1:25510\"\ndef get_price_data(\n    username: str,\n    password: str,\n    asset: Asset,\n    start: datetime,\n    end: datetime,\n    timespan: str = \"minute\",\n    quote_asset: Asset = None,\n    dt=None,",
        "detail": "lib.MLTradingBot.lumibot.tools.thetadata_helper",
        "documentation": {}
    },
    {
        "label": "check_numeric",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.types",
        "description": "lib.MLTradingBot.lumibot.tools.types",
        "peekOfCode": "def check_numeric(\n    input, type, error_message, positive=True, strict=False, nullable=False, ratio=False, allow_negative=True\n):\n    if nullable and input is None:\n        return None\n    error = ValueError(error_message)\n    if isinstance(input, str) or (type == Decimal and not isinstance(input, Decimal)):\n        try:\n            input = type(input)\n        except:",
        "detail": "lib.MLTradingBot.lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "check_positive",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.types",
        "description": "lib.MLTradingBot.lumibot.tools.types",
        "peekOfCode": "def check_positive(input, type, custom_message=\"\", strict=False):\n    if strict:\n        error_message = \"%r is not a strictly positive value.\" % input\n    else:\n        error_message = \"%r is not a positive value.\" % input\n    if custom_message:\n        error_message = f\"{error_message} {custom_message}\"\n    result = check_numeric(\n        input,\n        type,",
        "detail": "lib.MLTradingBot.lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "check_quantity",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.types",
        "description": "lib.MLTradingBot.lumibot.tools.types",
        "peekOfCode": "def check_quantity(quantity, custom_message=\"\"):\n    error_message = \"%r is not a positive Decimal.\" % quantity\n    if custom_message:\n        error_message = f\"{error_message} {custom_message}\"\n    quantity = Decimal(quantity)\n    result = check_numeric(\n        quantity,\n        Decimal,\n        error_message,\n        strict=True,",
        "detail": "lib.MLTradingBot.lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "check_price",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.tools.types",
        "description": "lib.MLTradingBot.lumibot.tools.types",
        "peekOfCode": "def check_price(price, custom_message=\"\", nullable=True, allow_negative=True):\n    error_message = \"%r is not a valid price.\" % price\n    if custom_message:\n        error_message = f\"{error_message} {custom_message}\"\n    result = check_numeric(price, float, error_message, strict=True, nullable=nullable, allow_negative=allow_negative)\n    return result",
        "detail": "lib.MLTradingBot.lumibot.tools.types",
        "documentation": {}
    },
    {
        "label": "_YahooData",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "description": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "peekOfCode": "class _YahooData:\n    def __init__(self, symbol, type, data):\n        self.symbol = symbol\n        self.type = type.lower()\n        self.data = data\n        self.file_name = f\"{symbol}_{type.lower()}.pickle\"\n    def is_up_to_date(self, last_needed_datetime=None):\n        if last_needed_datetime is None:\n            last_needed_datetime = get_lumibot_datetime()\n        if self.type == '1d':",
        "detail": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "documentation": {}
    },
    {
        "label": "YahooHelper",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "description": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "peekOfCode": "class YahooHelper:\n    # =========Internal initialization parameters and methods============\n    CACHING_ENABLED = False\n    LUMIBOT_YAHOO_CACHE_FOLDER = os.path.join(LUMIBOT_CACHE_FOLDER, \"yahoo\")\n    if not os.path.exists(LUMIBOT_YAHOO_CACHE_FOLDER):\n        try:\n            os.makedirs(LUMIBOT_YAHOO_CACHE_FOLDER)\n            CACHING_ENABLED = True\n        except Exception as e:\n            pass",
        "detail": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "documentation": {}
    },
    {
        "label": "INFO_DATA",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "description": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "peekOfCode": "INFO_DATA = \"info\"\nclass _YahooData:\n    def __init__(self, symbol, type, data):\n        self.symbol = symbol\n        self.type = type.lower()\n        self.data = data\n        self.file_name = f\"{symbol}_{type.lower()}.pickle\"\n    def is_up_to_date(self, last_needed_datetime=None):\n        if last_needed_datetime is None:\n            last_needed_datetime = get_lumibot_datetime()",
        "detail": "lib.MLTradingBot.lumibot.tools.yahoo_helper",
        "documentation": {}
    },
    {
        "label": "DebugLogTrader",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.traders.debug_log_trader",
        "description": "lib.MLTradingBot.lumibot.traders.debug_log_trader",
        "peekOfCode": "class DebugLogTrader(Trader):\n    \"\"\"I'm just a trader instance with debug turned on by default\"\"\"\n    def __init__(self, logfile=\"\", backtest=False, debug=True, strategies=None, quiet_logs=False):\n        super().__init__(logfile=logfile, backtest=backtest, debug=debug, strategies=strategies, quiet_logs=quiet_logs)",
        "detail": "lib.MLTradingBot.lumibot.traders.debug_log_trader",
        "documentation": {}
    },
    {
        "label": "Trader",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.traders.trader",
        "description": "lib.MLTradingBot.lumibot.traders.trader",
        "peekOfCode": "class Trader:\n    def __init__(self, logfile=\"\", backtest=False, debug=False, strategies=None, quiet_logs=False):\n        \"\"\"\n        Parameters\n        ----------\n        logfile: str\n            The path to the logfile. If not specified, the logfile will be saved in the user's log directory.\n        backtest: bool\n            Whether to run the strategies in backtest mode or not. This is used as a safety check to make sure you\n            don't mix backtesting and live strategies.",
        "detail": "lib.MLTradingBot.lumibot.traders.trader",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.traders.trader",
        "description": "lib.MLTradingBot.lumibot.traders.trader",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Trader:\n    def __init__(self, logfile=\"\", backtest=False, debug=False, strategies=None, quiet_logs=False):\n        \"\"\"\n        Parameters\n        ----------\n        logfile: str\n            The path to the logfile. If not specified, the logfile will be saved in the user's log directory.\n        backtest: bool\n            Whether to run the strategies in backtest mode or not. This is used as a safety check to make sure you",
        "detail": "lib.MLTradingBot.lumibot.traders.trader",
        "documentation": {}
    },
    {
        "label": "CustomStream",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.trading_builtins.custom_stream",
        "description": "lib.MLTradingBot.lumibot.trading_builtins.custom_stream",
        "peekOfCode": "class CustomStream:\n    def __init__(self):\n        self._queue = Queue(100)\n        self._actions_mapping = {}\n    def dispatch(self, event, wait_until_complete=False, **payload):\n        self._queue.put((event, payload), block=False)\n        # Primarily used for backtesting. If wait_until_complete is True, the function will block until the queue is\n        # empty. This is useful for ensuring that all events have been processed before moving on to the next step.\n        if wait_until_complete:\n            self._queue.join()",
        "detail": "lib.MLTradingBot.lumibot.trading_builtins.custom_stream",
        "documentation": {}
    },
    {
        "label": "PollingStream",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.trading_builtins.custom_stream",
        "description": "lib.MLTradingBot.lumibot.trading_builtins.custom_stream",
        "peekOfCode": "class PollingStream(CustomStream):\n    \"\"\"\n    A stream that polls an API endpoint at a regular interval and dispatches events based on the response. It is\n    required that a polling action is registered with the stream using add_action(). The polling action should make a\n    request to the API and dispatch events based on the response. A user can also dispatch events to the stream manually\n    using dispatch(), including the poll event to force an off-cycle poll action to occur.\n    \"\"\"\n    POLL_EVENT = \"poll\"\n    def __init__(self, polling_interval=5.0):\n        \"\"\"",
        "detail": "lib.MLTradingBot.lumibot.trading_builtins.custom_stream",
        "documentation": {}
    },
    {
        "label": "SafeList",
        "kind": 6,
        "importPath": "lib.MLTradingBot.lumibot.trading_builtins.safe_list",
        "description": "lib.MLTradingBot.lumibot.trading_builtins.safe_list",
        "peekOfCode": "class SafeList:\n    def __init__(self, lock, initial=None):\n        if not isinstance(lock, rlock_type):\n            raise ValueError(\"lock must be a threading.RLock\")\n        if initial is None:\n            initial = []\n        self.__lock = lock\n        self.__items = initial\n    def __repr__(self):\n        return repr(self.__items)",
        "detail": "lib.MLTradingBot.lumibot.trading_builtins.safe_list",
        "documentation": {}
    },
    {
        "label": "find_and_load_dotenv",
        "kind": 2,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "def find_and_load_dotenv(base_dir) -> bool:\n    for root, dirs, files in os.walk(base_dir):\n        logger.debug(f\"Checking {root} for .env file\")\n        if '.env' in files:\n            dotenv_path = os.path.join(root, '.env')\n            load_dotenv(dotenv_path)\n            # Create a colored message for the log using termcolor\n            colored_message = termcolor.colored(f\".env file loaded from: {dotenv_path}\", \"green\")\n            logger.info(colored_message)\n            return True",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef find_and_load_dotenv(base_dir) -> bool:\n    for root, dirs, files in os.walk(base_dir):\n        logger.debug(f\"Checking {root} for .env file\")\n        if '.env' in files:\n            dotenv_path = os.path.join(root, '.env')\n            load_dotenv(dotenv_path)\n            # Create a colored message for the log using termcolor\n            colored_message = termcolor.colored(f\".env file loaded from: {dotenv_path}\", \"green\")\n            logger.info(colored_message)",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "script_dir",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))\nlogger.debug(f\"script_dir: {script_dir}\")\nfound_dotenv = find_and_load_dotenv(script_dir)\nif not found_dotenv:\n    # Get the root directory of the project\n    cwd_dir = os.getcwd()\n    logger.debug(f\"cwd_dir: {cwd_dir}\")\n    found_dotenv = find_and_load_dotenv(cwd_dir)\n# If no .env file was found, print a warning message\nif not found_dotenv:",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "found_dotenv",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "found_dotenv = find_and_load_dotenv(script_dir)\nif not found_dotenv:\n    # Get the root directory of the project\n    cwd_dir = os.getcwd()\n    logger.debug(f\"cwd_dir: {cwd_dir}\")\n    found_dotenv = find_and_load_dotenv(cwd_dir)\n# If no .env file was found, print a warning message\nif not found_dotenv:\n    # Create a colored message for the log using termcolor\n    colored_message = termcolor.colored(\"No .env file found. This is ok if you are using environment variables or secrets (like on Replit, AWS, etc), but if you are not, please create a .env file in the root directory of the project.\", \"yellow\")",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "is_backtesting",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "is_backtesting = os.environ.get(\"IS_BACKTESTING\")\nif not is_backtesting or is_backtesting.lower() == \"false\":\n    IS_BACKTESTING = False\nelif is_backtesting.lower() == \"true\":\n    IS_BACKTESTING = True\nelse:\n    # Log a warning if the value is not a boolean\n    colored_message = termcolor.colored(f\"IS_BACKTESTING must be set to 'true' or 'false'. Got '{is_backtesting}'. Defaulting to False.\", \"yellow\")\n    logger.warning(colored_message)\n    IS_BACKTESTING = False",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "hide_trades",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "hide_trades = os.environ.get(\"HIDE_TRADES\")\nif not hide_trades or hide_trades.lower() == \"false\":\n    HIDE_TRADES = False\nelif hide_trades.lower() == \"true\":\n    HIDE_TRADES = True\nelse:\n    # Log a warning if the value is not a boolean\n    colored_message = termcolor.colored(f\"HIDE_TRADES must be set to 'true' or 'false'. Got '{hide_trades}'. Defaulting to False.\", \"yellow\")\n    logger.warning(colored_message)\n    HIDE_TRADES = False",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "hide_positions",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "hide_positions = os.environ.get(\"HIDE_POSITIONS\")\nif not hide_positions or hide_positions.lower() == \"false\":\n    HIDE_POSITIONS = False\nelif hide_positions.lower() == \"true\":\n    HIDE_POSITIONS = True\nelse:\n    # Log a warning if the value is not a boolean\n    colored_message = termcolor.colored(f\"HIDE_POSITIONS must be set to 'true' or 'false'. Got '{hide_positions}'. Defaulting to False.\", \"yellow\")\n    logger.warning(colored_message)\n    HIDE_POSITIONS = False",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "STRATEGY_NAME",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "STRATEGY_NAME = os.environ.get(\"STRATEGY_NAME\")\n# Market to be traded\nMARKET = os.environ.get(\"MARKET\")\n# Live trading configuration (if applicable)\nLIVE_CONFIG = os.environ.get(\"LIVE_CONFIG\")\n# Discord credentials\nDISCORD_WEBHOOK_URL = os.environ.get(\"DISCORD_WEBHOOK_URL\")\n# Get SHOW_PLOT and SHOW_INDICATORS from the environment variables, default to True\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", \"True\") == \"True\"\nSHOW_INDICATORS = os.environ.get(\"SHOW_INDICATORS\", \"True\") == \"True\"",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "MARKET",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "MARKET = os.environ.get(\"MARKET\")\n# Live trading configuration (if applicable)\nLIVE_CONFIG = os.environ.get(\"LIVE_CONFIG\")\n# Discord credentials\nDISCORD_WEBHOOK_URL = os.environ.get(\"DISCORD_WEBHOOK_URL\")\n# Get SHOW_PLOT and SHOW_INDICATORS from the environment variables, default to True\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", \"True\") == \"True\"\nSHOW_INDICATORS = os.environ.get(\"SHOW_INDICATORS\", \"True\") == \"True\"\nSHOW_TEARSHEET = os.environ.get(\"SHOW_TEARSHEET\", \"True\") == \"True\"\n# Set DB_CONNECTION_STR to None by default",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "LIVE_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "LIVE_CONFIG = os.environ.get(\"LIVE_CONFIG\")\n# Discord credentials\nDISCORD_WEBHOOK_URL = os.environ.get(\"DISCORD_WEBHOOK_URL\")\n# Get SHOW_PLOT and SHOW_INDICATORS from the environment variables, default to True\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", \"True\") == \"True\"\nSHOW_INDICATORS = os.environ.get(\"SHOW_INDICATORS\", \"True\") == \"True\"\nSHOW_TEARSHEET = os.environ.get(\"SHOW_TEARSHEET\", \"True\") == \"True\"\n# Set DB_CONNECTION_STR to None by default\nDB_CONNECTION_STR = None\n# Add a warning if ACCOUNT_HISTORY_DB_CONNECTION_STR is set because it is now replaced by DB_CONNECTION_STR",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "DISCORD_WEBHOOK_URL",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "DISCORD_WEBHOOK_URL = os.environ.get(\"DISCORD_WEBHOOK_URL\")\n# Get SHOW_PLOT and SHOW_INDICATORS from the environment variables, default to True\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", \"True\") == \"True\"\nSHOW_INDICATORS = os.environ.get(\"SHOW_INDICATORS\", \"True\") == \"True\"\nSHOW_TEARSHEET = os.environ.get(\"SHOW_TEARSHEET\", \"True\") == \"True\"\n# Set DB_CONNECTION_STR to None by default\nDB_CONNECTION_STR = None\n# Add a warning if ACCOUNT_HISTORY_DB_CONNECTION_STR is set because it is now replaced by DB_CONNECTION_STR\nif os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\"):\n    print(\"ACCOUNT_HISTORY_DB_CONNECTION_STR is deprecated and will be removed in a future version. Please use DB_CONNECTION_STR instead.\")",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "SHOW_PLOT",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "SHOW_PLOT = os.environ.get(\"SHOW_PLOT\", \"True\") == \"True\"\nSHOW_INDICATORS = os.environ.get(\"SHOW_INDICATORS\", \"True\") == \"True\"\nSHOW_TEARSHEET = os.environ.get(\"SHOW_TEARSHEET\", \"True\") == \"True\"\n# Set DB_CONNECTION_STR to None by default\nDB_CONNECTION_STR = None\n# Add a warning if ACCOUNT_HISTORY_DB_CONNECTION_STR is set because it is now replaced by DB_CONNECTION_STR\nif os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\"):\n    print(\"ACCOUNT_HISTORY_DB_CONNECTION_STR is deprecated and will be removed in a future version. Please use DB_CONNECTION_STR instead.\")\n    DB_CONNECTION_STR = os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\")\n# Database connection string",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "SHOW_INDICATORS",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "SHOW_INDICATORS = os.environ.get(\"SHOW_INDICATORS\", \"True\") == \"True\"\nSHOW_TEARSHEET = os.environ.get(\"SHOW_TEARSHEET\", \"True\") == \"True\"\n# Set DB_CONNECTION_STR to None by default\nDB_CONNECTION_STR = None\n# Add a warning if ACCOUNT_HISTORY_DB_CONNECTION_STR is set because it is now replaced by DB_CONNECTION_STR\nif os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\"):\n    print(\"ACCOUNT_HISTORY_DB_CONNECTION_STR is deprecated and will be removed in a future version. Please use DB_CONNECTION_STR instead.\")\n    DB_CONNECTION_STR = os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\")\n# Database connection string\nif os.environ.get(\"DB_CONNECTION_STR\"):",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "SHOW_TEARSHEET",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "SHOW_TEARSHEET = os.environ.get(\"SHOW_TEARSHEET\", \"True\") == \"True\"\n# Set DB_CONNECTION_STR to None by default\nDB_CONNECTION_STR = None\n# Add a warning if ACCOUNT_HISTORY_DB_CONNECTION_STR is set because it is now replaced by DB_CONNECTION_STR\nif os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\"):\n    print(\"ACCOUNT_HISTORY_DB_CONNECTION_STR is deprecated and will be removed in a future version. Please use DB_CONNECTION_STR instead.\")\n    DB_CONNECTION_STR = os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\")\n# Database connection string\nif os.environ.get(\"DB_CONNECTION_STR\"):\n    DB_CONNECTION_STR = os.environ.get(\"DB_CONNECTION_STR\")",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "DB_CONNECTION_STR",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "DB_CONNECTION_STR = None\n# Add a warning if ACCOUNT_HISTORY_DB_CONNECTION_STR is set because it is now replaced by DB_CONNECTION_STR\nif os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\"):\n    print(\"ACCOUNT_HISTORY_DB_CONNECTION_STR is deprecated and will be removed in a future version. Please use DB_CONNECTION_STR instead.\")\n    DB_CONNECTION_STR = os.environ.get(\"ACCOUNT_HISTORY_DB_CONNECTION_STR\")\n# Database connection string\nif os.environ.get(\"DB_CONNECTION_STR\"):\n    DB_CONNECTION_STR = os.environ.get(\"DB_CONNECTION_STR\")\n# Name for the strategy to be used in the database\nSTRATEGY_NAME = os.environ.get(\"STRATEGY_NAME\")",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "STRATEGY_NAME",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "STRATEGY_NAME = os.environ.get(\"STRATEGY_NAME\")\n# Set a hard limit on the memory polygon uses\nPOLYGON_MAX_MEMORY_BYTES = os.environ.get(\"POLYGON_MAX_MEMORY_BYTES\")\nPOLYGON_CONFIG = {\n    # Add POLYGON_API_KEY and POLYGON_IS_PAID_SUBSCRIPTION to your .env file or set them as secrets\n    \"API_KEY\": os.environ.get(\"POLYGON_API_KEY\"),\n    \"IS_PAID_SUBSCRIPTION\": os.environ.get(\"POLYGON_IS_PAID_SUBSCRIPTION\").lower()\n    == \"true\"\n    if os.environ.get(\"POLYGON_IS_PAID_SUBSCRIPTION\")\n    else False,",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "POLYGON_MAX_MEMORY_BYTES",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "POLYGON_MAX_MEMORY_BYTES = os.environ.get(\"POLYGON_MAX_MEMORY_BYTES\")\nPOLYGON_CONFIG = {\n    # Add POLYGON_API_KEY and POLYGON_IS_PAID_SUBSCRIPTION to your .env file or set them as secrets\n    \"API_KEY\": os.environ.get(\"POLYGON_API_KEY\"),\n    \"IS_PAID_SUBSCRIPTION\": os.environ.get(\"POLYGON_IS_PAID_SUBSCRIPTION\").lower()\n    == \"true\"\n    if os.environ.get(\"POLYGON_IS_PAID_SUBSCRIPTION\")\n    else False,\n}\n# Polygon API Key",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "POLYGON_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "POLYGON_CONFIG = {\n    # Add POLYGON_API_KEY and POLYGON_IS_PAID_SUBSCRIPTION to your .env file or set them as secrets\n    \"API_KEY\": os.environ.get(\"POLYGON_API_KEY\"),\n    \"IS_PAID_SUBSCRIPTION\": os.environ.get(\"POLYGON_IS_PAID_SUBSCRIPTION\").lower()\n    == \"true\"\n    if os.environ.get(\"POLYGON_IS_PAID_SUBSCRIPTION\")\n    else False,\n}\n# Polygon API Key\nPOLYGON_API_KEY = POLYGON_CONFIG['API_KEY']",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "POLYGON_API_KEY",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "POLYGON_API_KEY = POLYGON_CONFIG['API_KEY']\n# Thetadata Configuration\nTHETADATA_CONFIG = {\n    # Get the ThetaData API key from the .env file or secrets\n    \"THETADATA_USERNAME\": os.environ.get(\"THETADATA_USERNAME\"),\n    \"THETADATA_PASSWORD\": os.environ.get(\"THETADATA_PASSWORD\")\n}\n# Alpaca Configuration\nALPACA_CONFIG = {  # Paper trading!\n    # Add ALPACA_API_KEY, ALPACA_API_SECRET, and ALPACA_IS_PAPER to your .env file or set them as secrets",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "THETADATA_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "THETADATA_CONFIG = {\n    # Get the ThetaData API key from the .env file or secrets\n    \"THETADATA_USERNAME\": os.environ.get(\"THETADATA_USERNAME\"),\n    \"THETADATA_PASSWORD\": os.environ.get(\"THETADATA_PASSWORD\")\n}\n# Alpaca Configuration\nALPACA_CONFIG = {  # Paper trading!\n    # Add ALPACA_API_KEY, ALPACA_API_SECRET, and ALPACA_IS_PAPER to your .env file or set them as secrets\n    \"API_KEY\": os.environ.get(\"ALPACA_API_KEY\"),\n    \"API_SECRET\": os.environ.get(\"ALPACA_API_SECRET\"),",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "ALPACA_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "ALPACA_CONFIG = {  # Paper trading!\n    # Add ALPACA_API_KEY, ALPACA_API_SECRET, and ALPACA_IS_PAPER to your .env file or set them as secrets\n    \"API_KEY\": os.environ.get(\"ALPACA_API_KEY\"),\n    \"API_SECRET\": os.environ.get(\"ALPACA_API_SECRET\"),\n    \"PAPER\": os.environ.get(\"ALPACA_IS_PAPER\").lower() == \"true\"\n    if os.environ.get(\"ALPACA_IS_PAPER\")\n    else True,\n}\n# Tradier Configuration\nTRADIER_CONFIG = {",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "TRADIER_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "TRADIER_CONFIG = {\n    # Add TRADIER_ACCESS_TOKEN, TRADIER_ACCOUNT_NUMBER, and TRADIER_IS_PAPER to your .env file or set them as secrets\n    \"ACCESS_TOKEN\": os.environ.get(\"TRADIER_ACCESS_TOKEN\"),\n    \"ACCOUNT_NUMBER\": os.environ.get(\"TRADIER_ACCOUNT_NUMBER\"),\n    \"PAPER\": os.environ.get(\"TRADIER_IS_PAPER\").lower() == \"true\"\n    if os.environ.get(\"TRADIER_IS_PAPER\")\n    else True,\n}\nKRAKEN_CONFIG = {\n    # Add KRAKEN_API_KEY and KRAKEN_API_SECRET to your .env file or set them as secrets",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "KRAKEN_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "KRAKEN_CONFIG = {\n    # Add KRAKEN_API_KEY and KRAKEN_API_SECRET to your .env file or set them as secrets\n    \"exchange_id\": \"kraken\",\n    \"apiKey\": os.environ.get(\"KRAKEN_API_KEY\"),\n    \"secret\": os.environ.get(\"KRAKEN_API_SECRET\"),\n    \"margin\": True,\n    \"sandbox\": False,\n}\nCOINBASE_CONFIG = {\n    # Add COINBASE_API_KEY and COINBASE_API_SECRET to your .env file or set them as secrets",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "COINBASE_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "COINBASE_CONFIG = {\n    # Add COINBASE_API_KEY and COINBASE_API_SECRET to your .env file or set them as secrets\n    \"exchange_id\": \"coinbase\",\n    \"apiKey\": os.environ.get(\"COINBASE_API_KEY\"),\n    \"secret\": os.environ.get(\"COINBASE_API_SECRET\"),\n    \"margin\": False,\n    \"sandbox\": False,\n}\nINTERACTIVE_BROKERS_CONFIG = {\n    \"SOCKET_PORT\": int(os.environ.get(\"INTERACTIVE_BROKERS_PORT\")) if os.environ.get(\"INTERACTIVE_BROKERS_PORT\") else None,",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "INTERACTIVE_BROKERS_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "INTERACTIVE_BROKERS_CONFIG = {\n    \"SOCKET_PORT\": int(os.environ.get(\"INTERACTIVE_BROKERS_PORT\")) if os.environ.get(\"INTERACTIVE_BROKERS_PORT\") else None,\n    \"CLIENT_ID\": int(os.environ.get(\"INTERACTIVE_BROKERS_CLIENT_ID\")) if os.environ.get(\"INTERACTIVE_BROKERS_CLIENT_ID\") else None,\n    \"IP\": os.environ.get(\"INTERACTIVE_BROKERS_IP\", \"127.0.0.1\"),\n    \"IB_SUBACCOUNT\": os.environ.get(\"IB_SUBACCOUNT\", None)\n}\nINTERACTIVE_BROKERS_REST_CONFIG = {\n    \"IB_USERNAME\": os.environ.get(\"IB_USERNAME\"),\n    \"IB_PASSWORD\": os.environ.get(\"IB_PASSWORD\"),\n    \"ACCOUNT_ID\": os.environ.get(\"ACCOUNT_ID\"),",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "INTERACTIVE_BROKERS_REST_CONFIG",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "INTERACTIVE_BROKERS_REST_CONFIG = {\n    \"IB_USERNAME\": os.environ.get(\"IB_USERNAME\"),\n    \"IB_PASSWORD\": os.environ.get(\"IB_PASSWORD\"),\n    \"ACCOUNT_ID\": os.environ.get(\"ACCOUNT_ID\"),\n    \"API_URL\": os.environ.get(\"IB_API_URL\"),\n    \"RUNNING_ON_SERVER\": os.environ.get(\"RUNNING_ON_SERVER\")\n}\nLUMIWEALTH_API_KEY = os.environ.get(\"LUMIWEALTH_API_KEY\")\nif IS_BACKTESTING:\n    broker = None",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "LUMIWEALTH_API_KEY",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "LUMIWEALTH_API_KEY = os.environ.get(\"LUMIWEALTH_API_KEY\")\nif IS_BACKTESTING:\n    broker = None\nelse:\n    # If using Alpaca as a broker, set that as the broker\n    if ALPACA_CONFIG[\"API_KEY\"]:\n        broker = Alpaca(ALPACA_CONFIG)\n    # If using Tradier as a broker, set that as the broker\n    elif TRADIER_CONFIG[\"ACCESS_TOKEN\"]:\n        broker = Tradier(TRADIER_CONFIG)",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "BROKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.lumibot.credentials",
        "description": "lib.MLTradingBot.lumibot.credentials",
        "peekOfCode": "BROKER = broker",
        "detail": "lib.MLTradingBot.lumibot.credentials",
        "documentation": {}
    },
    {
        "label": "sector_dict",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "sector_dict = {\n    \"Technology\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"META\", \"TSLA\"],\n    \"Healthcare\": [\"JNJ\", \"PFE\", \"MRK\", \"UNH\", \"ABBV\"],\n    \"Finance\": [\"JPM\", \"BAC\", \"WFC\", \"C\", \"GS\"],\n    \"Consumer Discretionary\": [\"AMZN\", \"HD\", \"NKE\", \"MCD\", \"SBUX\"],\n    \"Energy\": [\"XOM\", \"CVX\", \"COP\", \"PSX\", \"VLO\"]\n}\nSINGLE_TICKER = [\"AAPL\"]\n# Dow 30 constituents in 2021/10\n# check https://wrds-www.wharton.upenn.edu/ for U.S. index constituents",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "SINGLE_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "SINGLE_TICKER = [\"AAPL\"]\n# Dow 30 constituents in 2021/10\n# check https://wrds-www.wharton.upenn.edu/ for U.S. index constituents\nDOW_30_TICKER = [\n    \"AXP\",\n    \"AMGN\",\n    \"AAPL\",\n    \"BA\",\n    \"CAT\",\n    \"CSCO\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "DOW_30_TICKER = [\n    \"AXP\",\n    \"AMGN\",\n    \"AAPL\",\n    \"BA\",\n    \"CAT\",\n    \"CSCO\",\n    \"CVX\",\n    \"GS\",\n    \"HD\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "NAS_100_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "NAS_100_TICKER = [\n    \"AMGN\",\n    \"AAPL\",\n    \"AMAT\",\n    \"INTC\",\n    \"PCAR\",\n    \"PAYX\",\n    \"MSFT\",\n    \"ADBE\",\n    \"CSCO\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "SP_500_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "SP_500_TICKER = [\n    \"A\",\n    \"AAL\",\n    \"AAP\",\n    \"AAPL\",\n    \"ABBV\",\n    \"ABC\",\n    \"ABMD\",\n    \"ABT\",\n    \"ACN\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "HSI_50_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "HSI_50_TICKER = [\n    \"0011.HK\",\n    \"0005.HK\",\n    \"0012.HK\",\n    \"0006.HK\",\n    \"0003.HK\",\n    \"0016.HK\",\n    \"0019.HK\",\n    \"0002.HK\",\n    \"0001.HK\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "SSE_50_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "SSE_50_TICKER = [\n    \"600000.XSHG\",\n    \"600036.XSHG\",\n    \"600104.XSHG\",\n    \"600030.XSHG\",\n    \"601628.XSHG\",\n    \"601166.XSHG\",\n    \"601318.XSHG\",\n    \"601328.XSHG\",\n    \"601088.XSHG\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "CSI_300_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "CSI_300_TICKER = [\n    \"600000.XSHG\",\n    \"600004.XSHG\",\n    \"600009.XSHG\",\n    \"600010.XSHG\",\n    \"600011.XSHG\",\n    \"600015.XSHG\",\n    \"600016.XSHG\",\n    \"600018.XSHG\",\n    \"600019.XSHG\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "CAC_40_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "CAC_40_TICKER = [\n    \"AC.PA\",\n    \"AI.PA\",\n    \"AIR.PA\",\n    \"MT.AS\",\n    \"ATO.PA\",\n    \"CS.PA\",\n    \"BNP.PA\",\n    \"EN.PA\",\n    \"CAP.PA\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "DAX_30_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "DAX_30_TICKER = [\n    \"DHER.DE\",\n    \"RWE.DE\",\n    \"FRE.DE\",\n    \"MTX.DE\",\n    \"MRK.DE\",\n    \"LIN.DE\",\n    \"ALV.DE\",\n    \"VNA.DE\",\n    \"EOAN.DE\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "TECDAX_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "TECDAX_TICKER = [\n    \"ADV.DE\",\n    \"AFX.DE\",\n    \"AM3D.DE\",\n    \"BC8.DE\",\n    \"COK.DE\",\n    \"DLG.DE\",\n    \"DRI.DE\",\n    \"DRW3.DE\",\n    \"EVT.DE\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "MDAX_50_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "MDAX_50_TICKER = [\n    \"1COV.DE\",\n    \"AIR.DE\",\n    \"AOX.DE\",\n    \"ARL.DE\",\n    \"BNR.DE\",\n    \"BOSS.DE\",\n    \"DEQ.DE\",\n    \"DUE.DE\",\n    \"DWNI.DE\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "SDAX_50_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "SDAX_50_TICKER = [\n    \"AAD.DE\",\n    \"ACX.DE\",\n    \"ADJ.DE\",\n    \"ADL.DE\",\n    \"BDT.DE\",\n    \"BIO3.DE\",\n    \"BVB.DE\",\n    \"BYW6.DE\",\n    \"CWC.DE\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "LQ45_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "LQ45_TICKER = [\n    \"ACES.JK\",\n    \"ADRO.JK\",\n    \"AKRA.JK\",\n    \"ANTM.JK\",\n    \"ASII.JK\",\n    \"BBCA.JK\",\n    \"BBNI.JK\",\n    \"BBRI.JK\",\n    \"BBTN.JK\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "SRI_KEHATI_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "SRI_KEHATI_TICKER = [\n    \"AALI.JK\",\n    \"ADHI.JK\",\n    \"ASII.JK\",\n    \"BBCA.JK\",\n    \"BBNI.JK\",\n    \"BBRI.JK\",\n    \"BBTN.JK\",\n    \"BMRI.JK\",\n    \"BSDE.JK\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "FX_TICKER",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "FX_TICKER = [\n    \"AUDCAD=X\",\n    \"AUDCHF=X\",\n    \"AUDJPY=X\",\n    \"AUDNZD=X\",\n    \"AUDSGD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "custom_index",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "custom_index = [\"MMM\", \"AXP\", \"BA\", \"CAT\", \"CSCO\"]\nindex_dict = {\n    \"Dow 30\": DOW_30_TICKER,\n    \"Nasdaq 100\": NAS_100_TICKER,\n    \"S&P 500\": SP_500_TICKER,\n    # Show me an example of streamlit select box with a  select of a singl index and a multi select of some tickers belon to the selected index\n    \"Hang Seng Index\" : HSI_50_TICKER, \n    \"SSE 50\" :SSE_50_TICKER, \n    \"CSI 300\" : CSI_300_TICKER, \n    \"CAC 40\" : CAC_40_TICKER, ",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "index_dict",
        "kind": 5,
        "importPath": "lib.MLTradingBot.config_tickers",
        "description": "lib.MLTradingBot.config_tickers",
        "peekOfCode": "index_dict = {\n    \"Dow 30\": DOW_30_TICKER,\n    \"Nasdaq 100\": NAS_100_TICKER,\n    \"S&P 500\": SP_500_TICKER,\n    # Show me an example of streamlit select box with a  select of a singl index and a multi select of some tickers belon to the selected index\n    \"Hang Seng Index\" : HSI_50_TICKER, \n    \"SSE 50\" :SSE_50_TICKER, \n    \"CSI 300\" : CSI_300_TICKER, \n    \"CAC 40\" : CAC_40_TICKER, \n    \"DAX 30\" : DAX_30_TICKER, ",
        "detail": "lib.MLTradingBot.config_tickers",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "kind": 2,
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "peekOfCode": "def estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"\n        ]\n        result = torch.nn.functional.softmax(torch.sum(result, 0), dim=-1)\n        probability = result[torch.argmax(result)]\n        sentiment = labels[torch.argmax(result)]\n        return probability, sentiment",
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "peekOfCode": "device = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = AutoTokenizer.from_pretrained(\"ProsusAI/finbert\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\").to(device)\nlabels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[",
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(\"ProsusAI/finbert\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\").to(device)\nlabels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"",
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "peekOfCode": "model = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\").to(device)\nlabels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"\n        ]",
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "lib.MLTradingBot.finbert_utils",
        "description": "lib.MLTradingBot.finbert_utils",
        "peekOfCode": "labels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"\n        ]\n        result = torch.nn.functional.softmax(torch.sum(result, 0), dim=-1)",
        "detail": "lib.MLTradingBot.finbert_utils",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "lib.MLTradingBot.snSomeThink",
        "description": "lib.MLTradingBot.snSomeThink",
        "peekOfCode": "class MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = REST(base_url=base_url, key_id=api_key, secret_key=api_secret)\n    def position_sizing(self): \n        cash = self.get_cash() \n        last_price = self.get_last_price(self.symbol)",
        "detail": "lib.MLTradingBot.snSomeThink",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "lib.MLTradingBot.snSomeThink",
        "description": "lib.MLTradingBot.snSomeThink",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets/v2\"\nAPI_KEY = \"PKXQGLU5DJJ30MUWS2G6\"\nAPI_SECRET =\"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\"\napi_secret = API_SECRET\napi_key    = API_KEY\nbase_url   = BASE_URL\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True",
        "detail": "lib.MLTradingBot.snSomeThink",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "lib.MLTradingBot.snSomeThink",
        "description": "lib.MLTradingBot.snSomeThink",
        "peekOfCode": "API_KEY = \"PKXQGLU5DJJ30MUWS2G6\"\nAPI_SECRET =\"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\"\napi_secret = API_SECRET\napi_key    = API_KEY\nbase_url   = BASE_URL\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}",
        "detail": "lib.MLTradingBot.snSomeThink",
        "documentation": {}
    },
    {
        "label": "api_secret",
        "kind": 5,
        "importPath": "lib.MLTradingBot.snSomeThink",
        "description": "lib.MLTradingBot.snSomeThink",
        "peekOfCode": "api_secret = API_SECRET\napi_key    = API_KEY\nbase_url   = BASE_URL\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): ",
        "detail": "lib.MLTradingBot.snSomeThink",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "lib.MLTradingBot.snSomeThink",
        "description": "lib.MLTradingBot.snSomeThink",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None ",
        "detail": "lib.MLTradingBot.snSomeThink",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "lib.MLTradingBot.snSomeThink",
        "description": "lib.MLTradingBot.snSomeThink",
        "peekOfCode": "trader = Trader()\ntrader.add_strategy(strategy)\ntrader.run_all()",
        "detail": "lib.MLTradingBot.snSomeThink",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "class MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = REST(base_url=base_url, key_id=api_key, secret_key=api_secret)\n    def position_sizing(self): \n        cash = self.get_cash() \n        last_price = self.get_last_price(self.symbol)",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "api_secret",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "api_secret = os.getenv(\"API_SECRET\")\napi_key    = os.getenv(\"API_KEY\")\nbase_url   = os.getenv(\"BASE_URL\")\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): ",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None ",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "start_date = datetime(2020,1,1)\nend_date = datetime(2023,12,31) \nbroker = Alpaca(ALPACA_CREDS) \ntrader = Trader()\nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, ",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "end_date = datetime(2023,12,31) \nbroker = Alpaca(ALPACA_CREDS) \ntrader = Trader()\nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, ",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "broker",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "broker = Alpaca(ALPACA_CREDS) \ntrader = Trader()\nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, \n    parameters={\"symbol\":\"SPY\", \"cash_at_risk\":.5}",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "trader = Trader()\nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, \n    parameters={\"symbol\":\"SPY\", \"cash_at_risk\":.5}\n)",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "strategy",
        "kind": 5,
        "importPath": "lib.MLTradingBot.t1",
        "description": "lib.MLTradingBot.t1",
        "peekOfCode": "strategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, \n    parameters={\"symbol\":\"SPY\", \"cash_at_risk\":.5}\n)\ntrader.add_strategy(strategy)",
        "detail": "lib.MLTradingBot.t1",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "key = open('../1-alphavantage.txt').read()\n# ### 3. Create TimeSeries Object and Make API Call\n# In[8]:\nts = TimeSeries(key, output_format='pandas')\ndata, meta = ts.get_intraday('TSLA', interval='1min', outputsize='full')\n# ### 4. Examine Data\n# In[7]:\nmeta",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "ts",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "ts = TimeSeries(key, output_format='pandas')\ndata, meta = ts.get_intraday('TSLA', interval='1min', outputsize='full')\n# ### 4. Examine Data\n# In[7]:\nmeta\n# In[8]:\ndata.info()\n# In[9]:",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "columns = ['open', 'high', 'low', 'close', 'volume']\ndata.columns = columns\n# In[13]:\ndata['TradeDate'] = data.index.date\ndata['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "data.columns",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "data.columns = columns\n# In[13]:\ndata['TradeDate'] = data.index.date\ndata['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:\nmarket = data.between_time('09:30:00', '16:00:00').copy()",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "data['TradeDate']",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "data['TradeDate'] = data.index.date\ndata['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:\nmarket = data.between_time('09:30:00', '16:00:00').copy()\nmarket.sort_index(inplace=True)\nmarket.info()\n# In[16]:",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "data['time']",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "data['time'] = data.index.time\n# In[14]:\ndata.loc['2020-12-31']\n# In[15]:\nmarket = data.between_time('09:30:00', '16:00:00').copy()\nmarket.sort_index(inplace=True)\nmarket.info()\n# In[16]:",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "market",
        "kind": 5,
        "importPath": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "description": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "peekOfCode": "market = data.between_time('09:30:00', '16:00:00').copy()\nmarket.sort_index(inplace=True)\nmarket.info()\n# In[16]:\nmarket.groupby('TradeDate').agg({'low':min, 'high':max})\n# In[17]:\nmarket.loc[market.groupby('TradeDate')['low'].idxmin()]\n# In[18]:",
        "detail": "lib.lumi.example_strategies.alphavantage.1-alphavantage_demo",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "MODELS = {\n    \"ddpg\": AgentDDPG,\n    \"td3\": AgentTD3,\n    \"sac\": AgentSAC,\n    \"ppo\": AgentPPO,\n    \"a2c\": AgentA2C,\n}\nOFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "OFF_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "OFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "ON_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "ON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "PolicyGradient",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.algorithms",
        "description": "lib.rl.agents.portfolio_optimization.algorithms",
        "peekOfCode": "class PolicyGradient:\n    \"\"\"Class implementing policy gradient algorithm to train portfolio\n    optimization agents.\n    Note:\n        During testing, the agent is optimized through online learning.\n        The parameters of the policy is updated repeatedly after a constant\n        period of time. To disable it, set learning rate to 0.\n    Attributes:\n        train_env: Environment used to train the agent\n        train_policy: Policy used in training.",
        "detail": "lib.rl.agents.portfolio_optimization.algorithms",
        "documentation": {}
    },
    {
        "label": "EIIE",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.architectures",
        "description": "lib.rl.agents.portfolio_optimization.architectures",
        "peekOfCode": "class EIIE(nn.Module):\n    def __init__(\n        self,\n        initial_features=3,\n        k_size=3,\n        conv_mid_features=2,\n        conv_final_features=20,\n        time_window=50,\n        device=\"cpu\",\n    ):",
        "detail": "lib.rl.agents.portfolio_optimization.architectures",
        "documentation": {}
    },
    {
        "label": "EI3",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.architectures",
        "description": "lib.rl.agents.portfolio_optimization.architectures",
        "peekOfCode": "class EI3(nn.Module):\n    def __init__(\n        self,\n        initial_features=3,\n        k_short=3,\n        k_medium=21,\n        conv_mid_features=3,\n        conv_final_features=20,\n        time_window=50,\n        device=\"cpu\",",
        "detail": "lib.rl.agents.portfolio_optimization.architectures",
        "documentation": {}
    },
    {
        "label": "GPM",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.architectures",
        "description": "lib.rl.agents.portfolio_optimization.architectures",
        "peekOfCode": "class GPM(nn.Module):\n    def __init__(\n        self,\n        edge_index,\n        edge_type,\n        nodes_to_select,\n        initial_features=3,\n        k_short=3,\n        k_medium=21,\n        conv_mid_features=3,",
        "detail": "lib.rl.agents.portfolio_optimization.architectures",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.models",
        "description": "lib.rl.agents.portfolio_optimization.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementation for DRL algorithms for portfolio optimization.\n    Note:\n        During testing, the agent is optimized through online learning.\n        The parameters of the policy is updated repeatedly after a constant\n        period of time. To disable it, set learning rate to 0.\n    Attributes:\n        env: Gym environment class.\n    \"\"\"\n    def __init__(self, env):",
        "detail": "lib.rl.agents.portfolio_optimization.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.portfolio_optimization.models",
        "description": "lib.rl.agents.portfolio_optimization.models",
        "peekOfCode": "MODELS = {\"pg\": PolicyGradient}\nclass DRLAgent:\n    \"\"\"Implementation for DRL algorithms for portfolio optimization.\n    Note:\n        During testing, the agent is optimized through online learning.\n        The parameters of the policy is updated repeatedly after a constant\n        period of time. To disable it, set learning rate to 0.\n    Attributes:\n        env: Gym environment class.\n    \"\"\"",
        "detail": "lib.rl.agents.portfolio_optimization.models",
        "documentation": {}
    },
    {
        "label": "PVM",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "class PVM:\n    def __init__(self, capacity, portfolio_size):\n        \"\"\"Initializes portfolio vector memory.\n        Args:\n          capacity: Max capacity of memory.\n          portfolio_size: Portfolio size.\n        \"\"\"\n        # initially, memory will have the same actions\n        self.capacity = capacity\n        self.portfolio_size = portfolio_size",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "ReplayBuffer",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "class ReplayBuffer:\n    def __init__(self, capacity):\n        \"\"\"Initializes replay buffer.\n        Args:\n          capacity: Max capacity of buffer.\n        \"\"\"\n        self.buffer = deque(maxlen=capacity)\n    def __len__(self):\n        \"\"\"Represents the size of the buffer\n        Returns:",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "RLDataset",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "class RLDataset(IterableDataset):\n    def __init__(self, buffer):\n        \"\"\"Initializes reinforcement learning dataset.\n        Args:\n            buffer: replay buffer to become iterable dataset.\n        Note:\n            It's a subclass of pytorch's IterableDataset,\n            check https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset\n        \"\"\"\n        self.buffer = buffer",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "apply_portfolio_noise",
        "kind": 2,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "def apply_portfolio_noise(portfolio, epsilon=0.0):\n    \"\"\"Apply noise to portfolio distribution considering its constrains.\n    Arg:\n        portfolio: initial portfolio distribution.\n        epsilon: maximum rebalancing.\n    Returns:\n        New portolio distribution with noise applied.\n    \"\"\"\n    portfolio_size = portfolio.shape[0]\n    new_portfolio = portfolio.copy()",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "DRLlibv2",
        "kind": 6,
        "importPath": "lib.rl.agents.rllib.drllibv2",
        "description": "lib.rl.agents.rllib.drllibv2",
        "peekOfCode": "class DRLlibv2:\n    \"\"\"\n    It instantiates RLlib model with Ray tune functionality\n    Params\n    -------------------------------------\n    trainable:\n        Any Trainable class that takes config as parameter\n    train_env:\n        Training environment instance\n    train_env_name: str",
        "detail": "lib.rl.agents.rllib.drllibv2",
        "documentation": {}
    },
    {
        "label": "psutil_memory_in_bytes",
        "kind": 5,
        "importPath": "lib.rl.agents.rllib.drllibv2",
        "description": "lib.rl.agents.rllib.drllibv2",
        "peekOfCode": "psutil_memory_in_bytes = psutil.virtual_memory().total\nray._private.utils.get_system_memory = lambda: psutil_memory_in_bytes\nfrom typing import Dict, Optional, Any, List, Union\nclass DRLlibv2:\n    \"\"\"\n    It instantiates RLlib model with Ray tune functionality\n    Params\n    -------------------------------------\n    trainable:\n        Any Trainable class that takes config as parameter",
        "detail": "lib.rl.agents.rllib.drllibv2",
        "documentation": {}
    },
    {
        "label": "ray._private.utils.get_system_memory",
        "kind": 5,
        "importPath": "lib.rl.agents.rllib.drllibv2",
        "description": "lib.rl.agents.rllib.drllibv2",
        "peekOfCode": "ray._private.utils.get_system_memory = lambda: psutil_memory_in_bytes\nfrom typing import Dict, Optional, Any, List, Union\nclass DRLlibv2:\n    \"\"\"\n    It instantiates RLlib model with Ray tune functionality\n    Params\n    -------------------------------------\n    trainable:\n        Any Trainable class that takes config as parameter\n    train_env:",
        "detail": "lib.rl.agents.rllib.drllibv2",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.rllib.models",
        "description": "lib.rl.agents.rllib.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations for DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n        price_array: numpy array\n            OHLC data\n        tech_array: numpy array\n            techical data",
        "detail": "lib.rl.agents.rllib.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.rllib.models",
        "description": "lib.rl.agents.rllib.models",
        "peekOfCode": "MODELS = {\"a2c\": a2c, \"ddpg\": ddpg, \"td3\": td3, \"sac\": sac, \"ppo\": ppo}\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\nclass DRLAgent:\n    \"\"\"Implementations for DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n        price_array: numpy array\n            OHLC data",
        "detail": "lib.rl.agents.rllib.models",
        "documentation": {}
    },
    {
        "label": "sample_ppo_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_ppo_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for PPO hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    batch_size = trial.suggest_categorical(\"batch_size\", [8, 16, 32, 64, 128, 256, 512])\n    n_steps = trial.suggest_categorical(\n        \"n_steps\", [8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n    )",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_trpo_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_trpo_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for TRPO hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    batch_size = trial.suggest_categorical(\"batch_size\", [8, 16, 32, 64, 128, 256, 512])\n    n_steps = trial.suggest_categorical(\n        \"n_steps\", [8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n    )",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_a2c_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_a2c_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for A2C hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    normalize_advantage = trial.suggest_categorical(",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_sac_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_sac_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for SAC hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_td3_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_td3_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for TD3 hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_ddpg_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_ddpg_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for DDPG hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_dqn_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_dqn_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for DQN hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_her_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_her_params(\n    trial: optuna.Trial, hyperparams: dict[str, Any]\n) -> dict[str, Any]:\n    \"\"\"\n    Sampler for HerReplayBuffer hyperparams.\n    :param trial:\n    :parma hyperparams:\n    :return:\n    \"\"\"\n    her_kwargs = trial.her_kwargs.copy()",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_tqc_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_tqc_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for TQC hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    # TQC is SAC + Distributional RL\n    hyperparams = sample_sac_params(trial)\n    n_quantiles = trial.suggest_int(\"n_quantiles\", 5, 50)\n    top_quantiles_to_drop_per_net = trial.suggest_int(",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_qrdqn_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_qrdqn_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for QR-DQN hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    # TQC is DQN + Distributional RL\n    hyperparams = sample_dqn_params(trial)\n    n_quantiles = trial.suggest_int(\"n_quantiles\", 5, 200)\n    hyperparams[\"policy_kwargs\"].update({\"n_quantiles\": n_quantiles})",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_ars_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_ars_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for ARS hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    # n_eval_episodes = trial.suggest_categorical(\"n_eval_episodes\", [1, 2])\n    n_delta = trial.suggest_categorical(\"n_delta\", [4, 8, 6, 32, 64])\n    # learning_rate = trial.suggest_categorical(\"learning_rate\", [0.01, 0.02, 0.025, 0.03])\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "HYPERPARAMS_SAMPLER",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "HYPERPARAMS_SAMPLER = {\n    \"a2c\": sample_a2c_params,\n    \"ars\": sample_ars_params,\n    \"ddpg\": sample_ddpg_params,\n    \"dqn\": sample_dqn_params,\n    \"qrdqn\": sample_qrdqn_params,\n    \"sac\": sample_sac_params,\n    \"tqc\": sample_tqc_params,\n    \"ppo\": sample_ppo_params,\n    \"td3\": sample_td3_params,",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "TensorboardCallback",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "class TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"\n    def __init__(self, verbose=0):\n        super().__init__(verbose)\n    def _on_step(self) -> bool:\n        try:\n            self.logger.record(key=\"train/reward\", value=self.locals[\"rewards\"][0])\n        except BaseException as error:",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Provides implementations for DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "class DRLEnsembleAgent:\n    @staticmethod\n    def get_model(\n        model_name,\n        env,\n        policy=\"MlpPolicy\",\n        policy_kwargs=None,\n        model_kwargs=None,\n        seed=None,\n        verbose=1,",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "MODELS = {\"a2c\": A2C, \"ddpg\": DDPG, \"td3\": TD3, \"sac\": SAC, \"ppo\": PPO}\nMODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\nNOISE = {\n    \"normal\": NormalActionNoise,\n    \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n}\nclass TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "MODEL_KWARGS",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\nNOISE = {\n    \"normal\": NormalActionNoise,\n    \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n}\nclass TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"\n    def __init__(self, verbose=0):",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "NOISE",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "NOISE = {\n    \"normal\": NormalActionNoise,\n    \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n}\nclass TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"\n    def __init__(self, verbose=0):\n        super().__init__(verbose)",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "LoggingCallback",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.tune_sb3",
        "description": "lib.rl.agents.stablebaselines3.tune_sb3",
        "peekOfCode": "class LoggingCallback:\n    def __init__(self, threshold: int, trial_number: int, patience: int):\n        \"\"\"\n        threshold:int tolerance for increase in sharpe ratio\n        trial_number: int Prune after minimum number of trials\n        patience: int patience for the threshold\n        \"\"\"\n        self.threshold = threshold\n        self.trial_number = trial_number\n        self.patience = patience",
        "detail": "lib.rl.agents.stablebaselines3.tune_sb3",
        "documentation": {}
    },
    {
        "label": "TuneSB3Optuna",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.tune_sb3",
        "description": "lib.rl.agents.stablebaselines3.tune_sb3",
        "peekOfCode": "class TuneSB3Optuna:\n    \"\"\"\n    Hyperparameter tuning of SB3 agents using Optuna\n    Attributes\n    ----------\n      env_train: Training environment for SB3\n      model_name: str\n      env_trade: testing environment\n      logging_callback: callback for tuning\n      total_timesteps: int",
        "detail": "lib.rl.agents.stablebaselines3.tune_sb3",
        "documentation": {}
    },
    {
        "label": "calc_stockname_from_filename",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_stockname_from_filename(filename):\n    return filename.split(\"/\")[-1].split(\".csv\")[0]\ndef calc_all_filenames(path):\n    dir_list = os.listdir(path)\n    dir_list.sort()\n    paths2 = []\n    for dir in dir_list:\n        filename = os.path.join(os.path.abspath(path), dir)\n        if \".csv\" in filename and \"#\" not in filename and \"~\" not in filename:\n            paths2.append(filename)",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_all_filenames",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_all_filenames(path):\n    dir_list = os.listdir(path)\n    dir_list.sort()\n    paths2 = []\n    for dir in dir_list:\n        filename = os.path.join(os.path.abspath(path), dir)\n        if \".csv\" in filename and \"#\" not in filename and \"~\" not in filename:\n            paths2.append(filename)\n    return paths2\ndef calc_stocknames(path):",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_stocknames",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_stocknames(path):\n    filenames = calc_all_filenames(path)\n    res = []\n    for filename in filenames:\n        stockname = calc_stockname_from_filename(filename)\n        res.append(stockname)\n    return res\ndef remove_all_files(remove, path_of_data):\n    assert remove in [0, 1]\n    if remove == 1:",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "remove_all_files",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def remove_all_files(remove, path_of_data):\n    assert remove in [0, 1]\n    if remove == 1:\n        os.system(\"rm -f \" + path_of_data + \"/*\")\n    dir_list = os.listdir(path_of_data)\n    for file in dir_list:\n        if \"~\" in file:\n            os.system(\"rm -f \" + path_of_data + \"/\" + file)\n    dir_list = os.listdir(path_of_data)\n    if remove == 1:",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def date2str(dat: datetime.date) -> str:\n    return datetime.date.strftime(dat, \"%Y-%m-%d\")\ndef str2date(dat: str) -> datetime.date:\n    return datetime.datetime.strptime(dat, \"%Y-%m-%d\").date()\n# include start_date, inclue end_date. step: delta\ndef calc_dates(\n    start_date: datetime.date, end_date: datetime.date, delta: datetime.timedelta\n) -> list[str]:\n    dates = []\n    dat = copy.deepcopy(start_date)",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def str2date(dat: str) -> datetime.date:\n    return datetime.datetime.strptime(dat, \"%Y-%m-%d\").date()\n# include start_date, inclue end_date. step: delta\ndef calc_dates(\n    start_date: datetime.date, end_date: datetime.date, delta: datetime.timedelta\n) -> list[str]:\n    dates = []\n    dat = copy.deepcopy(start_date)\n    while dat <= end_date:\n        d = date2str(dat)",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_dates",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_dates(\n    start_date: datetime.date, end_date: datetime.date, delta: datetime.timedelta\n) -> list[str]:\n    dates = []\n    dat = copy.deepcopy(start_date)\n    while dat <= end_date:\n        d = date2str(dat)\n        dates.append(d)\n        dat += delta\n    return dates",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_train_trade_starts_ends_if_rolling(\n    init_train_dates: list[str], init_trade_dates: list[str], rolling_window_length: int\n) -> tuple[list[str], list[str], list[str], list[str]]:\n    trade_dates_length = len(init_trade_dates)\n    train_window_length = len(init_train_dates)\n    trade_window_length = min(rolling_window_length, trade_dates_length)\n    num_subsets_if_rolling = int(np.ceil(trade_dates_length / trade_window_length))\n    print(\"num_subsets_if_rolling: \", num_subsets_if_rolling)\n    dates = np.concatenate((init_train_dates, init_trade_dates), axis=0)\n    train_starts = []",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_train_trade_data(\n    i: int,\n    train_starts: list[str],\n    train_ends: list[str],\n    trade_starts: list[str],\n    trade_ends: list[str],\n    init_train_data: pd.DataFrame(),\n    init_trade_data: pd.DataFrame(),\n    date_col: str,\n) -> tuple[pd.DataFrame(), pd.DataFrame()]:",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "peekOfCode": "class AlpacaProcessor:\n    def __init__(self, API_KEY=None, API_SECRET=None, API_BASE_URL=None, api=None):\n        if api is None:\n            try:\n                self.api = tradeapi.REST(API_KEY, API_SECRET, API_BASE_URL, \"v2\")\n            except BaseException:\n                raise ValueError(\"Wrong Account Info!\")\n        else:\n            self.api = api\n    def _fetch_data_for_ticker(self, ticker, start_date, end_date, time_interval):",
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "CCXTEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_ccxt",
        "description": "lib.rl.meta.data_processors.processor_ccxt",
        "peekOfCode": "class CCXTEngineer:\n    def __init__(self):\n        self.binance = ccxt.binance()\n    def data_fetch(self, start, end, pair_list=[\"BTC/USDT\"], period=\"1m\"):\n        def min_ohlcv(dt, pair, limit):\n            since = calendar.timegm(dt.utctimetuple()) * 1000\n            ohlcv = self.binance.fetch_ohlcv(\n                symbol=pair, timeframe=\"1m\", since=since, limit=limit\n            )\n            return ohlcv",
        "detail": "lib.rl.meta.data_processors.processor_ccxt",
        "documentation": {}
    },
    {
        "label": "JoinQuantEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_joinquant",
        "description": "lib.rl.meta.data_processors.processor_joinquant",
        "peekOfCode": "class JoinQuantEngineer:\n    def __init__(self):\n        pass\n    def auth(self, username, password):\n        jq.auth(username, password)\n    def data_fetch(self, stock_list, num, unit, end_dt):\n        df = jq.get_bars(\n            security=stock_list,\n            count=num,\n            unit=unit,",
        "detail": "lib.rl.meta.data_processors.processor_joinquant",
        "documentation": {}
    },
    {
        "label": "QuantConnectEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_quantconnect",
        "description": "lib.rl.meta.data_processors.processor_quantconnect",
        "peekOfCode": "class QuantConnectEngineer:\n    def __init__(self):\n        pass\n    def data_fetch(start_time, end_time, stock_list, resolution=Resolution.Daily):\n        # resolution: Daily, Hour, Minute, Second\n        qb = QuantBook()\n        for stock in stock_list:\n            qb.AddEquity(stock)\n        history = qb.History(qb.Securities.Keys, start_time, end_time, resolution)\n        return history",
        "detail": "lib.rl.meta.data_processors.processor_quantconnect",
        "documentation": {}
    },
    {
        "label": "WrdsProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_wrds",
        "description": "lib.rl.meta.data_processors.processor_wrds",
        "peekOfCode": "class WrdsProcessor:\n    def __init__(self, if_offline=False):\n        if not if_offline:\n            self.db = wrds.Connection()\n    def download_data(\n        self,\n        start_date,\n        end_date,\n        ticker_list,\n        time_interval,",
        "detail": "lib.rl.meta.data_processors.processor_wrds",
        "documentation": {}
    },
    {
        "label": "pd.options.mode.chained_assignment",
        "kind": 5,
        "importPath": "lib.rl.meta.data_processors.processor_wrds",
        "description": "lib.rl.meta.data_processors.processor_wrds",
        "peekOfCode": "pd.options.mode.chained_assignment = None\nclass WrdsProcessor:\n    def __init__(self, if_offline=False):\n        if not if_offline:\n            self.db = wrds.Connection()\n    def download_data(\n        self,\n        start_date,\n        end_date,\n        ticker_list,",
        "detail": "lib.rl.meta.data_processors.processor_wrds",
        "documentation": {}
    },
    {
        "label": "YahooFinanceProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_yahoofinance",
        "description": "lib.rl.meta.data_processors.processor_yahoofinance",
        "peekOfCode": "class YahooFinanceProcessor:\n    \"\"\"Provides methods for retrieving daily stock data from\n    Yahoo Finance API\n    \"\"\"\n    def __init__(self):\n        pass\n    \"\"\"\n    Param\n    ----------\n        start_date : str",
        "detail": "lib.rl.meta.data_processors.processor_yahoofinance",
        "documentation": {}
    },
    {
        "label": "BitcoinEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_cryptocurrency_trading.env_btc_ccxt",
        "description": "lib.rl.meta.env_cryptocurrency_trading.env_btc_ccxt",
        "peekOfCode": "class BitcoinEnv:  # custom env\n    def __init__(\n        self,\n        data_cwd=None,\n        price_ary=None,\n        tech_ary=None,\n        time_frequency=15,\n        start=None,\n        mid1=172197,\n        mid2=216837,",
        "detail": "lib.rl.meta.env_cryptocurrency_trading.env_btc_ccxt",
        "documentation": {}
    },
    {
        "label": "CryptoEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_cryptocurrency_trading.env_multiple_crypto",
        "description": "lib.rl.meta.env_cryptocurrency_trading.env_multiple_crypto",
        "peekOfCode": "class CryptoEnv:  # custom env\n    def __init__(\n        self,\n        config,\n        lookback=1,\n        initial_capital=1e6,\n        buy_cost_pct=1e-3,\n        sell_cost_pct=1e-3,\n        gamma=0.99,\n    ):",
        "detail": "lib.rl.meta.env_cryptocurrency_trading.env_multiple_crypto",
        "documentation": {}
    },
    {
        "label": "StockPortfolioEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_portfolio_allocation.env_portfolio",
        "description": "lib.rl.meta.env_portfolio_allocation.env_portfolio",
        "peekOfCode": "class StockPortfolioEnv(gym.Env):\n    \"\"\"A single stock trading environment for OpenAI gym\n    Attributes\n    ----------\n        df: DataFrame\n            input data\n        stock_dim : int\n            number of unique stocks\n        hmax : int\n            maximum number of shares to trade",
        "detail": "lib.rl.meta.env_portfolio_allocation.env_portfolio",
        "documentation": {}
    },
    {
        "label": "PortfolioOptimizationEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_portfolio_optimization.env_portfolio_optimization",
        "description": "lib.rl.meta.env_portfolio_optimization.env_portfolio_optimization",
        "peekOfCode": "class PortfolioOptimizationEnv(gym.Env):\n    \"\"\"A portfolio allocation environment for OpenAI gym.\n    This environment simulates the interactions between an agent and the financial market\n    based on data provided by a dataframe. The dataframe contains the time series of\n    features defined by the user (such as closing, high and low prices) and must have\n    a time and a tic column with a list of datetimes and ticker symbols respectively.\n    An example of dataframe is shown below::\n            date        high            low             close           tic\n        0   2020-12-23  0.157414        0.127420        0.136394        ADA-USD\n        1   2020-12-23  34.381519       30.074295       31.097898       BNB-USD",
        "detail": "lib.rl.meta.env_portfolio_optimization.env_portfolio_optimization",
        "documentation": {}
    },
    {
        "label": "StockEnvNAS100",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_nas100_wrds",
        "description": "lib.rl.meta.env_stock_trading.env_nas100_wrds",
        "peekOfCode": "class StockEnvNAS100:\n    def __init__(\n        self,\n        cwd=\"./data/nas100\",\n        price_ary=None,\n        tech_ary=None,\n        turbulence_ary=None,\n        gamma=0.999,\n        turbulence_thresh=30,\n        min_stock_rate=0.1,",
        "detail": "lib.rl.meta.env_stock_trading.env_nas100_wrds",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "description": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "peekOfCode": "class AlpacaPaperTrading:\n    def __init__(\n        self,\n        ticker_list,\n        time_interval,\n        drl_lib,\n        agent,\n        cwd,\n        net_dim,\n        state_dim,",
        "detail": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "StockEnvEmpty",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "description": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "peekOfCode": "class StockEnvEmpty(gym.Env):\n    # Empty Env used for loading rllib agent\n    def __init__(self, config):\n        state_dim = config[\"state_dim\"]\n        action_dim = config[\"action_dim\"]\n        self.env_num = 1\n        self.max_step = 10000\n        self.env_name = \"StockEnvEmpty\"\n        self.state_dim = state_dim\n        self.action_dim = action_dim",
        "detail": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "peekOfCode": "class StockTradingEnv(gym.Env):\n    \"\"\"A stock trading environment for OpenAI gym\"\"\"\n    metadata = {\"render.modes\": [\"human\"]}\n    def __init__(\n        self,\n        df: pd.DataFrame,\n        stock_dim: int,\n        hmax: int,\n        initial_amount: int,\n        num_stock_shares: list[int],",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnvCashpenalty",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_cashpenalty",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_cashpenalty",
        "peekOfCode": "class StockTradingEnvCashpenalty(gym.Env):\n    \"\"\"\n    A stock trading environment for OpenAI gym\n    This environment penalizes the model for not maintaining a reserve of cash.\n    This enables the model to manage cash reserves in addition to performing trading procedures.\n    Reward at any step is given as follows\n        r_i = (sum(cash, asset_value) - initial_cash - max(0, sum(cash, asset_value)*cash_penalty_proportion-cash))/(days_elapsed)\n        This reward function takes into account a liquidity requirement, as well as long-term accrued rewards.\n    Parameters:\n        df (pandas.DataFrame): Dataframe containing data",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_cashpenalty",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "peekOfCode": "class StockTradingEnv(gym.Env):\n    def __init__(\n        self,\n        config,\n        initial_account=1e6,\n        gamma=0.99,\n        turbulence_thresh=99,\n        min_stock_rate=0.1,\n        max_stock=1e2,\n        initial_capital=1e6,",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnvStopLoss",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_stoploss",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_stoploss",
        "peekOfCode": "class StockTradingEnvStopLoss(gym.Env):\n    \"\"\"\n    A stock trading environment for OpenAI gym\n    This environment penalizes the model if excedeed the stop-loss threshold, selling assets with under expectation %profit, and also\n    for not maintaining a reserve of cash.\n    This enables the model to do trading with high confidence and manage cash reserves in addition to performing trading procedures.\n    Reward at any step is given as follows\n        r_i = (sum(cash, asset_value) + additional_reward - total_penalty - initial_cash) / initial_cash / days_elapsed\n        , where total_penalty = cash_penalty + stop_loss_penalty + low_profit_penalty\n                cash_penalty = max(0, sum(cash, asset_value)*cash_penalty_proportion-cash)",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_stoploss",
        "documentation": {}
    },
    {
        "label": "PaperTradingAlpaca",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.alpaca",
        "description": "lib.rl.meta.paper_trading.alpaca",
        "peekOfCode": "class PaperTradingAlpaca:\n    def __init__(\n        self,\n        ticker_list,\n        time_interval,\n        drl_lib,\n        agent,\n        cwd,\n        net_dim,\n        state_dim,",
        "detail": "lib.rl.meta.paper_trading.alpaca",
        "documentation": {}
    },
    {
        "label": "StockEnvEmpty",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.alpaca",
        "description": "lib.rl.meta.paper_trading.alpaca",
        "peekOfCode": "class StockEnvEmpty(gym.Env):\n    # Empty Env used for loading rllib agent\n    def __init__(self, config):\n        state_dim = config[\"state_dim\"]\n        action_dim = config[\"action_dim\"]\n        self.env_num = 1\n        self.max_step = 10000\n        self.env_name = \"StockEnvEmpty\"\n        self.state_dim = state_dim\n        self.action_dim = action_dim",
        "detail": "lib.rl.meta.paper_trading.alpaca",
        "documentation": {}
    },
    {
        "label": "ActorPPO",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class ActorPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, action_dim])\n        self.action_std_log = nn.Parameter(\n            torch.zeros((1, action_dim)), requires_grad=True\n        )  # trainable parameter\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state).tanh()  # action.tanh()\n    def get_action(self, state: Tensor) -> (Tensor, Tensor):  # for exploration",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "CriticPPO",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class CriticPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, _action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, 1])\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state)  # advantage value\ndef build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)\n        if env_args is None:  # dummy env_args\n            env_args = {\n                \"env_name\": None,\n                \"state_dim\": None,\n                \"action_dim\": None,\n                \"if_discrete\": None,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "AgentBase",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class AgentBase:\n    def __init__(\n        self,\n        net_dims: [int],\n        state_dim: int,\n        action_dim: int,\n        gpu_id: int = 0,\n        args: Config = Config(),\n    ):\n        self.state_dim = state_dim",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "AgentPPO",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class AgentPPO(AgentBase):\n    def __init__(\n        self,\n        net_dims: [int],\n        state_dim: int,\n        action_dim: int,\n        gpu_id: int = 0,\n        args: Config = Config(),\n    ):\n        self.if_off_policy = False",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "PendulumEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class PendulumEnv(gym.Wrapper):  # a demo of custom gym env\n    def __init__(self):\n        gym.logger.set_level(40)  # Block warning\n        gym_env_name = \"Pendulum-v0\" if gym.__version__ < \"0.18.0\" else \"Pendulum-v1\"\n        super().__init__(env=gym.make(gym_env_name))\n        \"\"\"the necessary env information when you design a custom env\"\"\"\n        self.env_name = gym_env_name  # the name of this env.\n        self.state_dim = self.observation_space.shape[0]  # feature number of state\n        self.action_dim = self.action_space.shape[0]  # feature number of action\n        self.if_discrete = False  # discrete action or continuous action",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "Evaluator",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class Evaluator:\n    def __init__(\n        self, eval_env, eval_per_step: int = 1e4, eval_times: int = 8, cwd: str = \".\"\n    ):\n        self.cwd = cwd\n        self.env_eval = eval_env\n        self.eval_step = 0\n        self.total_step = 0\n        self.start_time = time.time()\n        self.eval_times = (",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "build_mlp",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])\n    del net_list[-1]  # remove the activation of output layer\n    return nn.Sequential(*net_list)\nclass Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "get_gym_env_args",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def get_gym_env_args(env, if_print: bool) -> dict:\n    if {\"unwrapped\", \"observation_space\", \"action_space\", \"spec\"}.issubset(\n        dir(env)\n    ):  # isinstance(env, gym.Env):\n        env_name = env.unwrapped.spec.id\n        state_shape = env.observation_space.shape\n        state_dim = (\n            state_shape[0] if len(state_shape) == 1 else state_shape\n        )  # sometimes state_dim is a list\n        if_discrete = isinstance(env.action_space, gym.spaces.Discrete)",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "kwargs_filter",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def kwargs_filter(function, kwargs: dict) -> dict:\n    import inspect\n    sign = inspect.signature(function).parameters.values()\n    sign = {val.name for val in sign}\n    common_args = sign.intersection(kwargs.keys())\n    return {key: kwargs[key] for key in common_args}  # filtered kwargs\ndef build_env(env_class=None, env_args=None):\n    if env_class.__module__ == \"gym.envs.registration\":  # special rule\n        env = env_class(id=env_args[\"env_name\"])\n    else:",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "build_env",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def build_env(env_class=None, env_args=None):\n    if env_class.__module__ == \"gym.envs.registration\":  # special rule\n        env = env_class(id=env_args[\"env_name\"])\n    else:\n        env = env_class(**kwargs_filter(env_class.__init__, env_args.copy()))\n    for attr_str in (\"env_name\", \"state_dim\", \"action_dim\", \"if_discrete\"):\n        setattr(env, attr_str, env_args[attr_str])\n    return env\nclass AgentBase:\n    def __init__(",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def train_agent(args: Config):\n    args.init_before_training()\n    env = build_env(args.env_class, args.env_args)\n    agent = args.agent_class(\n        args.net_dims, args.state_dim, args.action_dim, gpu_id=args.gpu_id, args=args\n    )\n    agent.states = env.reset()[np.newaxis, :]\n    evaluator = Evaluator(\n        eval_env=build_env(args.env_class, args.env_args),\n        eval_per_step=args.eval_per_step,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "render_agent",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def render_agent(\n    env_class,\n    env_args: dict,\n    net_dims: [int],\n    agent_class,\n    actor_path: str,\n    render_times: int = 8,\n):\n    env = build_env(env_class, env_args)\n    state_dim = env_args[\"state_dim\"]",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "get_rewards_and_steps",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def get_rewards_and_steps(\n    env, actor, if_render: bool = False\n) -> (float, int):  # cumulative_rewards and episode_steps\n    device = next(actor.parameters()).device  # net.parameters() is a Python generator.\n    state = env.reset()\n    episode_steps = 0\n    cumulative_returns = 0.0  # sum of rewards in an episode\n    for episode_steps in range(12345):\n        tensor_state = torch.as_tensor(\n            state, dtype=torch.float32, device=device",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def train(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def test(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def get_trading_days(start, end):\n    nyse = tc.get_calendar(\"NYSE\")\n    df = nyse.sessions_in_range(\n        pd.Timestamp(start, tz=pytz.UTC), pd.Timestamp(end, tz=pytz.UTC)\n    )\n    trading_days = []\n    for day in df:\n        trading_days.append(str(day)[:10])\n    return trading_days\ndef alpaca_history(key, secret, url, start, end):",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "alpaca_history",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def alpaca_history(key, secret, url, start, end):\n    api = tradeapi.REST(key, secret, url, \"v2\")\n    trading_days = get_trading_days(start, end)\n    df = pd.DataFrame()\n    for day in trading_days:\n        df = df.append(\n            api.get_portfolio_history(date_start=day, timeframe=\"5Min\").df.iloc[:78]\n        )\n    equities = df.equity.values\n    cumu_returns = equities / equities[0]",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DIA_history",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def DIA_history(start):\n    data_df = yf.download([\"^DJI\"], start=start, interval=\"5m\")\n    data_df = data_df.iloc[:]\n    baseline_returns = data_df[\"Adj Close\"].values / data_df[\"Adj Close\"].values[0]\n    return data_df, baseline_returns\n# -----------------------------------------------------------------------------------------------------------------------------------------",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "MODELS = {\"ppo\": AgentPPO}\nOFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "OFF_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "OFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "ON_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "ON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "GroupByScaler",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "class GroupByScaler(BaseEstimator, TransformerMixin):\n    \"\"\"Sklearn-like scaler that scales considering groups of data.\n    In the financial setting, this scale can be used to normalize a DataFrame\n    with time series of multiple tickers. The scaler will fit and transform\n    data for each ticker independently.\n    \"\"\"\n    def __init__(self, by, scaler=MaxAbsScaler, columns=None, scaler_kwargs=None):\n        \"\"\"Initializes GoupBy scaler.\n        Args:\n            by: Name of column that will be used to group.",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "class FeatureEngineer:\n    \"\"\"Provides methods for preprocessing the stock price data\n    Attributes\n    ----------\n        use_technical_indicator : boolean\n            we technical indicator or not\n        tech_indicator_list : list\n            a list of technical indicator names (modified from neofinrl_config.py)\n        use_turbulence : boolean\n            use turbulence index or not",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "kind": 2,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "def load_dataset(*, file_name: str) -> pd.DataFrame:\n    \"\"\"\n    load csv dataset from path\n    :return: (df) pandas dataframe\n    \"\"\"\n    # _data = pd.read_csv(f\"{config.DATASET_DIR}/{file_name}\")\n    _data = pd.read_csv(file_name)\n    return _data\ndef data_split(df, start, end, target_date_col=\"date\"):\n    \"\"\"",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "kind": 2,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "def data_split(df, start, end, target_date_col=\"date\"):\n    \"\"\"\n    split the dataset into training or testing using date\n    :param data: (df) pandas dataframe, start, end\n    :return: (df) pandas dataframe\n    \"\"\"\n    data = df[(df[target_date_col] >= start) & (df[target_date_col] < end)]\n    data = data.sort_values([target_date_col, \"tic\"], ignore_index=True)\n    data.index = data[target_date_col].factorize()[0]\n    return data",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "convert_to_datetime",
        "kind": 2,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "def convert_to_datetime(time):\n    time_fmt = \"%Y-%m-%dT%H:%M:%S\"\n    if isinstance(time, str):\n        return datetime.datetime.strptime(time, time_fmt)\nclass GroupByScaler(BaseEstimator, TransformerMixin):\n    \"\"\"Sklearn-like scaler that scales considering groups of data.\n    In the financial setting, this scale can be used to normalize a DataFrame\n    with time series of multiple tickers. The scaler will fit and transform\n    data for each ticker independently.\n    \"\"\"",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "TushareDownloader",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.tusharedownloader",
        "description": "lib.rl.meta.preprocessor.tusharedownloader",
        "peekOfCode": "class TushareDownloader:\n    \"\"\"Provides methods for retrieving daily stock data from\n    tushare API\n    Attributes\n    ----------\n        start_date : str\n            start date of the data (modified from config.py)\n        end_date : str\n            end date of the data (modified from config.py)\n        ticker_list : list",
        "detail": "lib.rl.meta.preprocessor.tusharedownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "peekOfCode": "class YahooDownloader:\n    \"\"\"Provides methods for retrieving daily stock data from\n    Yahoo Finance API\n    Attributes\n    ----------\n        start_date : str\n            start date of the data (modified from neofinrl_config.py)\n        end_date : str\n            end date of the data (modified from neofinrl_config.py)\n        ticker_list : list",
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self, data_source, tech_indicator=None, vix=None, **kwargs):\n        if data_source == \"alpaca\":\n            try:\n                API_KEY = kwargs.get(\"API_KEY\")\n                API_SECRET = kwargs.get(\"API_SECRET\")\n                API_BASE_URL = kwargs.get(\"API_BASE_URL\")\n                self.processor = Alpaca(API_KEY, API_SECRET, API_BASE_URL)\n                jprint(\"Alpaca successfully connected\")\n            except BaseException:",
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRAIN_START_DATE = \"2019-01-01\"\nTRAIN_END_DATE = \"2019-12-31\"\nTEST_START_DATE = \"2020-01-01\"\nTEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRAIN_END_DATE = \"2019-12-31\"\nTEST_START_DATE = \"2020-01-01\"\nTEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TEST_START_DATE = \"2020-01-01\"\nTEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "PATH_OF_DATA",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "PATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "READ_DATA_FROM_LOCAL",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "READ_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",\n]",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "INDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",\n]\nFAANG_TICKER = [\"FB\", \"AMZN\", \"AAPL\", \"NFLX\", \"GOOG\"]",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "FAANG_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "FAANG_TICKER = [\"FB\", \"AMZN\", \"AAPL\", \"NFLX\", \"GOOG\"]\n# Dow 30 constituents at 2019/01\nDOW_30_TICKER = [\n    \"AAPL\",\n    \"MSFT\",\n    \"JPM\",\n    \"V\",\n    \"RTX\",\n    \"PG\",\n    \"GS\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "DOW_30_TICKER = [\n    \"AAPL\",\n    \"MSFT\",\n    \"JPM\",\n    \"V\",\n    \"RTX\",\n    \"PG\",\n    \"GS\",\n    \"NKE\",\n    \"DIS\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "NAS_100_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "NAS_100_TICKER = [\n    \"AMGN\",\n    \"AAPL\",\n    \"AMAT\",\n    \"INTC\",\n    \"PCAR\",\n    \"PAYX\",\n    \"MSFT\",\n    \"ADBE\",\n    \"CSCO\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "SP_500_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "SP_500_TICKER = [\n    \"A\",\n    \"AAL\",\n    \"AAP\",\n    \"AAPL\",\n    \"ABBV\",\n    \"ABC\",\n    \"ABMD\",\n    \"ABT\",\n    \"ACN\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "kind": 6,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "class OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"\n    STOP_LIMIT = \"stop_limit\"\n    TRAILING_STOP = \"trailing_stop\"\nclass TimeInForce():",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "kind": 6,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "class OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"\n    STOP_LIMIT = \"stop_limit\"\n    TRAILING_STOP = \"trailing_stop\"\nclass TimeInForce():\n    DAY = \"day\"\n    GTC = \"gtc\"\n    OPG = \"opg\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "kind": 6,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "class TimeInForce():\n    DAY = \"day\"\n    GTC = \"gtc\"\n    OPG = \"opg\"\n    CLS = \"cls\"\n    IOC = \"ioc\"\n    FOK = \"fok\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "now = datetime.datetime.now().strftime(\"%Y%m%d-%Hh%M\")\nst.write(\"Current Date and Time:\", now)\nMAIN_RESULTS_DIR = 'pages/data' + now\nDATA_SAVE_DIR       = MAIN_RESULTS_DIR + \"/datasets\"\nTRAINED_MODEL_DIR   = MAIN_RESULTS_DIR + \"/trained_models\"\nTENSORBOARD_LOG_DIR = MAIN_RESULTS_DIR + \"/tensorboard_log\"\nRESULTS_DIR         = MAIN_RESULTS_DIR + \"/main_results\"\nDATA_FRAME_DIR      = MAIN_RESULTS_DIR + \"/data_frame\"\n# date format: '%Y-%m-%d'\nTRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "MAIN_RESULTS_DIR",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "MAIN_RESULTS_DIR = 'pages/data' + now\nDATA_SAVE_DIR       = MAIN_RESULTS_DIR + \"/datasets\"\nTRAINED_MODEL_DIR   = MAIN_RESULTS_DIR + \"/trained_models\"\nTENSORBOARD_LOG_DIR = MAIN_RESULTS_DIR + \"/tensorboard_log\"\nRESULTS_DIR         = MAIN_RESULTS_DIR + \"/main_results\"\nDATA_FRAME_DIR      = MAIN_RESULTS_DIR + \"/data_frame\"\n# date format: '%Y-%m-%d'\nTRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657\n# TRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TENSORBOARD_LOG_DIR = MAIN_RESULTS_DIR + \"/tensorboard_log\"\nRESULTS_DIR         = MAIN_RESULTS_DIR + \"/main_results\"\nDATA_FRAME_DIR      = MAIN_RESULTS_DIR + \"/data_frame\"\n# date format: '%Y-%m-%d'\nTRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657\n# TRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\n# TRADE_START_DATE = \"2021-11-01\"\n# TRADE_END_DATE = \"2021-12-01\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657\n# TRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\n# TRADE_START_DATE = \"2021-11-01\"\n# TRADE_END_DATE = \"2021-12-01\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\n# TRADE_START_DATE = \"2021-11-01\"\n# TRADE_END_DATE = \"2021-12-01\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TEST_END_DATE = \"2021-10-01\"\n# TRADE_START_DATE = \"2021-11-01\"\n# TRADE_END_DATE = \"2021-12-01\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"cci_30\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRADE_END_DATE = '2023-03-01'\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"cci_30\",\n    \"dx_30\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "INDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"cci_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",\n]",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "A2C_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "A2C_PARAMS = {\"n_steps\": 5, \"ent_coef\": 0.01, \"learning_rate\": 0.0007}\nPPO_PARAMS = {\n    \"n_steps\": 2048,\n    \"ent_coef\": 0.01,\n    \"learning_rate\": 0.00025,\n    \"batch_size\": 64,\n}\nDDPG_PARAMS = {\"batch_size\": 128, \"buffer_size\": 50000, \"learning_rate\": 0.001}\nTD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "PPO_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "PPO_PARAMS = {\n    \"n_steps\": 2048,\n    \"ent_coef\": 0.01,\n    \"learning_rate\": 0.00025,\n    \"batch_size\": 64,\n}\nDDPG_PARAMS = {\"batch_size\": 128, \"buffer_size\": 50000, \"learning_rate\": 0.001}\nTD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {\n    \"batch_size\": 64,",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DDPG_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "DDPG_PARAMS = {\"batch_size\": 128, \"buffer_size\": 50000, \"learning_rate\": 0.001}\nTD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {\n    \"batch_size\": 64,\n    \"buffer_size\": 100000,\n    \"learning_rate\": 0.0001,\n    \"learning_starts\": 100,\n    \"ent_coef\": \"auto_0.1\",\n}\nERL_PARAMS = {",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TD3_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {\n    \"batch_size\": 64,\n    \"buffer_size\": 100000,\n    \"learning_rate\": 0.0001,\n    \"learning_starts\": 100,\n    \"ent_coef\": \"auto_0.1\",\n}\nERL_PARAMS = {\n    \"learning_rate\": 3e-5,",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "SAC_PARAMS = {\n    \"batch_size\": 64,\n    \"buffer_size\": 100000,\n    \"learning_rate\": 0.0001,\n    \"learning_starts\": 100,\n    \"ent_coef\": \"auto_0.1\",\n}\nERL_PARAMS = {\n    \"learning_rate\": 3e-5,\n    \"batch_size\": 2048,",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ERL_PARAMS = {\n    \"learning_rate\": 3e-5,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": 512,\n    \"target_step\": 5000,\n    \"eval_gap\": 30,\n    \"eval_times\": 64,  # bug fix:KeyError: 'eval_times' line 68, in get_model model.eval_times = model_kwargs[\"eval_times\"]\n}",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "RLlib_PARAMS = {\"lr\": 5e-5, \"train_batch_size\": 500, \"gamma\": 0.99}\n# Possible time zones\nTIME_ZONE_SHANGHAI = \"Asia/Shanghai\"  # Hang Seng HSI, SSE, CSI\nTIME_ZONE_USEASTERN = \"US/Eastern\"  # Dow, Nasdaq, SP\nTIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_SHANGHAI",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_SHANGHAI = \"Asia/Shanghai\"  # Hang Seng HSI, SSE, CSI\nTIME_ZONE_USEASTERN = \"US/Eastern\"  # Dow, Nasdaq, SP\nTIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_USEASTERN",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_USEASTERN = \"US/Eastern\"  # Dow, Nasdaq, SP\nTIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_PARIS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_BERLIN",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_JAKARTA",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_SELFDEFINED",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "USE_TIME_ZONE_SELFDEFINED",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "USE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_SECRET",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "BINANCE_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "BINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"\n    STOP_LIMIT = \"stop_limit\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "ALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\n# ALPACA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\n# ALPACA_API_SECRET = \"BxT64PIQtDBb*tnW\"\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_SECRET",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "ALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\n# ALPACA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\n# ALPACA_API_SECRET = \"BxT64PIQtDBb*tnW\"\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "ALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\n# ALPACA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\n# ALPACA_API_SECRET = \"BxT64PIQtDBb*tnW\"\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "BINANCE_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "BINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "SINGLE_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SINGLE_TICKER = [\"AAPL\"]\n# Dow 30 constituents in 2021/10\n# check https://wrds-www.wharton.upenn.edu/ for U.S. index constituents\nDOW_30_TICKER = [\n    \"AXP\",\n    \"AMGN\",\n    \"AAPL\",\n    \"BA\",\n    \"CAT\",\n    \"CSCO\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "DOW_30_TICKER = [\n    \"AXP\",\n    \"AMGN\",\n    \"AAPL\",\n    \"BA\",\n    \"CAT\",\n    \"CSCO\",\n    \"CVX\",\n    \"GS\",\n    \"HD\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "NAS_100_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "NAS_100_TICKER = [\n    \"AMGN\",\n    \"AAPL\",\n    \"AMAT\",\n    \"INTC\",\n    \"PCAR\",\n    \"PAYX\",\n    \"MSFT\",\n    \"ADBE\",\n    \"CSCO\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SP_500_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SP_500_TICKER = [\n    \"A\",\n    \"AAL\",\n    \"AAP\",\n    \"AAPL\",\n    \"ABBV\",\n    \"ABC\",\n    \"ABMD\",\n    \"ABT\",\n    \"ACN\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "HSI_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "HSI_50_TICKER = [\n    \"0011.HK\",\n    \"0005.HK\",\n    \"0012.HK\",\n    \"0006.HK\",\n    \"0003.HK\",\n    \"0016.HK\",\n    \"0019.HK\",\n    \"0002.HK\",\n    \"0001.HK\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SSE_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SSE_50_TICKER = [\n    \"600000.XSHG\",\n    \"600036.XSHG\",\n    \"600104.XSHG\",\n    \"600030.XSHG\",\n    \"601628.XSHG\",\n    \"601166.XSHG\",\n    \"601318.XSHG\",\n    \"601328.XSHG\",\n    \"601088.XSHG\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "CSI_300_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "CSI_300_TICKER = [\n    \"600000.XSHG\",\n    \"600004.XSHG\",\n    \"600009.XSHG\",\n    \"600010.XSHG\",\n    \"600011.XSHG\",\n    \"600015.XSHG\",\n    \"600016.XSHG\",\n    \"600018.XSHG\",\n    \"600019.XSHG\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "CAC_40_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "CAC_40_TICKER = [\n    \"AC.PA\",\n    \"AI.PA\",\n    \"AIR.PA\",\n    \"MT.AS\",\n    \"ATO.PA\",\n    \"CS.PA\",\n    \"BNP.PA\",\n    \"EN.PA\",\n    \"CAP.PA\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DAX_30_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "DAX_30_TICKER = [\n    \"DHER.DE\",\n    \"RWE.DE\",\n    \"FRE.DE\",\n    \"MTX.DE\",\n    \"MRK.DE\",\n    \"LIN.DE\",\n    \"ALV.DE\",\n    \"VNA.DE\",\n    \"EOAN.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "TECDAX_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "TECDAX_TICKER = [\n    \"ADV.DE\",\n    \"AFX.DE\",\n    \"AM3D.DE\",\n    \"BC8.DE\",\n    \"COK.DE\",\n    \"DLG.DE\",\n    \"DRI.DE\",\n    \"DRW3.DE\",\n    \"EVT.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "MDAX_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "MDAX_50_TICKER = [\n    \"1COV.DE\",\n    \"AIR.DE\",\n    \"AOX.DE\",\n    \"ARL.DE\",\n    \"BNR.DE\",\n    \"BOSS.DE\",\n    \"DEQ.DE\",\n    \"DUE.DE\",\n    \"DWNI.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SDAX_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SDAX_50_TICKER = [\n    \"AAD.DE\",\n    \"ACX.DE\",\n    \"ADJ.DE\",\n    \"ADL.DE\",\n    \"BDT.DE\",\n    \"BIO3.DE\",\n    \"BVB.DE\",\n    \"BYW6.DE\",\n    \"CWC.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "LQ45_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "LQ45_TICKER = [\n    \"ACES.JK\",\n    \"ADRO.JK\",\n    \"AKRA.JK\",\n    \"ANTM.JK\",\n    \"ASII.JK\",\n    \"BBCA.JK\",\n    \"BBNI.JK\",\n    \"BBRI.JK\",\n    \"BBTN.JK\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SRI_KEHATI_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SRI_KEHATI_TICKER = [\n    \"AALI.JK\",\n    \"ADHI.JK\",\n    \"ASII.JK\",\n    \"BBCA.JK\",\n    \"BBNI.JK\",\n    \"BBRI.JK\",\n    \"BBTN.JK\",\n    \"BMRI.JK\",\n    \"BSDE.JK\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "FX_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "FX_TICKER = [\n    \"AUDCAD=X\",\n    \"AUDCHF=X\",\n    \"AUDJPY=X\",\n    \"AUDNZD=X\",\n    \"AUDSGD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "custom_index",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "custom_index = [\"MMM\", \"AXP\", \"BA\", \"CAT\", \"CSCO\"]\nsector_dict = {\n    \"Technology\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"META\", \"TSLA\"],\n    \"Healthcare\": [\"JNJ\", \"PFE\", \"MRK\", \"UNH\", \"ABBV\"],\n    \"Finance\": [\"JPM\", \"BAC\", \"WFC\", \"C\", \"GS\"],\n    \"Consumer Discretionary\": [\"AMZN\", \"HD\", \"NKE\", \"MCD\", \"SBUX\"],\n    \"Energy\": [\"XOM\", \"CVX\", \"COP\", \"PSX\", \"VLO\"]\n}\nusa_dict = {\n    # usa_dict[S&P 500]",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "sector_dict",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "sector_dict = {\n    \"Technology\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"META\", \"TSLA\"],\n    \"Healthcare\": [\"JNJ\", \"PFE\", \"MRK\", \"UNH\", \"ABBV\"],\n    \"Finance\": [\"JPM\", \"BAC\", \"WFC\", \"C\", \"GS\"],\n    \"Consumer Discretionary\": [\"AMZN\", \"HD\", \"NKE\", \"MCD\", \"SBUX\"],\n    \"Energy\": [\"XOM\", \"CVX\", \"COP\", \"PSX\", \"VLO\"]\n}\nusa_dict = {\n    # usa_dict[S&P 500]\n  \"NYSE\": SP_500_TICKER  ",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "usa_dict",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "usa_dict = {\n    # usa_dict[S&P 500]\n  \"NYSE\": SP_500_TICKER  \n}\nindex_dict = {\n    \"Dow 30\": DOW_30_TICKER,\n    \"Nasdaq 100\": NAS_100_TICKER,\n    \"S&P 500\": SP_500_TICKER,\n    \"Hang Seng Index\" : HSI_50_TICKER, \n    \"SSE 50\" :SSE_50_TICKER, ",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "index_dict",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "index_dict = {\n    \"Dow 30\": DOW_30_TICKER,\n    \"Nasdaq 100\": NAS_100_TICKER,\n    \"S&P 500\": SP_500_TICKER,\n    \"Hang Seng Index\" : HSI_50_TICKER, \n    \"SSE 50\" :SSE_50_TICKER, \n    \"CSI 300\" : CSI_300_TICKER, \n    \"CAC 40\" : CAC_40_TICKER, \n    \"DAX 30\" : DAX_30_TICKER, \n    \"TecDAX\" : TECDAX_TICKER, ",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "build_parser",
        "kind": 2,
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "peekOfCode": "def build_parser():\n    parser = ArgumentParser()\n    parser.add_argument(\n        \"--mode\",\n        dest=\"mode\",\n        help=\"start mode, train, download_data\" \" backtest\",\n        metavar=\"MODE\",\n        default=\"train\",\n    )\n    return parser",
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "kind": 2,
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "peekOfCode": "def check_and_make_directories(directories: list[str]):\n    for directory in directories:\n        if not os.path.exists(\"./\" + directory):\n            os.makedirs(\"./\" + directory)\ndef main() -> int:\n    parser = build_parser()\n    options = parser.parse_args()\n    check_and_make_directories(\n        [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n    )",
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "peekOfCode": "def main() -> int:\n    parser = build_parser()\n    options = parser.parse_args()\n    check_and_make_directories(\n        [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n    )\n    if options.mode == \"train\":\n        from lib.rl import train\n        env = StockTradingEnv\n        # demo for elegantrl",
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def get_daily_return(df, value_col_name=\"account_value\"):\n    df = deepcopy(df)\n    df[\"daily_return\"] = df[value_col_name].pct_change(1)\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace=True, drop=True)\n    df.index = df.index.tz_localize(\"UTC\")\n    return pd.Series(df[\"daily_return\"], index=df.index)\ndef convert_daily_return_to_pyfolio_ts(df):\n    strategy_ret = df.copy()\n    strategy_ret[\"date\"] = pd.to_datetime(strategy_ret[\"date\"])",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "convert_daily_return_to_pyfolio_ts",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def convert_daily_return_to_pyfolio_ts(df):\n    strategy_ret = df.copy()\n    strategy_ret[\"date\"] = pd.to_datetime(strategy_ret[\"date\"])\n    strategy_ret.set_index(\"date\", drop=False, inplace=True)\n    strategy_ret.index = strategy_ret.index.tz_localize(\"UTC\")\n    del strategy_ret[\"date\"]\n    return pd.Series(strategy_ret[\"daily_return\"].values, index=strategy_ret.index)\ndef backtest_stats(account_value, value_col_name=\"account_value\"):\n    dr_test = get_daily_return(account_value, value_col_name=value_col_name)\n    perf_stats_all = timeseries.perf_stats(",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def backtest_stats(account_value, value_col_name=\"account_value\"):\n    dr_test = get_daily_return(account_value, value_col_name=value_col_name)\n    perf_stats_all = timeseries.perf_stats(\n        returns=dr_test,\n        positions=None,\n        transactions=None,\n        turnover_denom=\"AGB\",\n    )\n    # jprint(perf_stats_all)\n    st.table(perf_stats_all)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def backtest_plot(\n    account_value,\n    baseline_start=config.TRADE_START_DATE,\n    baseline_end=config.TRADE_END_DATE,\n    baseline_ticker=\"^DJI\",\n    value_col_name=\"account_value\",\n):\n    df = deepcopy(account_value)\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    test_returns = get_daily_return(df, value_col_name=value_col_name)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def get_baseline(ticker, start, end):\n    return YahooDownloader(\n        start_date=start, end_date=end, ticker_list=[ticker]\n    ).fetch_data()\ndef trx_plot(df_trade, df_actions, ticker_list):\n    df_trx = pd.DataFrame(np.array(df_actions[\"transactions\"].to_list()))\n    df_trx.columns = ticker_list\n    df_trx.index = df_actions[\"date\"]\n    df_trx.index.name = \"\"\n    for i in range(df_trx.shape[1]):",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "trx_plot",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def trx_plot(df_trade, df_actions, ticker_list):\n    df_trx = pd.DataFrame(np.array(df_actions[\"transactions\"].to_list()))\n    df_trx.columns = ticker_list\n    df_trx.index = df_actions[\"date\"]\n    df_trx.index.name = \"\"\n    for i in range(df_trx.shape[1]):\n        df_trx_temp = df_trx.iloc[:, i]\n        df_trx_temp_sign = np.sign(df_trx_temp)\n        buying_signal = df_trx_temp_sign.apply(lambda x: x > 0)\n        selling_signal = df_trx_temp_sign.apply(lambda x: x < 0)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "transfer_date",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def transfer_date(str_dat):\n    return datetime.datetime.strptime(str_dat, \"%Y-%m-%d\").date().strftime(\"%m/%d/%Y\")\ndef plot_result_from_csv(\n    csv_file: str,\n    column_as_x: str,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Result\",\n    num_days_xticks: int = 20,\n    xrotation: int = 0,",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_result_from_csv",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_result_from_csv(\n    csv_file: str,\n    column_as_x: str,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Result\",\n    num_days_xticks: int = 20,\n    xrotation: int = 0,\n):\n    result = pd.read_csv(csv_file)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_result",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_result(\n    result: pd.DataFrame(),\n    column_as_x: str,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Result\",\n    num_days_xticks: int = 20,\n    xrotation: int = 0,\n):\n    columns = result.columns",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_if_overlap",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def get_if_overlap(fig, ax):\n    fig.canvas.draw()\n    # 获取日期标签的边界框\n    bboxes = [label.get_window_extent() for label in ax.get_xticklabels()]\n    # 计算日期标签之间的距离\n    distances = [bboxes[i + 1].x0 - bboxes[i].x1 for i in range(len(bboxes) - 1)]\n    # 如果有任何距离小于0，说明有重叠\n    if any(distance < 0 for distance in distances):\n        if_overlap = True\n    else:",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_return(\n    result: pd.DataFrame(),\n    column_as_x: str,\n    if_need_calc_return: bool,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Return\",\n    if_transfer_date: bool = True,\n    select_start_date: str = None,\n    select_end_date: str = None,",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return_from_csv",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_return_from_csv(\n    csv_file: str,\n    column_as_x: str,\n    if_need_calc_return: bool,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Return\",\n    if_transfer_date: bool = True,\n    select_start_date: str = None,\n    select_end_date: str = None,",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "lib.rl.test",
        "description": "lib.rl.test",
        "peekOfCode": "def test(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.test",
        "documentation": {}
    },
    {
        "label": "trade",
        "kind": 2,
        "importPath": "lib.rl.trade",
        "description": "lib.rl.trade",
        "peekOfCode": "def trade(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.trade",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "lib.rl.train",
        "description": "lib.rl.train",
        "peekOfCode": "def train(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.train",
        "documentation": {}
    },
    {
        "label": "WorkflowScheduler",
        "kind": 6,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "class WorkflowScheduler:\n    def __init__(self):\n        # Define labels and date ranges for different workflow modes\n        self.labels = {\n            \"Train\": (TRAIN_START_DATE, TRAIN_END_DATE),\n            \"Test\": (TEST_START_DATE, TEST_END_DATE),\n            \"Trade\": (TRADE_START_DATE, TRADE_END_DATE),\n        }\n        self.train_start_date = self.labels[\"Train\"][0]\n        self.train_end_date = self.labels[\"Train\"][1]",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "setFirstPageTitle",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def setFirstPageTitle() : \n    custom_css = \"\"\"\n    <style>\n    body {\n    background-color: black; /* Background color (black) */\n    font-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\n    color: white; /* Text color (white) */\n    line-height: 1.6; /* Line height for readability */\n    }\n    h1 {",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "set_inputs99",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def set_inputs99():\n    st.title(\"Dynamic Financial Reinforcement Learning\")\n    st.write(\"\"\"\n    This application simulates a dynamic dataset-driven financial reinforcement learning model, \n    which uses a rolling window technique to incrementally update the training and testing sets based on real-time market data.\n    The dataset is divided into training and testing segments, which adjust every W days to keep the model updated.\n    \"\"\")\nclass WorkflowScheduler:\n    def __init__(self):\n        # Define labels and date ranges for different workflow modes",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "get_full_path",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def get_full_path(fn):\n    file_path = os.path.join(DATA_FRAME_DIR, fn )\n    return file_path\ndef set_yahoo_data_frame(ticker_ls, wf) :\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date  = \n  wf.train_start_date,\n  end_date = wf.trade_end_date,\n  ticker_list = ticker_ls).fetch_data()\n  df.sort_values(['date','tic'],ignore_index=True).head()",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "set_yahoo_data_frame",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def set_yahoo_data_frame(ticker_ls, wf) :\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date  = \n  wf.train_start_date,\n  end_date = wf.trade_end_date,\n  ticker_list = ticker_ls).fetch_data()\n  df.sort_values(['date','tic'],ignore_index=True).head()\n  fe = FeatureEngineer(\n                    use_technical_indicator=True,\n                    tech_indicator_list = INDICATORS,",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def train_agent(agent, model_name = \"a2c\", total_timesteps=50000):\n    \"\"\"\n    Train a model with the provided agent and model_name and total_timesteps \n    \"\"\"\n    # Get the model for A2C if applicable\n    __cached__model_ = agent.get_model(model_name)\n    # Set up logger\n    _tmp_path = RESULTS_DIR + '/' + model_name\n    _new_logger = configure(_tmp_path, [\"stdout\", \"csv\", \"tensorboard\"])\n    # Set the new logger",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "predict_with_models",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def predict_with_models(models, environment):\n      \"\"\"\n      Perform predictions using multiple trained models in the specified environment.\n      Parameters:\n      - models: A dictionary of trained models with names as keys.\n      - environment: The trading environment to be used for predictions.\n      Returns:\n      - results: A dictionary containing DataFrames of account values and actions for each model.\n      \"\"\"\n      results = {}",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "GetTickerList",
        "kind": 2,
        "importPath": "lib.utility.inputs",
        "description": "lib.utility.inputs",
        "peekOfCode": "def GetTickerList():\n    \"\"\"\n    Generate a list of tickers based on user selection (Index, Sector, or NYSE) in a Streamlit app.\n    Parameters:\n    - index_dict: Dictionary of indexes and their respective tickers.\n    - sector_dict: Dictionary of sectors and their respective tickers.\n    - usa_dict: Dictionary of NYSE-specific categories and tickers.\n    - SP_500_TICKER: List of tickers for the S&P 500.\n    Returns:\n    - final_ticker_list: List of selected tickers.",
        "detail": "lib.utility.inputs",
        "documentation": {}
    },
    {
        "label": "jprint",
        "kind": 2,
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "peekOfCode": "def jprint(s1 = '', s2 = '' , s3 = '', s4 = \"\"):\n  a1 = str(s1) + str(s2) + str(s3) +str(s4)\n  print   (a1)\n  st.write(a1)\n# def jprint2(*args):\n#     # Convert all inputs to strings and handle lists/arrays\n#     result = []\n#     for arg in args:\n#         if isinstance(arg, (list, tuple)):  # Check if the argument is a list or tuple\n#             result.extend(map(str, arg))    # Convert each item in the list to a string",
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "lib.sn",
        "description": "lib.sn",
        "peekOfCode": "class MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = REST(base_url=base_url, key_id=api_key, secret_key=api_secret)\n    def position_sizing(self): \n        cash = self.get_cash() \n        last_price = self.get_last_price(self.symbol)",
        "detail": "lib.sn",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "lib.sn",
        "description": "lib.sn",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None ",
        "detail": "lib.sn",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "lib.sn",
        "description": "lib.sn",
        "peekOfCode": "trader = Trader()\ntrader.add_strategy(strategy)\ntrader.run_all()",
        "detail": "lib.sn",
        "documentation": {}
    },
    {
        "label": "get_gdp_data",
        "kind": 2,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "def get_gdp_data():\n    \"\"\"Grab GDP data from a CSV file.\n    This uses caching to avoid having to read the file every time. If we were\n    reading from an HTTP endpoint instead of a file, it's a good idea to set\n    a maximum age to the cache with the TTL argument: @st.cache_data(ttl='1d')\n    \"\"\"\n    # Instead of a CSV on disk, you could read from an HTTP endpoint here too.\n    DATA_FILENAME = Path(__file__).parent/'data/gdp_data.csv'\n    raw_gdp_df = pd.read_csv(DATA_FILENAME)\n    MIN_YEAR = 1960",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "gdp_df",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "gdp_df = get_gdp_data()\n# -----------------------------------------------------------------------------\n# Draw the actual page\n# Set the title that appears at the top of the page.\n'''\n# :earth_americas: GDP dashboard\nBrowse GDP data from the [World Bank Open Data](https://data.worldbank.org/) website. As you'll\nnotice, the data only goes to 2022 right now, and datapoints for certain years are often missing.\nBut it's otherwise a great (and did I mention _free_?) source of data.\n'''",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "min_value",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "min_value = gdp_df['Year'].min()\nmax_value = gdp_df['Year'].max()\nfrom_year, to_year = st.slider(\n    'Which years are you interested in?',\n    min_value=min_value,\n    max_value=max_value,\n    value=[min_value, max_value])\ncountries = gdp_df['Country Code'].unique()\nif not len(countries):\n    st.warning(\"Select at least one country\")",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "max_value = gdp_df['Year'].max()\nfrom_year, to_year = st.slider(\n    'Which years are you interested in?',\n    min_value=min_value,\n    max_value=max_value,\n    value=[min_value, max_value])\ncountries = gdp_df['Country Code'].unique()\nif not len(countries):\n    st.warning(\"Select at least one country\")\nselected_countries = st.multiselect(",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "countries",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "countries = gdp_df['Country Code'].unique()\nif not len(countries):\n    st.warning(\"Select at least one country\")\nselected_countries = st.multiselect(\n    'Which countries would you like to view?',\n    countries,\n    ['DEU', 'FRA', 'GBR', 'BRA', 'MEX', 'JPN'])\n''\n''\n''",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "selected_countries",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "selected_countries = st.multiselect(\n    'Which countries would you like to view?',\n    countries,\n    ['DEU', 'FRA', 'GBR', 'BRA', 'MEX', 'JPN'])\n''\n''\n''\n# Filter the data\nfiltered_gdp_df = gdp_df[\n    (gdp_df['Country Code'].isin(selected_countries))",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "filtered_gdp_df",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "filtered_gdp_df = gdp_df[\n    (gdp_df['Country Code'].isin(selected_countries))\n    & (gdp_df['Year'] <= to_year)\n    & (from_year <= gdp_df['Year'])\n]\nst.header('GDP over time', divider='gray')\n''\nst.line_chart(\n    filtered_gdp_df,\n    x='Year',",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "first_year",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "first_year = gdp_df[gdp_df['Year'] == from_year]\nlast_year = gdp_df[gdp_df['Year'] == to_year]\nst.header(f'GDP in {to_year}', divider='gray')\n''\ncols = st.columns(4)\nfor i, country in enumerate(selected_countries):\n    col = cols[i % len(cols)]\n    with col:\n        first_gdp = first_year[first_year['Country Code'] == country]['GDP'].iat[0] / 1000000000\n        last_gdp = last_year[last_year['Country Code'] == country]['GDP'].iat[0] / 1000000000",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "last_year",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "last_year = gdp_df[gdp_df['Year'] == to_year]\nst.header(f'GDP in {to_year}', divider='gray')\n''\ncols = st.columns(4)\nfor i, country in enumerate(selected_countries):\n    col = cols[i % len(cols)]\n    with col:\n        first_gdp = first_year[first_year['Country Code'] == country]['GDP'].iat[0] / 1000000000\n        last_gdp = last_year[last_year['Country Code'] == country]['GDP'].iat[0] / 1000000000\n        if math.isnan(first_gdp):",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "cols",
        "kind": 5,
        "importPath": "pages.gdp_dashboard.4_GDP_dashboard",
        "description": "pages.gdp_dashboard.4_GDP_dashboard",
        "peekOfCode": "cols = st.columns(4)\nfor i, country in enumerate(selected_countries):\n    col = cols[i % len(cols)]\n    with col:\n        first_gdp = first_year[first_year['Country Code'] == country]['GDP'].iat[0] / 1000000000\n        last_gdp = last_year[last_year['Country Code'] == country]['GDP'].iat[0] / 1000000000\n        if math.isnan(first_gdp):\n            growth = 'n/a'\n            delta_color = 'off'\n        else:",
        "detail": "pages.gdp_dashboard.4_GDP_dashboard",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\nfrom lib.rl.config_private import ALPACA_API_KEY, ALPACA_API_SECRET, ALPACA_API_BASE_URL\ntic = DOW_30_TICKER\ntic = [DOW_30_TICKER[0]]\nst.write(\"jojo\".join(str(ticker) for ticker in tic))\n# if tic = [\"AXP\"] has 1 row it work , but if tic = [\n#     \"AXP\",",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\nfrom lib.rl.config_private import ALPACA_API_KEY, ALPACA_API_SECRET, ALPACA_API_BASE_URL\ntic = DOW_30_TICKER\ntic = [DOW_30_TICKER[0]]\nst.write(\"jojo\".join(str(ticker) for ticker in tic))\n# if tic = [\"AXP\"] has 1 row it work , but if tic = [\n#     \"AXP\",\n#     \"AMGN\"",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\nfrom lib.rl.config_private import ALPACA_API_KEY, ALPACA_API_SECRET, ALPACA_API_BASE_URL\ntic = DOW_30_TICKER\ntic = [DOW_30_TICKER[0]]\nst.write(\"jojo\".join(str(ticker) for ticker in tic))\n# if tic = [\"AXP\"] has 1 row it work , but if tic = [\n#     \"AXP\",\n#     \"AMGN\"\n#     ] or greater than 1 I get the message below :",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\nfrom lib.rl.config_private import ALPACA_API_KEY, ALPACA_API_SECRET, ALPACA_API_BASE_URL\ntic = DOW_30_TICKER\ntic = [DOW_30_TICKER[0]]\nst.write(\"jojo\".join(str(ticker) for ticker in tic))\n# if tic = [\"AXP\"] has 1 row it work , but if tic = [\n#     \"AXP\",\n#     \"AMGN\"\n#     ] or greater than 1 I get the message below :\ndf = YahooDownloader(start_date = TRAIN_START_DATE,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "tic",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "tic = DOW_30_TICKER\ntic = [DOW_30_TICKER[0]]\nst.write(\"jojo\".join(str(ticker) for ticker in tic))\n# if tic = [\"AXP\"] has 1 row it work , but if tic = [\n#     \"AXP\",\n#     \"AMGN\"\n#     ] or greater than 1 I get the message below :\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = tic).fetch_data()",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "tic",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "tic = [DOW_30_TICKER[0]]\nst.write(\"jojo\".join(str(ticker) for ticker in tic))\n# if tic = [\"AXP\"] has 1 row it work , but if tic = [\n#     \"AXP\",\n#     \"AMGN\"\n#     ] or greater than 1 I get the message below :\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = tic).fetch_data()\ndf.sort_values(['date','tic']).head()",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = tic).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nst.write(len(df.tic.unique()))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 10,  # Example value, adjust as needed\n    'ppo': 10,\n    'ddpg': 10,\n    'sac' : 10,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 10,  # Example value, adjust as needed\n    'ppo': 10,\n    'ddpg': 10,\n    'sac' : 10,\n    'td3' : 10\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nst.write(df_summary)",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv(RESULTS_DIR + '/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    # temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\nst.write('Sharpe Ratio: ',sharpe)",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv(RESULTS_DIR + '/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    # temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\nst.write('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "api = tradeapi.REST(ALPACA_API_KEY, ALPACA_API_SECRET , ALPACA_API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    st.write(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": "pages.1_Stock_Sentiment",
        "description": "pages.1_Stock_Sentiment",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": "pages.1_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "finviz_url",
        "kind": 5,
        "importPath": "pages.1_Stock_Sentiment",
        "description": "pages.1_Stock_Sentiment",
        "peekOfCode": "finviz_url = \"https://finviz.com/quote.ashx?t=\"\nexample_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)",
        "detail": "pages.1_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": "pages.1_Stock_Sentiment",
        "description": "pages.1_Stock_Sentiment",
        "peekOfCode": "example_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\nnews_tables = {}",
        "detail": "pages.1_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "pages.1_Stock_Sentiment",
        "description": "pages.1_Stock_Sentiment",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\nnews_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")",
        "detail": "pages.1_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "news_tables",
        "kind": 5,
        "importPath": "pages.1_Stock_Sentiment",
        "description": "pages.1_Stock_Sentiment",
        "peekOfCode": "news_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")\n            news_table = html.find(id=\"news-table\")",
        "detail": "pages.1_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "ALPACA_API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom lib.rl.config import (\n    OrderType,\n    OrderSide,\n    TimeInForce,\n)\n# from alpaca.trading.enums import OrderSide, TimeInForce, OrderType\nfrom lib.rl.config_tickers import DOW_30_TICKER\nfrom lib.rl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom lib.rl.meta.preprocessor.preprocessors import FeatureEngineer, data_split",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nst.write(len(df.tic.unique()))\nst.write(df.tic.value_counts())",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nst.write(len(df.tic.unique()))\nst.write(df.tic.value_counts())\nst.write(df.head())",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nst.write(len(df.tic.unique()))\nst.write(df.tic.value_counts())\nst.write(df.head())\nst.write(df.tail())",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nst.write(len(df.tic.unique()))\nst.write(df.tic.value_counts())\nst.write(df.head())\nst.write(df.tail())\nst.write(df.shape)",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nst.write(len(df.tic.unique()))\nst.write(df.tic.value_counts())\nst.write(df.head())\nst.write(df.tail())\nst.write(df.shape)\nINDICATORS = ['macd',",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, ",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, ",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,\n    'td3' : 1\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nst.write(df_summary)\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value = pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nst.write('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value = pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nst.write('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df_account_value",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "df_account_value = pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nst.write('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()\nst.line_chart(df_account_value['account_value'])",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nst.write(\"==============Compare to DJIA===========\")",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],\n              baseline_end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "pages.2_Stock_Trading",
        "description": "pages.2_Stock_Trading",
        "peekOfCode": "api = tradeapi.REST(ALPACA_API_KEY, ALPACA_API_SECRET , ALPACA_API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    st.write(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,\n            qty=qty,",
        "detail": "pages.2_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "read_config",
        "kind": 2,
        "importPath": "pages.3_Setting",
        "description": "pages.3_Setting",
        "peekOfCode": "def read_config(file_path):\n    config = {}\n    with open(file_path, 'r') as file:\n        exec(file.read(), config)\n    return config\ndef write_config(file_path, config):\n    with open(file_path, 'w') as file:\n        file.write(\"# Configuration File\\n\\n\")\n        for key, value in config.items():\n            if not key.startswith('__'):",
        "detail": "pages.3_Setting",
        "documentation": {}
    },
    {
        "label": "write_config",
        "kind": 2,
        "importPath": "pages.3_Setting",
        "description": "pages.3_Setting",
        "peekOfCode": "def write_config(file_path, config):\n    with open(file_path, 'w') as file:\n        file.write(\"# Configuration File\\n\\n\")\n        for key, value in config.items():\n            if not key.startswith('__'):\n                if isinstance(value, str):\n                    file.write(f'{key} = \"{value}\"\\n')\n                elif isinstance(value, list):\n                    file.write(f'{key} = {value}\\n')\n                elif isinstance(value, dict):",
        "detail": "pages.3_Setting",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pages.3_Setting",
        "description": "pages.3_Setting",
        "peekOfCode": "def main():\n    st.title(\"Settings Page\")\n    # Read the configuration\n    config = read_config(config_file_path)\n    # Convert date strings to date objects\n    def parse_date(date_str):\n        try:\n            return datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        except ValueError:\n            return None",
        "detail": "pages.3_Setting",
        "documentation": {}
    },
    {
        "label": "config_file_path",
        "kind": 5,
        "importPath": "pages.3_Setting",
        "description": "pages.3_Setting",
        "peekOfCode": "config_file_path = 'lib/utility/config.py'\ndef read_config(file_path):\n    config = {}\n    with open(file_path, 'r') as file:\n        exec(file.read(), config)\n    return config\ndef write_config(file_path, config):\n    with open(file_path, 'w') as file:\n        file.write(\"# Configuration File\\n\\n\")\n        for key, value in config.items():",
        "detail": "pages.3_Setting",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pages.4_ensemble_stock_trading",
        "description": "pages.4_ensemble_stock_trading",
        "peekOfCode": "def main():\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    import pandas as pd\n    import numpy as np\n    import matplotlib\n    import matplotlib.pyplot as plt\n    # matplotlib.use('Agg')\n    import datetime\n    from lib.rl.config_tickers import DOW_30_TICKER",
        "detail": "pages.4_ensemble_stock_trading",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "class MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = REST(base_url=BASE_URL, key_id=API_KEY, secret_key=API_SECRET)\n    def position_sizing(self): \n        cash = self.get_cash() \n        last_price = self.get_last_price(self.symbol)",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "API_KEY = \"PKEJH4W0URAU56SHKQW3\" \nAPI_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nBASE_URL = \"https://paper-api.alpaca.markets\"\nALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nALPACA_CONFIG = {\n    \"API_KEY\":  \"PKEJH4W0URAU56SHKQW3\" ,",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nBASE_URL = \"https://paper-api.alpaca.markets\"\nALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nALPACA_CONFIG = {\n    \"API_KEY\":  \"PKEJH4W0URAU56SHKQW3\" ,\n    \"API_SECRET\": \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\",",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"\nALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nALPACA_CONFIG = {\n    \"API_KEY\":  \"PKEJH4W0URAU56SHKQW3\" ,\n    \"API_SECRET\": \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\",\n    \"PAPER\": True",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nALPACA_CONFIG = {\n    \"API_KEY\":  \"PKEJH4W0URAU56SHKQW3\" ,\n    \"API_SECRET\": \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\",\n    \"PAPER\": True\n}",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "ALPACA_CONFIG",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "ALPACA_CONFIG = {\n    \"API_KEY\":  \"PKEJH4W0URAU56SHKQW3\" ,\n    \"API_SECRET\": \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\",\n    \"PAPER\": True\n}\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None ",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "start_date = datetime(2020,1,1)\nend_date = datetime(2023,12,31) \nbroker = Alpaca(ALPACA_CREDS) \nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, ",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "end_date = datetime(2023,12,31) \nbroker = Alpaca(ALPACA_CREDS) \nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, \n    parameters={\"symbol\":\"SPY\", \"cash_at_risk\":.5}",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "broker",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "broker = Alpaca(ALPACA_CREDS) \nstrategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, \n    parameters={\"symbol\":\"SPY\", \"cash_at_risk\":.5}\n)",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "strategy",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "strategy = MLTrader(name='mlstrat', broker=broker, \n                    parameters={\"symbol\":\"SPY\", \n                                \"cash_at_risk\":.5})\nstrategy.backtest(\n    YahooDataBacktesting, \n    start_date, \n    end_date, \n    parameters={\"symbol\":\"SPY\", \"cash_at_risk\":.5}\n)\ntrader = Trader()",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "pages.5_sent_bot",
        "description": "pages.5_sent_bot",
        "peekOfCode": "trader = Trader()\ntrader.add_strategy(strategy)\ntrader.run_all()",
        "detail": "pages.5_sent_bot",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "venv.api.main",
        "description": "venv.api.main",
        "peekOfCode": "def read_root():\n    return {\"message\": \"Hello, World!\"}",
        "detail": "venv.api.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "venv.api.main",
        "description": "venv.api.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, World!\"}",
        "detail": "venv.api.main",
        "documentation": {}
    },
    {
        "label": "Alpaca",
        "kind": 6,
        "importPath": "venv.bin.alpaca",
        "description": "venv.bin.alpaca",
        "peekOfCode": "class Alpaca:\n    def main():\n        try:\n            Options.parse(sys.argv[1:])\n        except OptionsError as err:\n            print(err.args[0])\n            print()\n            Alpaca.show_help()\n            return\n        if Options.is_show_help():",
        "detail": "venv.bin.alpaca",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "class BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "UnknownField",
        "kind": 6,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "class UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}\nDATABASE_MAP = dict((value, key)",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "make_introspector",
        "kind": 2,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "def make_introspector(database_type, database_name, **kwargs):\n    if database_type not in DATABASE_MAP:\n        err('Unrecognized database, must be one of: %s' %\n            ', '.join(DATABASE_MAP.keys()))\n        sys.exit(1)\n    schema = kwargs.pop('schema', None)\n    DatabaseClass = DATABASE_MAP[database_type]\n    db = DatabaseClass(database_name, **kwargs)\n    return Introspector.from_database(db, schema=schema)\ndef print_models(introspector, tables=None, preserve_order=False,",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "print_models",
        "kind": 2,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "def print_models(introspector, tables=None, preserve_order=False,\n                 include_views=False, ignore_unknown=False, snake_case=True):\n    database = introspector.introspect(table_names=tables,\n                                       include_views=include_views,\n                                       snake_case=snake_case)\n    db_kwargs = introspector.get_database_kwargs()\n    header = HEADER % (\n        introspector.get_additional_imports(),\n        introspector.get_database_class().__name__,\n        introspector.get_database_name(),",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "def print_header(cmd_line, introspector):\n    timestamp = datetime.datetime.now()\n    print_('# Code generated by:')\n    print_('# python -m pwiz %s' % cmd_line)\n    print_('# Date: %s' % timestamp.strftime('%B %d, %Y %I:%M%p'))\n    print_('# Database: %s' % introspector.get_database_name())\n    print_('# Peewee version: %s' % peewee_version)\n    print_('')\ndef err(msg):\n    sys.stderr.write('\\033[91m%s\\033[0m\\n' % msg)",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "err",
        "kind": 2,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "def err(msg):\n    sys.stderr.write('\\033[91m%s\\033[0m\\n' % msg)\n    sys.stderr.flush()\ndef get_option_parser():\n    parser = OptionParser(usage='usage: %prog [options] database_name')\n    ao = parser.add_option\n    ao('-H', '--host', dest='host')\n    ao('-p', '--port', dest='port', type='int')\n    ao('-u', '--user', dest='user')\n    ao('-P', '--password', dest='password', action='store_true')",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "get_option_parser",
        "kind": 2,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "def get_option_parser():\n    parser = OptionParser(usage='usage: %prog [options] database_name')\n    ao = parser.add_option\n    ao('-H', '--host', dest='host')\n    ao('-p', '--port', dest='port', type='int')\n    ao('-u', '--user', dest='user')\n    ao('-P', '--password', dest='password', action='store_true')\n    engines = sorted(DATABASE_MAP)\n    ao('-e', '--engine', dest='engine', choices=engines,\n       help=('Database type, e.g. sqlite, mysql, postgresql or cockroachdb. '",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "get_connect_kwargs",
        "kind": 2,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "def get_connect_kwargs(options):\n    ops = ('host', 'port', 'user', 'schema')\n    kwargs = dict((o, getattr(options, o)) for o in ops if getattr(options, o))\n    if options.password:\n        kwargs['password'] = getpass()\n    return kwargs\nif __name__ == '__main__':\n    raw_argv = sys.argv\n    parser = get_option_parser()\n    options, args = parser.parse_args()",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "HEADER = \"\"\"from peewee import *%s\ndatabase = %s('%s'%s)\n\"\"\"\nBASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "database = %s('%s'%s)\n\"\"\"\nBASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "BASE_MODEL",
        "kind": 5,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "BASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_FIELD",
        "kind": 5,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "UNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "DATABASE_ALIASES",
        "kind": 5,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "DATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}\nDATABASE_MAP = dict((value, key)\n                    for key in DATABASE_ALIASES\n                    for value in DATABASE_ALIASES[key])\ndef make_introspector(database_type, database_name, **kwargs):",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "DATABASE_MAP",
        "kind": 5,
        "importPath": "venv.bin.pwiz",
        "description": "venv.bin.pwiz",
        "peekOfCode": "DATABASE_MAP = dict((value, key)\n                    for key in DATABASE_ALIASES\n                    for value in DATABASE_ALIASES[key])\ndef make_introspector(database_type, database_name, **kwargs):\n    if database_type not in DATABASE_MAP:\n        err('Unrecognized database, must be one of: %s' %\n            ', '.join(DATABASE_MAP.keys()))\n        sys.exit(1)\n    schema = kwargs.pop('schema', None)\n    DatabaseClass = DATABASE_MAP[database_type]",
        "detail": "venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2html",
        "description": "venv.bin.rst2html",
        "peekOfCode": "description = ('Generates (X)HTML documents from standalone reStructuredText '\n               'sources.  ' + default_description)\npublish_cmdline(writer_name='html', description=description)",
        "detail": "venv.bin.rst2html",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2html4",
        "description": "venv.bin.rst2html4",
        "peekOfCode": "description = ('Generates (X)HTML documents from standalone reStructuredText '\n               'sources.  ' + default_description)\npublish_cmdline(writer_name='html4', description=description)",
        "detail": "venv.bin.rst2html4",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2html5",
        "description": "venv.bin.rst2html5",
        "peekOfCode": "description = ('Generates HTML5 documents from standalone '\n               'reStructuredText sources.\\n'\n               + default_description)\npublish_cmdline(writer_name='html5', description=description)",
        "detail": "venv.bin.rst2html5",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2latex",
        "description": "venv.bin.rst2latex",
        "peekOfCode": "description = ('Generates LaTeX documents from standalone reStructuredText '\n               'sources. '\n               'Reads from <source> (default is stdin) and writes to '\n               '<destination> (default is stdout).  See '\n               '<https://docutils.sourceforge.io/docs/user/latex.html> for '\n               'the full reference.')\npublish_cmdline(writer_name='latex', description=description)",
        "detail": "venv.bin.rst2latex",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2man",
        "description": "venv.bin.rst2man",
        "peekOfCode": "description = (\"Generates plain unix manual documents.  \"\n               + default_description)\npublish_cmdline(writer=manpage.Writer(), description=description)",
        "detail": "venv.bin.rst2man",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2odt",
        "description": "venv.bin.rst2odt",
        "peekOfCode": "description = ('Generates OpenDocument/OpenOffice/ODF documents from '\n               'standalone reStructuredText sources.  ' + default_description)\nwriter = Writer()\nreader = Reader()\noutput = publish_cmdline_to_binary(reader=reader, writer=writer,\n                                   description=description)",
        "detail": "venv.bin.rst2odt",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 5,
        "importPath": "venv.bin.rst2odt",
        "description": "venv.bin.rst2odt",
        "peekOfCode": "writer = Writer()\nreader = Reader()\noutput = publish_cmdline_to_binary(reader=reader, writer=writer,\n                                   description=description)",
        "detail": "venv.bin.rst2odt",
        "documentation": {}
    },
    {
        "label": "reader",
        "kind": 5,
        "importPath": "venv.bin.rst2odt",
        "description": "venv.bin.rst2odt",
        "peekOfCode": "reader = Reader()\noutput = publish_cmdline_to_binary(reader=reader, writer=writer,\n                                   description=description)",
        "detail": "venv.bin.rst2odt",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "venv.bin.rst2odt",
        "description": "venv.bin.rst2odt",
        "peekOfCode": "output = publish_cmdline_to_binary(reader=reader, writer=writer,\n                                   description=description)",
        "detail": "venv.bin.rst2odt",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2pseudoxml",
        "description": "venv.bin.rst2pseudoxml",
        "peekOfCode": "description = ('Generates pseudo-XML from standalone reStructuredText '\n               'sources (for testing purposes).  ' + default_description)\npublish_cmdline(description=description)",
        "detail": "venv.bin.rst2pseudoxml",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2s5",
        "description": "venv.bin.rst2s5",
        "peekOfCode": "description = ('Generates S5 (X)HTML slideshow documents from standalone '\n               'reStructuredText sources.  ' + default_description)\npublish_cmdline(writer_name='s5', description=description)",
        "detail": "venv.bin.rst2s5",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2xetex",
        "description": "venv.bin.rst2xetex",
        "peekOfCode": "description = ('Generates LaTeX documents from standalone reStructuredText '\n               'sources for compilation with the Unicode-aware TeX variants '\n               'XeLaTeX or LuaLaTeX. '\n               'Reads from <source> (default is stdin) and writes to '\n               '<destination> (default is stdout).  See '\n               '<https://docutils.sourceforge.io/docs/user/latex.html> for '\n               'the full reference.')\npublish_cmdline(writer_name='xetex', description=description)",
        "detail": "venv.bin.rst2xetex",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rst2xml",
        "description": "venv.bin.rst2xml",
        "peekOfCode": "description = ('Generates Docutils-native XML from standalone '\n               'reStructuredText sources.  ' + default_description)\npublish_cmdline(writer_name='xml', description=description)",
        "detail": "venv.bin.rst2xml",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "venv.bin.rstpep2html",
        "description": "venv.bin.rstpep2html",
        "peekOfCode": "description = ('Generates (X)HTML from reStructuredText-format PEP files.  '\n               + default_description)\npublish_cmdline(reader_name='pep', writer_name='pep_html',\n                description=description)",
        "detail": "venv.bin.rstpep2html",
        "documentation": {}
    },
    {
        "label": "sentiment_Vader",
        "kind": 2,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "def sentiment_Vader(text):\n    over_all_polarity = sid.polarity_scores(text)\n    if over_all_polarity['compound'] >= 0.05:\n        return \"positive\"\n    elif over_all_polarity['compound'] <= -0.05:\n        return \"negative\"\n    else:\n        return \"neutral\"\n# Apply sentiment analysis using VADER\nsid = SentimentIntensityAnalyzer()",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "url = 'https://www.flipkart.com/hamtex-polycotton-double-bed-cover/product-reviews/itma5c9f08efe504?pid=BCVG2ZGSDZ3WSGTF&lid=LSTBCVG2ZGSDZ3WSGTFDBZ9IO&marketplace=FLIPKART'\nresponse = requests.get(url)\ncontent = response.content\nsoup = BeautifulSoup(content, 'html.parser')\nreviews_container = soup.find('div', {'class': '_1YokD2 _3Mn1Gg col-9-12'})\nreview_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})\nreviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "response = requests.get(url)\ncontent = response.content\nsoup = BeautifulSoup(content, 'html.parser')\nreviews_container = soup.find('div', {'class': '_1YokD2 _3Mn1Gg col-9-12'})\nreview_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})\nreviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()\n    reviews.append(text)",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "content",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "content = response.content\nsoup = BeautifulSoup(content, 'html.parser')\nreviews_container = soup.find('div', {'class': '_1YokD2 _3Mn1Gg col-9-12'})\nreview_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})\nreviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()\n    reviews.append(text)\n# Save the reviews to an Excel file in current directory",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "soup = BeautifulSoup(content, 'html.parser')\nreviews_container = soup.find('div', {'class': '_1YokD2 _3Mn1Gg col-9-12'})\nreview_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})\nreviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()\n    reviews.append(text)\n# Save the reviews to an Excel file in current directory\ndata = pd.DataFrame({'review': reviews})",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "reviews_container",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "reviews_container = soup.find('div', {'class': '_1YokD2 _3Mn1Gg col-9-12'})\nreview_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})\nreviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()\n    reviews.append(text)\n# Save the reviews to an Excel file in current directory\ndata = pd.DataFrame({'review': reviews})\ndata.to_excel('reviews.xlsx', index=False)",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "review_divs",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "review_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})\nreviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()\n    reviews.append(text)\n# Save the reviews to an Excel file in current directory\ndata = pd.DataFrame({'review': reviews})\ndata.to_excel('reviews.xlsx', index=False)\ndef sentiment_Vader(text):",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "reviews",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "reviews = []\nfor child in review_divs:\n    third_div = child.div.div\n    text = third_div.text.strip()\n    reviews.append(text)\n# Save the reviews to an Excel file in current directory\ndata = pd.DataFrame({'review': reviews})\ndata.to_excel('reviews.xlsx', index=False)\ndef sentiment_Vader(text):\n    over_all_polarity = sid.polarity_scores(text)",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "data = pd.DataFrame({'review': reviews})\ndata.to_excel('reviews.xlsx', index=False)\ndef sentiment_Vader(text):\n    over_all_polarity = sid.polarity_scores(text)\n    if over_all_polarity['compound'] >= 0.05:\n        return \"positive\"\n    elif over_all_polarity['compound'] <= -0.05:\n        return \"negative\"\n    else:\n        return \"neutral\"",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "sid",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "sid = SentimentIntensityAnalyzer()\ndata['polarity'] = data['review'].apply(lambda review: sentiment_Vader(review))\nresult_data = data.to_excel('G:/DS Programs/WebScrapingEnv/sentiment_result.xlsx')",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "data['polarity']",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "data['polarity'] = data['review'].apply(lambda review: sentiment_Vader(review))\nresult_data = data.to_excel('G:/DS Programs/WebScrapingEnv/sentiment_result.xlsx')",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "result_data",
        "kind": 5,
        "importPath": "Sentiment-Analysis-Using-Vader",
        "description": "Sentiment-Analysis-Using-Vader",
        "peekOfCode": "result_data = data.to_excel('G:/DS Programs/WebScrapingEnv/sentiment_result.xlsx')",
        "detail": "Sentiment-Analysis-Using-Vader",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Stock_Market_prediction",
        "description": "Stock_Market_prediction",
        "peekOfCode": "def main(ticker_list, _wf):\n  import pandas as pd\n  mvo_df, env_kwargs, trade, processed_full, models = set_yahoo_data_frame(ticker_list, _wf)\n  def get_e_trade_gym_results():\n    data_risk_indicator = processed_full[(processed_full.date<wf.train_end_date) & (processed_full.date>= wf.train_start_date)]\n    insample_risk_indicator = data_risk_indicator.drop_duplicates(subset=['date'])\n    st.write(f\"Vix Indicator: {insample_risk_indicator.vix.quantile(0.996)}\")\n    st.write(insample_risk_indicator.vix.describe())\n    st.write(insample_risk_indicator.turbulence.describe())\n    st.write(insample_risk_indicator.turbulence.quantile(0.996))",
        "detail": "Stock_Market_prediction",
        "documentation": {}
    },
    {
        "label": "estimate_sentiment",
        "kind": 2,
        "importPath": "finbert_utils",
        "description": "finbert_utils",
        "peekOfCode": "def estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"\n        ]\n        result = torch.nn.functional.softmax(torch.sum(result, 0), dim=-1)\n        probability = result[torch.argmax(result)]\n        sentiment = labels[torch.argmax(result)]\n        return probability, sentiment",
        "detail": "finbert_utils",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "finbert_utils",
        "description": "finbert_utils",
        "peekOfCode": "device = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\ntokenizer = AutoTokenizer.from_pretrained(\"ProsusAI/finbert\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\").to(device)\nlabels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[",
        "detail": "finbert_utils",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "finbert_utils",
        "description": "finbert_utils",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(\"ProsusAI/finbert\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\").to(device)\nlabels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"",
        "detail": "finbert_utils",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "finbert_utils",
        "description": "finbert_utils",
        "peekOfCode": "model = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\").to(device)\nlabels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"\n        ]",
        "detail": "finbert_utils",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "finbert_utils",
        "description": "finbert_utils",
        "peekOfCode": "labels = [\"positive\", \"negative\", \"neutral\"]\n# added by dov to prevent TOKENIZERS_PARALLELISM the warning:\n# TOKENIZERS_PARALLELISM=False\ndef estimate_sentiment(news):\n    if news:\n        tokens = tokenizer(news, return_tensors=\"pt\", padding=True).to(device)\n        result = model(tokens[\"input_ids\"], attention_mask=tokens[\"attention_mask\"])[\n            \"logits\"\n        ]\n        result = torch.nn.functional.softmax(torch.sum(result, 0), dim=-1)",
        "detail": "finbert_utils",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "lumibot_logic",
        "description": "lumibot_logic",
        "peekOfCode": "class MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        print(\"================Initialize====================\")\n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = tradeapi.REST(base_url=BASE_URL, key_id=API_KEY, secret_key=API_SECRET)\n        print(\"================Initialize====================\")\n    def position_sizing(self): ",
        "detail": "lumibot_logic",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "lumibot_logic",
        "description": "lumibot_logic",
        "peekOfCode": "API_KEY = \"PKXQGLU5DJJ30MUWS2G6\", \nAPI_SECRET =  \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\"\nALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nBASE_URL = \"https://paper-api.alpaca.markets\"\nprint(\"==================MLTrader(Strategy)=============================\")\nclass MLTrader(Strategy): ",
        "detail": "lumibot_logic",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "lumibot_logic",
        "description": "lumibot_logic",
        "peekOfCode": "API_SECRET =  \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\"\nALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nBASE_URL = \"https://paper-api.alpaca.markets\"\nprint(\"==================MLTrader(Strategy)=============================\")\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): ",
        "detail": "lumibot_logic",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "lumibot_logic",
        "description": "lumibot_logic",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": API_KEY, \n    \"API_SECRET\": API_SECRET, \n    \"PAPER\": True\n}\nBASE_URL = \"https://paper-api.alpaca.markets\"\nprint(\"==================MLTrader(Strategy)=============================\")\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        print(\"================Initialize====================\")",
        "detail": "lumibot_logic",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "lumibot_logic",
        "description": "lumibot_logic",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"\nprint(\"==================MLTrader(Strategy)=============================\")\nclass MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        print(\"================Initialize====================\")\n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = tradeapi.REST(base_url=BASE_URL, key_id=API_KEY, secret_key=API_SECRET)",
        "detail": "lumibot_logic",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "class MLTrader(Strategy): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5): \n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api = REST(base_url=base_url, key_id=api_key, secret_key=api_secret)\n    def position_sizing(self): \n        cash = self.get_cash() \n        last_price = self.get_last_price(self.symbol)",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"\nAPI_KEY = \"PKXQGLU5DJJ30MUWS2G6\"\nAPI_SECRET =\"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\"\napi_secret = API_SECRET\napi_key    = API_KEY\nbase_url   = BASE_URL\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "API_KEY = \"PKXQGLU5DJJ30MUWS2G6\"\nAPI_SECRET =\"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\"\napi_secret = API_SECRET\napi_key    = API_KEY\nbase_url   = BASE_URL\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "api_secret",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "api_secret = API_SECRET\napi_key    = API_KEY\nbase_url   = BASE_URL\nALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (MarketOrderRequest)",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": api_key, \n    \"API_SECRET\": api_secret, \n    \"PAPER\": True\n}\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (MarketOrderRequest)\nfrom alpaca.trading.enums import (\n    OrderSide,\n    OrderType,",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "os.environ[\"TOKENIZERS_PARALLELISM\"]",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\ntrade_client = TradingClient(api_key=api_key, secret_key=api_secret, paper=True)\nsymbol = \"QQQ\"\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 , # notional is specified in USD, here we specify $1.11\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "trade_client",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "trade_client = TradingClient(api_key=api_key, secret_key=api_secret, paper=True)\nsymbol = \"QQQ\"\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 , # notional is specified in USD, here we specify $1.11\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "symbol",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "symbol = \"QQQ\"\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 , # notional is specified in USD, here we specify $1.11\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nprint(f\"==========trade_client.submit_order(req) ===========:/n/n {res}\")",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "req = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 , # notional is specified in USD, here we specify $1.11\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nprint(f\"==========trade_client.submit_order(req) ===========:/n/n {res}\")\n# st.write(f\"/n/n/n==========trade_client.submit_order(req) ===========: {res}\")",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "res = trade_client.submit_order(req)\nprint(f\"==========trade_client.submit_order(req) ===========:/n/n {res}\")\n# st.write(f\"/n/n/n==========trade_client.submit_order(req) ===========: {res}\")\n# # get a list of orders including closed (e.g. filled) orders by specifying symbol\n# req = GetOrdersRequest(\n#     status = QueryOrderStatus.ALL,\n#     symbols = [symbol]\n# )\n# orders = trade_client.get_orders(req)\n# # print(f\"ORDERS====={orders}\")",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "trader",
        "kind": 5,
        "importPath": "lumibot_senti",
        "description": "lumibot_senti",
        "peekOfCode": "trader = Trader()\ntrader.add_strategy(strategy)\ntrader.run_all()",
        "detail": "lumibot_senti",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "news",
        "description": "news",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"  # Use Alpaca paper trading for testing\nALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\",\n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\",\n    \"PAPER\": True\n}\n# List of DJI 30 stocks\nDJI_30_SYMBOLS = [\n    \"AAPL\", \"MSFT\", \"JPM\", \"JNJ\", \"V\", \"UNH\", \"PG\", \"HD\", \"DIS\", \"INTC\",\n    \"WMT\", \"IBM\", \"MMM\", \"KO\", \"MRK\", \"NKE\", \"PFE\", \"TRV\", \"CSCO\", \"AXP\",",
        "detail": "news",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "news",
        "description": "news",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\",\n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\",\n    \"PAPER\": True\n}\n# List of DJI 30 stocks\nDJI_30_SYMBOLS = [\n    \"AAPL\", \"MSFT\", \"JPM\", \"JNJ\", \"V\", \"UNH\", \"PG\", \"HD\", \"DIS\", \"INTC\",\n    \"WMT\", \"IBM\", \"MMM\", \"KO\", \"MRK\", \"NKE\", \"PFE\", \"TRV\", \"CSCO\", \"AXP\",\n    \"VZ\", \"BA\", \"CVX\", \"XOM\", \"CAT\", \"MCD\", \"GS\", \"WBA\", \"DOW\", \"AMGN\", \"SPY\"",
        "detail": "news",
        "documentation": {}
    },
    {
        "label": "DJI_30_SYMBOLS",
        "kind": 5,
        "importPath": "news",
        "description": "news",
        "peekOfCode": "DJI_30_SYMBOLS = [\n    \"AAPL\", \"MSFT\", \"JPM\", \"JNJ\", \"V\", \"UNH\", \"PG\", \"HD\", \"DIS\", \"INTC\",\n    \"WMT\", \"IBM\", \"MMM\", \"KO\", \"MRK\", \"NKE\", \"PFE\", \"TRV\", \"CSCO\", \"AXP\",\n    \"VZ\", \"BA\", \"CVX\", \"XOM\", \"CAT\", \"MCD\", \"GS\", \"WBA\", \"DOW\", \"AMGN\", \"SPY\"\n]\n# Streamlit app title\nst.title(\"Sentiment-Based Trading Bot with Live Trading\")\n# Initialize Alpaca REST API\napi = REST(\n    key_id=ALPACA_CREDS[\"API_KEY\"],",
        "detail": "news",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "news",
        "description": "news",
        "peekOfCode": "api = REST(\n    key_id=ALPACA_CREDS[\"API_KEY\"],\n    secret_key=ALPACA_CREDS[\"API_SECRET\"],\n    base_url=BASE_URL\n)\n# Default dates for date inputs\ntoday = datetime.now()\nthree_days_ago = today - timedelta(days=3)\n# Create a row with symbol selection and date inputs\nst.subheader(\"News and Date Selection\")",
        "detail": "news",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "news",
        "description": "news",
        "peekOfCode": "today = datetime.now()\nthree_days_ago = today - timedelta(days=3)\n# Create a row with symbol selection and date inputs\nst.subheader(\"News and Date Selection\")\ncol1, col2, col3 = st.columns([1, 1, 1])\n# Symbol selection in the first column\nwith col1:\n    symbol = st.selectbox(\"Select Symbol for News\", DJI_30_SYMBOLS, index=DJI_30_SYMBOLS.index(\"SPY\"))\n# Start date input in the second column\nwith col2:",
        "detail": "news",
        "documentation": {}
    },
    {
        "label": "three_days_ago",
        "kind": 5,
        "importPath": "news",
        "description": "news",
        "peekOfCode": "three_days_ago = today - timedelta(days=3)\n# Create a row with symbol selection and date inputs\nst.subheader(\"News and Date Selection\")\ncol1, col2, col3 = st.columns([1, 1, 1])\n# Symbol selection in the first column\nwith col1:\n    symbol = st.selectbox(\"Select Symbol for News\", DJI_30_SYMBOLS, index=DJI_30_SYMBOLS.index(\"SPY\"))\n# Start date input in the second column\nwith col2:\n    start_date = st.date_input(\"Start Date\", value=three_days_ago)",
        "detail": "news",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "API_KEY = \"your_api_key\"\nAPI_SECRET = \"your_api_secret\"\nBASE_URL = \"https://paper-api.alpaca.markets\"  # Use for paper trading\n# Initialize Alpaca client\nalpaca = REST(API_KEY, API_SECRET, base_url=BASE_URL)\n# Sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n# Streamlit app setup\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "API_SECRET = \"your_api_secret\"\nBASE_URL = \"https://paper-api.alpaca.markets\"  # Use for paper trading\n# Initialize Alpaca client\nalpaca = REST(API_KEY, API_SECRET, base_url=BASE_URL)\n# Sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n# Streamlit app setup\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")\n# User inputs",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"  # Use for paper trading\n# Initialize Alpaca client\nalpaca = REST(API_KEY, API_SECRET, base_url=BASE_URL)\n# Sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n# Streamlit app setup\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")\n# User inputs\nsymbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "alpaca",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "alpaca = REST(API_KEY, API_SECRET, base_url=BASE_URL)\n# Sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n# Streamlit app setup\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")\n# User inputs\nsymbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")\nstart_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "analyzer",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "analyzer = SentimentIntensityAnalyzer()\n# Streamlit app setup\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")\n# User inputs\nsymbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")\nstart_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\n# Fetch historical price data",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "symbol",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "symbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")\nstart_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\n# Fetch historical price data\nif st.button(\"Fetch Data\"):\n    st.write(f\"Fetching historical data for {symbol}...\")\n    bars = alpaca.get_bars(symbol, TimeFrame.Day, start_date, end_date).df\n    st.write(bars.tail())\n# Sentiment analysis",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "start_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\n# Fetch historical price data\nif st.button(\"Fetch Data\"):\n    st.write(f\"Fetching historical data for {symbol}...\")\n    bars = alpaca.get_bars(symbol, TimeFrame.Day, start_date, end_date).df\n    st.write(bars.tail())\n# Sentiment analysis\nif st.button(\"Analyze Sentiment\"):",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "end_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\n# Fetch historical price data\nif st.button(\"Fetch Data\"):\n    st.write(f\"Fetching historical data for {symbol}...\")\n    bars = alpaca.get_bars(symbol, TimeFrame.Day, start_date, end_date).df\n    st.write(bars.tail())\n# Sentiment analysis\nif st.button(\"Analyze Sentiment\"):\n    st.write(\"Performing sentiment analysis...\")",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "sentiment_threshold",
        "kind": 5,
        "importPath": "s1",
        "description": "s1",
        "peekOfCode": "sentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\n# Fetch historical price data\nif st.button(\"Fetch Data\"):\n    st.write(f\"Fetching historical data for {symbol}...\")\n    bars = alpaca.get_bars(symbol, TimeFrame.Day, start_date, end_date).df\n    st.write(bars.tail())\n# Sentiment analysis\nif st.button(\"Analyze Sentiment\"):\n    st.write(\"Performing sentiment analysis...\")\n    data = {",
        "detail": "s1",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "s2",
        "description": "s2",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\", \n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\", \n    \"BASE_URL\" : \"https://paper-api.alpaca.markets\",\n    \"PAPER\": True\n}\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (MarketOrderRequest)\nfrom alpaca.trading.enums import (\n    OrderSide,",
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "trade_client",
        "kind": 5,
        "importPath": "s2",
        "description": "s2",
        "peekOfCode": "trade_client = TradingClient(api_key=ALPACA_CREDS[\"API_KEY\"], secret_key=ALPACA_CREDS[\"API_SECRET\"], paper=True)\nsymbol = \"SPY\"\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 ,\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)",
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "symbol",
        "kind": 5,
        "importPath": "s2",
        "description": "s2",
        "peekOfCode": "symbol = \"SPY\"\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 ,\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nprint(f\"==========res = trade_client.submit_order(req)===========: {res}\")",
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "s2",
        "description": "s2",
        "peekOfCode": "req = MarketOrderRequest(\n    symbol = symbol,\n    qty= 1 ,\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nprint(f\"==========res = trade_client.submit_order(req)===========: {res}\")",
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "s2",
        "description": "s2",
        "peekOfCode": "res = trade_client.submit_order(req)\nprint(f\"==========res = trade_client.submit_order(req)===========: {res}\")",
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "print(f\"==========res",
        "kind": 5,
        "importPath": "s2",
        "description": "s2",
        "peekOfCode": "print(f\"==========res = trade_client.submit_order(req)===========: {res}\")",
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "class MLTrader(): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5):\n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api =REST(key_id=ALPACA_CREDS[\"API_KEY\"], secret_key=ALPACA_CREDS[\"API_SECRET\"],base_url=BASE_URL)\n        st.write(f\"Cash at risk: {self.cash_at_risk}\")\n    def position_sizing(self): \n        # cash = self.get_cash() ",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "os.environ[\"TOKENIZERS_PARALLELISM\"]",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\nimport yfinance as yf\nfrom lib.MLTradingBot.finbert_utils import estimate_sentiment\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()\n# print(analyzer.polarity_scores(\"This is a great day!\"))\ncustom_css = \"\"\"\n<style>",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "analyzer",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "analyzer = SentimentIntensityAnalyzer()\n# print(analyzer.polarity_scores(\"This is a great day!\"))\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"\nALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\", \n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\", \n    \"PAPER\": True\n}\nexample_ticker_symbols = [\"SPY\",\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\", \n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\", \n    \"PAPER\": True\n}\nexample_ticker_symbols = [\"SPY\",\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "example_ticker_symbols = [\"SPY\",\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")\n# Use a selectbox to allow users to choose from example ticker symbols",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# User inputs\n# symbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")\nstart_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "start_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "end_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\naa = analyzer.polarity_scores(\"This is a great day!\")",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "sentiment_threshold",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "sentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\naa = analyzer.polarity_scores(\"This is a great day!\")\nst.write(f\"This is a great day! {aa}\")",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "data = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\naa = analyzer.polarity_scores(\"This is a great day!\")\nst.write(f\"This is a great day! {aa}\")\nst.write(df)",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "df = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\naa = analyzer.polarity_scores(\"This is a great day!\")\nst.write(f\"This is a great day! {aa}\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])\nif st.button(\"Execute Trades\"):\n    st.write(\"Executing trades...\")\n    sentiment_threshold = -1 ",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "df[\"sentiment\"]",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "df[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\naa = analyzer.polarity_scores(\"This is a great day!\")\nst.write(f\"This is a great day! {aa}\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])\nif st.button(\"Execute Trades\"):\n    st.write(\"Executing trades...\")\n    sentiment_threshold = -1 \n    for index, row in df.iterrows():",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "aa = analyzer.polarity_scores(\"This is a great day!\")\nst.write(f\"This is a great day! {aa}\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])\nif st.button(\"Execute Trades\"):\n    st.write(\"Executing trades...\")\n    sentiment_threshold = -1 \n    for index, row in df.iterrows():\n        if row[\"sentiment\"] > sentiment_threshold:\n            st.write(f\"BUY: {ticker} on {row['date']} (Sentiment: {row['sentiment']})\")",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "strat",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "strat = MLTrader()\nstrat.initialize(ticker, 0.5)\nstrat.on_trading_iteration()\n# ====================\nnews_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            finviz_url = \"https://finviz.com/quote.ashx?t=\"",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "news_tables",
        "kind": 5,
        "importPath": "senti_all",
        "description": "senti_all",
        "peekOfCode": "news_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            finviz_url = \"https://finviz.com/quote.ashx?t=\"\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")",
        "detail": "senti_all",
        "documentation": {}
    },
    {
        "label": "api_secret",
        "kind": 5,
        "importPath": "t2",
        "description": "t2",
        "peekOfCode": "api_secret = os.getenv(\"API_SECRET\" )\napi_key    = os.getenv(\"API_KEY\")\nbase_url   = os.getenv(\"BASE_URL\")\npaper = True \nimport subprocess\nif st.button(\"Run Backtest\"):\n    # Start Lumibot as a subprocess\n    result = subprocess.run(\n        [\"python\", \"t1.py\"], \n        capture_output=True, text=True",
        "detail": "t2",
        "documentation": {}
    },
    {
        "label": "paper",
        "kind": 5,
        "importPath": "t2",
        "description": "t2",
        "peekOfCode": "paper = True \nimport subprocess\nif st.button(\"Run Backtest\"):\n    # Start Lumibot as a subprocess\n    result = subprocess.run(\n        [\"python\", \"t1.py\"], \n        capture_output=True, text=True\n    )\n    st.write(f\"SUBOROCESS: {result} \")\n    st.write(\"Output:\", result.stdout)",
        "detail": "t2",
        "documentation": {}
    },
    {
        "label": "MLTrader",
        "kind": 6,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "class MLTrader(): \n    def initialize(self, symbol:str=\"SPY\", cash_at_risk:float=.5):\n        self.symbol = symbol\n        self.sleeptime = \"24H\" \n        self.last_trade = None \n        self.cash_at_risk = cash_at_risk\n        self.api =REST(key_id=ALPACA_CREDS[\"API_KEY\"], secret_key=ALPACA_CREDS[\"API_SECRET\"],base_url=BASE_URL)\n        st.write(f\"Cash at risk: {self.cash_at_risk}\")\n    def position_sizing(self): \n        # cash = self.get_cash() ",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "os.environ[\"TOKENIZERS_PARALLELISM\"]",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\nfrom lib.MLTradingBot.finbert_utils import estimate_sentiment\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "analyzer",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "analyzer = SentimentIntensityAnalyzer()\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"\nALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\", \n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\", \n    \"PAPER\": True\n}\nexample_ticker_symbols = [\"SPY\",\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\", \n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\", \n    \"PAPER\": True\n}\nexample_ticker_symbols = [\"SPY\",\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "example_ticker_symbols = [\"SPY\",\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\nst.title(\"Sentiment-Based Trading Bot\")\nst.write(\"Analyze sentiment and trade stocks using Alpaca API.\")\n# Use a selectbox to allow users to choose from example ticker symbols",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# User inputs\n# symbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")\nstart_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "start_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "end_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\nst.write(df)",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "sentiment_threshold",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "sentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)\ndata = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "data = {\n    \"date\": pd.date_range(start=start_date, end=end_date),\n    \"news\": [f\"Sample headline for {ticker} on day {i}\" for i in range(len(pd.date_range(start=start_date, end=end_date)))],\n}\ndf = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])\nif st.button(\"Execute Trades\"):",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "df = pd.DataFrame(data)\ndf[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])\nif st.button(\"Execute Trades\"):\n    st.write(\"Executing trades...\")\n    sentiment_threshold = -1 \n    for index, row in df.iterrows():\n        if row[\"sentiment\"] > sentiment_threshold:",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "df[\"sentiment\"]",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "df[\"sentiment\"] = df[\"news\"].apply(lambda x: analyzer.polarity_scores(x)[\"compound\"])\nst.write(\"Performing sentiment analysis...\")\nst.write(df)\nst.line_chart(df[\"sentiment\"])\nif st.button(\"Execute Trades\"):\n    st.write(\"Executing trades...\")\n    sentiment_threshold = -1 \n    for index, row in df.iterrows():\n        if row[\"sentiment\"] > sentiment_threshold:\n            st.write(f\"BUY: {ticker} on {row['date']} (Sentiment: {row['sentiment']})\")",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "strat",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "strat = MLTrader()\nstrat.initialize(ticker, 0.5)\nstrat.on_trading_iteration()\nnews_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            finviz_url = \"https://finviz.com/quote.ashx?t=\"\n            url = finviz_url + ticker",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "news_tables",
        "kind": 5,
        "importPath": "t3",
        "description": "t3",
        "peekOfCode": "news_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            finviz_url = \"https://finviz.com/quote.ashx?t=\"\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")",
        "detail": "t3",
        "documentation": {}
    },
    {
        "label": "finviz_url",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "finviz_url = \"https://finviz.com/quote.ashx?t=\"\nexample_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "example_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\nnews_tables = {}",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\nnews_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "news_tables",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "news_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")\n            news_table = html.find(id=\"news-table\")",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "symbol",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "symbol = st.text_input(\"Stock Symbol\", value=\"AAPL\")\nstart_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "start_date = st.date_input(\"Start Date\", value=datetime.now() - timedelta(days=30))\nend_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "end_date = st.date_input(\"End Date\", value=datetime.now())\nsentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "sentiment_threshold",
        "kind": 5,
        "importPath": "t4",
        "description": "t4",
        "peekOfCode": "sentiment_threshold = st.slider(\"Sentiment Threshold\", -1.0, 1.0, 0.0)",
        "detail": "t4",
        "documentation": {}
    },
    {
        "label": "execute_trade",
        "kind": 2,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "def execute_trade(balance, holdings, action, row, trade_log):\n    if action == \"BUY\":\n        trade_log.append({\n            \"Action\": \"BUY\", \"Symbol\": symbol, \"Date\": row[\"Date\"], \"Time\": row[\"Time\"],\n            \"Price\": row[\"Price\"], \"Score\": row[\"Sentiment Score\"], \"Headline\": row[\"Headline\"]\n        })\n        balance -= row[\"Price\"]\n        holdings += 1\n    elif action == \"SELL\":\n        trade_log.append({",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "BASE_URL = \"https://paper-api.alpaca.markets\"  # Use Alpaca paper trading for testing\nALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\",\n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\",\n    \"PAPER\": True\n}\n# List of DJI 30 stocks\nDJI_30_SYMBOLS = [\n    \"AAPL\", \"MSFT\", \"JPM\", \"JNJ\", \"V\", \"UNH\", \"PG\", \"HD\", \"DIS\", \"INTC\",\n    \"WMT\", \"IBM\", \"MMM\", \"KO\", \"MRK\", \"NKE\", \"PFE\", \"TRV\", \"CSCO\", \"AXP\",",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "ALPACA_CREDS",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "ALPACA_CREDS = {\n    \"API_KEY\": \"PKXQGLU5DJJ30MUWS2G6\",\n    \"API_SECRET\": \"vPSm9TeqjD7WhYYcuhhvdyXZiFjJQDSlO5ic5s1d\",\n    \"PAPER\": True\n}\n# List of DJI 30 stocks\nDJI_30_SYMBOLS = [\n    \"AAPL\", \"MSFT\", \"JPM\", \"JNJ\", \"V\", \"UNH\", \"PG\", \"HD\", \"DIS\", \"INTC\",\n    \"WMT\", \"IBM\", \"MMM\", \"KO\", \"MRK\", \"NKE\", \"PFE\", \"TRV\", \"CSCO\", \"AXP\",\n    \"VZ\", \"BA\", \"CVX\", \"XOM\", \"CAT\", \"MCD\", \"GS\", \"WBA\", \"DOW\", \"AMGN\", \"SPY\"",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "DJI_30_SYMBOLS",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "DJI_30_SYMBOLS = [\n    \"AAPL\", \"MSFT\", \"JPM\", \"JNJ\", \"V\", \"UNH\", \"PG\", \"HD\", \"DIS\", \"INTC\",\n    \"WMT\", \"IBM\", \"MMM\", \"KO\", \"MRK\", \"NKE\", \"PFE\", \"TRV\", \"CSCO\", \"AXP\",\n    \"VZ\", \"BA\", \"CVX\", \"XOM\", \"CAT\", \"MCD\", \"GS\", \"WBA\", \"DOW\", \"AMGN\", \"SPY\"\n]\n# Streamlit app title\nst.title(\"Sentiment-Based Trading Bot with Backtest and Live Trading\")\n# Initialize Alpaca REST API\napi = REST(\n    key_id=ALPACA_CREDS[\"API_KEY\"],",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "api = REST(\n    key_id=ALPACA_CREDS[\"API_KEY\"],\n    secret_key=ALPACA_CREDS[\"API_SECRET\"],\n    base_url=BASE_URL\n)\n# Default dates for date inputs\ntoday = datetime.now()\nthree_days_ago = today - timedelta(days=3)\n# Create a row with symbol selection and date inputs\nst.subheader(\"News and Date Selection\")",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "today = datetime.now()\nthree_days_ago = today - timedelta(days=3)\n# Create a row with symbol selection and date inputs\nst.subheader(\"News and Date Selection\")\ncol1, col2, col3 = st.columns([1, 1, 1])\n# Symbol selection in the first column\nwith col1:\n    symbol = st.selectbox(\"Select Symbol for News\", DJI_30_SYMBOLS, index=DJI_30_SYMBOLS.index(\"SPY\"))\n# Start date input in the second column\nwith col2:",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "three_days_ago",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "three_days_ago = today - timedelta(days=3)\n# Create a row with symbol selection and date inputs\nst.subheader(\"News and Date Selection\")\ncol1, col2, col3 = st.columns([1, 1, 1])\n# Symbol selection in the first column\nwith col1:\n    symbol = st.selectbox(\"Select Symbol for News\", DJI_30_SYMBOLS, index=DJI_30_SYMBOLS.index(\"SPY\"))\n# Start date input in the second column\nwith col2:\n    start_date = st.date_input(\"Start Date\", value=three_days_ago)",
        "detail": "t6",
        "documentation": {}
    },
    {
        "label": "sentiment_threshold",
        "kind": 5,
        "importPath": "t6",
        "description": "t6",
        "peekOfCode": "sentiment_threshold = st.slider(\n    \"Set Sentiment Threshold for Trading\",\n    min_value=-1.0,\n    max_value=1.0,\n    value=0.5\n)\n# Define trading action logic\ndef execute_trade(balance, holdings, action, row, trade_log):\n    if action == \"BUY\":\n        trade_log.append({",
        "detail": "t6",
        "documentation": {}
    }
]