[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotationsINDICATOR",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "jprint",
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "isExtraImport": true,
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DF_RESULTS_DIR",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "isExtraImport": true,
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "configure",
        "importPath": "stable_baselines3.common.logger",
        "description": "stable_baselines3.common.logger",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.logger",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "isExtraImport": true,
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "isExtraImport": true,
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "lib.rl",
        "description": "lib.rl",
        "isExtraImport": true,
        "detail": "lib.rl",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "finrl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "finrl",
        "description": "finrl",
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config_tickers",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "train",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "download_data",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "finrl",
        "description": "finrl",
        "isExtraImport": true,
        "detail": "finrl",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "importPath": "finrl.agents.stablebaselines3.models",
        "description": "finrl.agents.stablebaselines3.models",
        "isExtraImport": true,
        "detail": "finrl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DATA_SAVE_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAINED_MODEL_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "RESULTS_DIR",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "importPath": "finrl.config",
        "description": "finrl.config",
        "isExtraImport": true,
        "detail": "finrl.config",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "finrl.config_tickers",
        "description": "finrl.config_tickers",
        "isExtraImport": true,
        "detail": "finrl.config_tickers",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "importPath": "finrl.main",
        "description": "finrl.main",
        "isExtraImport": true,
        "detail": "finrl.main",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "finrl.meta.data_processor",
        "description": "finrl.meta.data_processor",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "finrl.meta.data_processors.func",
        "description": "finrl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading",
        "description": "finrl.meta.env_stock_trading.env_stocktrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "importPath": "finrl.meta.preprocessor.preprocessors",
        "description": "finrl.meta.preprocessor.preprocessors",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "importPath": "finrl.meta.preprocessor.yahoodownloader",
        "description": "finrl.meta.preprocessor.yahoodownloader",
        "isExtraImport": true,
        "detail": "finrl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "importPath": "finrl.plot",
        "description": "finrl.plot",
        "isExtraImport": true,
        "detail": "finrl.plot",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dateutil.parser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "alpaca_trade_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "alpaca_trade_api",
        "description": "alpaca_trade_api",
        "isExtraImport": true,
        "detail": "alpaca_trade_api",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "BarsV2",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "QuotesV2",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "TradesV2",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "alpaca_trade_api.entity_v2",
        "description": "alpaca_trade_api.entity_v2",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "alpaca_trade_api.common",
        "description": "alpaca_trade_api.common",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_credentials",
        "importPath": "alpaca_trade_api.common",
        "description": "alpaca_trade_api.common",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_data_url",
        "importPath": "alpaca_trade_api.common",
        "description": "alpaca_trade_api.common",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "msgpack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgpack",
        "description": "msgpack",
        "detail": "msgpack",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "APIError",
        "importPath": "alpaca_trade_api.rest",
        "description": "alpaca_trade_api.rest",
        "isExtraImport": true,
        "detail": "alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "requests_mock",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests_mock",
        "description": "requests_mock",
        "detail": "requests_mock",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "show_code",
        "importPath": "streamlit.hello.utils",
        "description": "streamlit.hello.utils",
        "isExtraImport": true,
        "detail": "streamlit.hello.utils",
        "documentation": {}
    },
    {
        "label": "show_code",
        "importPath": "streamlit.hello.utils",
        "description": "streamlit.hello.utils",
        "isExtraImport": true,
        "detail": "streamlit.hello.utils",
        "documentation": {}
    },
    {
        "label": "show_code",
        "importPath": "streamlit.hello.utils",
        "description": "streamlit.hello.utils",
        "isExtraImport": true,
        "detail": "streamlit.hello.utils",
        "documentation": {}
    },
    {
        "label": "show_code",
        "importPath": "streamlit.hello.utils",
        "description": "streamlit.hello.utils",
        "isExtraImport": true,
        "detail": "streamlit.hello.utils",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "A2C",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "SAC",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "TD3",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "A2C",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "SAC",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "TD3",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "description": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "description": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "PaperTradingAlpaca",
        "importPath": "finrl.meta.paper_trading.alpaca",
        "description": "finrl.meta.paper_trading.alpaca",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.alpaca",
        "documentation": {}
    },
    {
        "label": "train",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "alpaca_history",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DIA_history",
        "importPath": "finrl.meta.paper_trading.common",
        "description": "finrl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "finrl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "BDay",
        "importPath": "pandas.tseries.offsets",
        "description": "pandas.tseries.offsets",
        "isExtraImport": true,
        "detail": "pandas.tseries.offsets",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "importPath": "finrl.applications.stock_trading.stock_trading",
        "description": "finrl.applications.stock_trading.stock_trading",
        "isExtraImport": true,
        "detail": "finrl.applications.stock_trading.stock_trading",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "schedule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schedule",
        "description": "schedule",
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "importPath": "finrl.meta.env_stock_trading.env_stock_papertrading",
        "description": "finrl.meta.env_stock_trading.env_stock_papertrading",
        "isExtraImport": true,
        "detail": "finrl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "numpy.random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.random",
        "description": "numpy.random",
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Tensor",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "Tensor",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "Normal",
        "importPath": "torch.distributions.normal",
        "description": "torch.distributions.normal",
        "isExtraImport": true,
        "detail": "torch.distributions.normal",
        "documentation": {}
    },
    {
        "label": "Normal",
        "importPath": "torch.distributions.normal",
        "description": "torch.distributions.normal",
        "isExtraImport": true,
        "detail": "torch.distributions.normal",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "finrl.meta.data_processors.processor_alpaca",
        "description": "finrl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "finrl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "exchange_calendars",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "exchange_calendars",
        "description": "exchange_calendars",
        "detail": "exchange_calendars",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "matplotlib.ticker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "matplotlib.dates",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.dates",
        "description": "matplotlib.dates",
        "detail": "matplotlib.dates",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "alpaca.trading.enums",
        "description": "alpaca.trading.enums",
        "isExtraImport": true,
        "detail": "alpaca.trading.enums",
        "documentation": {}
    },
    {
        "label": "APScheduler",
        "importPath": "flask_apscheduler",
        "description": "flask_apscheduler",
        "isExtraImport": true,
        "detail": "flask_apscheduler",
        "documentation": {}
    },
    {
        "label": "run_drl_task",
        "importPath": "drl_task",
        "description": "drl_task",
        "isExtraImport": true,
        "detail": "drl_task",
        "documentation": {}
    },
    {
        "label": "sphinx_rtd_theme",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sphinx_rtd_theme",
        "description": "sphinx_rtd_theme",
        "detail": "sphinx_rtd_theme",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "streamlit.logger",
        "description": "streamlit.logger",
        "isExtraImport": true,
        "detail": "streamlit.logger",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.rl.agents.elegantrl",
        "description": "lib.rl.agents.elegantrl",
        "isExtraImport": true,
        "detail": "lib.rl.agents.elegantrl",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "lib.rl.agents.elegantrl.models ",
        "description": "lib.rl.agents.elegantrl.models ",
        "isExtraImport": true,
        "detail": "lib.rl.agents.elegantrl.models ",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "isExtraImport": true,
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "AdamW",
        "importPath": "torch.optim",
        "description": "torch.optim",
        "isExtraImport": true,
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Batch",
        "importPath": "torch_geometric.data",
        "description": "torch_geometric.data",
        "isExtraImport": true,
        "detail": "torch_geometric.data",
        "documentation": {}
    },
    {
        "label": "Data",
        "importPath": "torch_geometric.data",
        "description": "torch_geometric.data",
        "isExtraImport": true,
        "detail": "torch_geometric.data",
        "documentation": {}
    },
    {
        "label": "RGCNConv",
        "importPath": "torch_geometric.nn",
        "description": "torch_geometric.nn",
        "isExtraImport": true,
        "detail": "torch_geometric.nn",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "torch_geometric.nn",
        "description": "torch_geometric.nn",
        "isExtraImport": true,
        "detail": "torch_geometric.nn",
        "documentation": {}
    },
    {
        "label": "to_dense_batch",
        "importPath": "torch_geometric.utils",
        "description": "torch_geometric.utils",
        "isExtraImport": true,
        "detail": "torch_geometric.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "IterableDataset",
        "importPath": "torch.utils.data.dataset",
        "description": "torch.utils.data.dataset",
        "isExtraImport": true,
        "detail": "torch.utils.data.dataset",
        "documentation": {}
    },
    {
        "label": "ray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ray",
        "description": "ray",
        "detail": "ray",
        "documentation": {}
    },
    {
        "label": "tune",
        "importPath": "ray",
        "description": "ray",
        "isExtraImport": true,
        "detail": "ray",
        "documentation": {}
    },
    {
        "label": "ConcurrencyLimiter",
        "importPath": "ray.tune.search",
        "description": "ray.tune.search",
        "isExtraImport": true,
        "detail": "ray.tune.search",
        "documentation": {}
    },
    {
        "label": "Algorithm",
        "importPath": "ray.rllib.algorithms",
        "description": "ray.rllib.algorithms",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms",
        "documentation": {}
    },
    {
        "label": "register_env",
        "importPath": "ray.tune",
        "description": "ray.tune",
        "isExtraImport": true,
        "detail": "ray.tune",
        "documentation": {}
    },
    {
        "label": "RunConfig",
        "importPath": "ray.air",
        "description": "ray.air",
        "isExtraImport": true,
        "detail": "ray.air",
        "documentation": {}
    },
    {
        "label": "FailureConfig",
        "importPath": "ray.air",
        "description": "ray.air",
        "isExtraImport": true,
        "detail": "ray.air",
        "documentation": {}
    },
    {
        "label": "ScalingConfig",
        "importPath": "ray.air",
        "description": "ray.air",
        "isExtraImport": true,
        "detail": "ray.air",
        "documentation": {}
    },
    {
        "label": "TuneConfig",
        "importPath": "ray.tune.tune_config",
        "description": "ray.tune.tune_config",
        "isExtraImport": true,
        "detail": "ray.tune.tune_config",
        "documentation": {}
    },
    {
        "label": "CheckpointConfig",
        "importPath": "ray.air.config",
        "description": "ray.air.config",
        "isExtraImport": true,
        "detail": "ray.air.config",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "a2c",
        "importPath": "ray.rllib.algorithms.a2c",
        "description": "ray.rllib.algorithms.a2c",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.a2c",
        "documentation": {}
    },
    {
        "label": "ddpg",
        "importPath": "ray.rllib.algorithms.ddpg",
        "description": "ray.rllib.algorithms.ddpg",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.ddpg",
        "documentation": {}
    },
    {
        "label": "ppo",
        "importPath": "ray.rllib.algorithms.ppo",
        "description": "ray.rllib.algorithms.ppo",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.ppo",
        "documentation": {}
    },
    {
        "label": "sac",
        "importPath": "ray.rllib.algorithms.sac",
        "description": "ray.rllib.algorithms.sac",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.sac",
        "documentation": {}
    },
    {
        "label": "td3",
        "importPath": "ray.rllib.algorithms.td3",
        "description": "ray.rllib.algorithms.td3",
        "isExtraImport": true,
        "detail": "ray.rllib.algorithms.td3",
        "documentation": {}
    },
    {
        "label": "optuna",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optuna",
        "description": "optuna",
        "detail": "optuna",
        "documentation": {}
    },
    {
        "label": "NormalActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "OrnsteinUhlenbeckActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "NormalActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "OrnsteinUhlenbeckActionNoise",
        "importPath": "stable_baselines3.common.noise",
        "description": "stable_baselines3.common.noise",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.noise",
        "documentation": {}
    },
    {
        "label": "linear_schedule",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BaseCallback",
        "importPath": "stable_baselines3.common.callbacks",
        "description": "stable_baselines3.common.callbacks",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.callbacks",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "SubprocVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "SubprocVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "finrl.agents.stablebaselines3.hyperparams_opt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "finrl.agents.stablebaselines3.hyperparams_opt",
        "description": "finrl.agents.stablebaselines3.hyperparams_opt",
        "detail": "finrl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "StockDataFrame",
        "importPath": "stockstats",
        "description": "stockstats",
        "isExtraImport": true,
        "detail": "stockstats",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "ccxt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ccxt",
        "description": "ccxt",
        "detail": "ccxt",
        "documentation": {}
    },
    {
        "label": "jqdatasdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jqdatasdk",
        "description": "jqdatasdk",
        "detail": "jqdatasdk",
        "documentation": {}
    },
    {
        "label": "calc_all_filenames",
        "importPath": "func",
        "description": "func",
        "isExtraImport": true,
        "detail": "func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "func",
        "description": "func",
        "isExtraImport": true,
        "detail": "func",
        "documentation": {}
    },
    {
        "label": "remove_all_files",
        "importPath": "func",
        "description": "func",
        "isExtraImport": true,
        "detail": "func",
        "documentation": {}
    },
    {
        "label": "wrds",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wrds",
        "description": "wrds",
        "detail": "wrds",
        "documentation": {}
    },
    {
        "label": "Timestamp",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "gymnasium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gymnasium",
        "description": "gymnasium",
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gymnasium",
        "description": "gymnasium",
        "isExtraImport": true,
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gymnasium",
        "description": "gymnasium",
        "isExtraImport": true,
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gymnasium.utils",
        "description": "gymnasium.utils",
        "isExtraImport": true,
        "detail": "gymnasium.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gymnasium.utils",
        "description": "gymnasium.utils",
        "isExtraImport": true,
        "detail": "gymnasium.utils",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "stable_baselines3.common",
        "description": "stable_baselines3.common",
        "isExtraImport": true,
        "detail": "stable_baselines3.common",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "stable_baselines3.common",
        "description": "stable_baselines3.common",
        "isExtraImport": true,
        "detail": "stable_baselines3.common",
        "documentation": {}
    },
    {
        "label": "AgentPPO",
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "isExtraImport": true,
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "isExtraImport": true,
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "multiprocessing.sharedctypes",
        "description": "multiprocessing.sharedctypes",
        "isExtraImport": true,
        "detail": "multiprocessing.sharedctypes",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "TransformerMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "MaxAbsScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "tushare",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tushare",
        "description": "tushare",
        "detail": "tushare",
        "documentation": {}
    },
    {
        "label": "WrdsProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_wrds",
        "description": "lib.rl.meta.data_processors.processor_wrds",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_wrds",
        "documentation": {}
    },
    {
        "label": "YahooFinanceProcessor",
        "importPath": "lib.rl.meta.data_processors.processor_yahoofinance",
        "description": "lib.rl.meta.data_processors.processor_yahoofinance",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.processor_yahoofinance",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pyfolio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyfolio",
        "description": "pyfolio",
        "detail": "pyfolio",
        "documentation": {}
    },
    {
        "label": "timeseries",
        "importPath": "pyfolio",
        "description": "pyfolio",
        "isExtraImport": true,
        "detail": "pyfolio",
        "documentation": {}
    },
    {
        "label": "date2str",
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "isExtraImport": true,
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "importPath": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "description": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "isExtraImport": true,
        "detail": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "lib.rl.test",
        "description": "lib.rl.test",
        "isExtraImport": true,
        "detail": "lib.rl.test",
        "documentation": {}
    },
    {
        "label": "URLError",
        "importPath": "urllib.error",
        "description": "urllib.error",
        "isExtraImport": true,
        "detail": "urllib.error",
        "documentation": {}
    },
    {
        "label": "URLError",
        "importPath": "urllib.error",
        "description": "urllib.error",
        "isExtraImport": true,
        "detail": "urllib.error",
        "documentation": {}
    },
    {
        "label": "pydeck",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydeck",
        "description": "pydeck",
        "detail": "pydeck",
        "documentation": {}
    },
    {
        "label": "altair",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "altair",
        "description": "altair",
        "detail": "altair",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment.vader",
        "description": "nltk.sentiment.vader",
        "isExtraImport": true,
        "detail": "nltk.sentiment.vader",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def main():\n  import pandas as pd\n  dir = [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n  check_and_make_directories( dir )\n  jprint(\"app.py: Directory Paths:   \",  \"   //\".join(dir),  '##')\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date = TRAIN_START_DATE,\n                      end_date = TRADE_END_DATE,\n                      ticker_list = config_tickers.DOW_30_TICKER).fetch_data()\n#  df.shape",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\nAPI_SECRET = \"BxT64PIQtDBb*tnW\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "API_SECRET = \"BxT64PIQtDBb*tnW\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "TRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "up_candle",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "up_candle = \"📈\"  # \\U0001F4C8\ndown_candle = \"\"  # \\U0001F4C9\n# Set page title and configure layout\nst.set_page_config(\n      page_title=\"Stock prediction Trainig\", \n      layout=\"wide\",\n      page_icon= \"📈\"\n      )\n# Apply the custom CSS\nst.markdown(custom_css, unsafe_allow_html=True)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "down_candle",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "down_candle = \"\"  # \\U0001F4C9\n# Set page title and configure layout\nst.set_page_config(\n      page_title=\"Stock prediction Trainig\", \n      layout=\"wide\",\n      page_icon= \"📈\"\n      )\n# Apply the custom CSS\nst.markdown(custom_css, unsafe_allow_html=True)\n#page title and subtitle",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "finviz_url",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "finviz_url = \"https://finviz.com/quote.ashx?t=\"\nexample_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "example_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# if ticker:",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# if ticker:\n      #Fetching stock price data\ndef main():\n  import pandas as pd\n  dir = [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n  check_and_make_directories( dir )\n  jprint(\"app.py: Directory Paths:   \",  \"   //\".join(dir),  '##')\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date = TRAIN_START_DATE,",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "stock_trading_rolling_window",
        "kind": 2,
        "importPath": "docs.examples.FINRL.FINRL.stock_trading_rolling_window",
        "description": "docs.examples.FINRL.FINRL.stock_trading_rolling_window",
        "peekOfCode": "def stock_trading_rolling_window(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    rolling_window_length: int,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,",
        "detail": "docs.examples.FINRL.FINRL.stock_trading_rolling_window",
        "documentation": {}
    },
    {
        "label": "stock_trading_rolling_window",
        "kind": 2,
        "importPath": "docs.examples.FINRL.3",
        "description": "docs.examples.FINRL.3",
        "peekOfCode": "def stock_trading_rolling_window(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    rolling_window_length: int,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,",
        "detail": "docs.examples.FINRL.3",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "class URL(str):\n    def __new__(cls, *value):\n        \"\"\"\n        note: we use *value and v0 to allow an empty URL string\n        \"\"\"\n        if value:\n            v0 = value[0]\n            if not (isinstance(v0, str) or isinstance(v0, URL)):\n                raise TypeError(f'Unexpected type for URL: \"{type(v0)}\"')\n            if not (v0.startswith('http://') or v0.startswith('https://') or",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "DATE",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "class DATE(str):\n    \"\"\"\n    date string in the format YYYY-MM-DD\n    \"\"\"\n    def __new__(cls, value):\n        if not value:\n            raise ValueError('Unexpected empty string')\n        if not isinstance(value, str):\n            raise TypeError(f'Unexpected type for DATE: \"{type(value)}\"')\n        if value.count(\"-\") != 2:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "FLOAT",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "class FLOAT(str):\n    \"\"\"\n    api allows passing floats or float as strings.\n    let's make sure that param passed is one of the two, so we don't pass\n    invalid strings all the way to the servers.\n    \"\"\"\n    def __new__(cls, value):\n        if isinstance(value, float) or isinstance(value, int):\n            return value\n        if isinstance(value, str):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_base_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_BASE_URL', 'https://api.alpaca.markets').rstrip('/'))\ndef get_data_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_DATA_URL', 'https://data.alpaca.markets').rstrip('/'))\ndef get_data_stream_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_STREAM_URL',\n        'https://stream.data.alpaca.markets').rstrip('/')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_data_url",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_data_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_DATA_URL', 'https://data.alpaca.markets').rstrip('/'))\ndef get_data_stream_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_STREAM_URL',\n        'https://stream.data.alpaca.markets').rstrip('/')\n               )\ndef get_credentials(key_id: str = None,\n                    secret_key: str = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_data_stream_url",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_data_stream_url() -> URL:\n    return URL(os.environ.get(\n        'APCA_API_STREAM_URL',\n        'https://stream.data.alpaca.markets').rstrip('/')\n               )\ndef get_credentials(key_id: str = None,\n                    secret_key: str = None,\n                    oauth: str = None) -> Credentials:\n    oauth = oauth or os.environ.get('APCA_API_OAUTH_TOKEN')\n    key_id = key_id or os.environ.get('APCA_API_KEY_ID')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_credentials",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_credentials(key_id: str = None,\n                    secret_key: str = None,\n                    oauth: str = None) -> Credentials:\n    oauth = oauth or os.environ.get('APCA_API_OAUTH_TOKEN')\n    key_id = key_id or os.environ.get('APCA_API_KEY_ID')\n    if key_id is None and oauth is None:\n        raise ValueError('Key ID must be given to access Alpaca trade API',\n                         ' (env: APCA_API_KEY_ID)')\n    secret_key = secret_key or os.environ.get('APCA_API_SECRET_KEY')\n    if secret_key is None and oauth is None:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "get_api_version",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "def get_api_version(api_version: str) -> str:\n    api_version = api_version or os.environ.get('APCA_API_VERSION')\n    if api_version is None:\n        api_version = 'v2'\n    return api_version",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.common",
        "description": "docs.examples.PY.lib.alpaca_trade_api.common",
        "peekOfCode": "Credentials = Tuple[str, str, str]\nclass URL(str):\n    def __new__(cls, *value):\n        \"\"\"\n        note: we use *value and v0 to allow an empty URL string\n        \"\"\"\n        if value:\n            v0 = value[0]\n            if not (isinstance(v0, str) or isinstance(v0, URL)):\n                raise TypeError(f'Unexpected type for URL: \"{type(v0)}\"')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.common",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Entity(object):\n    '''This helper class provides property access (the \"dot notation\")\n    to the json object, backed by the original object stored in the _raw\n    field.\n    '''\n    def __init__(self, raw):\n        self._raw = raw\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Account(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account/\n    \"\"\"\n    pass\nclass AccountConfigurations(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-configuration/",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "AccountConfigurations",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class AccountConfigurations(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-configuration/\n    \"\"\"\n    pass\nclass Asset(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/assets/#asset-entity",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Asset",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Asset(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/assets/#asset-entity\n    \"\"\"\n    pass\nclass Order(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/orders/#order-entity",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Order(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/orders/#order-entity\n    \"\"\"\n    def __init__(self, raw):\n        super().__init__(raw)\n        try:\n            self.legs = [Order(o) for o in self.legs]\n        except Exception:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Position(Entity):\n    \"\"\"\n    Entity properties:\nhttps://alpaca.markets/docs/api-documentation/api-v2/positions/#position-entity\n    \"\"\"\n    pass\nclass AccountActivity(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-activities/",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "AccountActivity",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class AccountActivity(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/account-activities/\n    \"\"\"\n    pass\nclass Bar(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/bars/",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Bar(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/bars/\n    #bars-entity\n    \"\"\"\n    def __getattr__(self, key):\n        if key == 't':\n            val = self._raw[key[0]]\n            return pd.Timestamp(val, unit='s', tz=NY)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Bars",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Bars(list):\n    def __init__(self, raw):\n        super().__init__([Bar(o) for o in raw])\n        self._raw = raw\n    @property\n    def df(self):\n        if not hasattr(self, '_df'):\n            df = pd.DataFrame(\n                self._raw, columns=('t', 'o', 'h', 'l', 'c', 'v'),\n            )",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "_Timestamped",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class _Timestamped(object):\n    _tskeys = ('timestamp',)\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]\n            if key in self._tskeys:\n                return pd.Timestamp(val, tz=NY, unit=self._unit)\n            return val\n        return getattr(super(), key)\nclass _NanoTimestamped(_Timestamped):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "_NanoTimestamped",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class _NanoTimestamped(_Timestamped):\n    _unit = 'ns'\nclass Trade(_NanoTimestamped, Entity):\n    pass\nclass Quote(_NanoTimestamped, Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n    /#last-quote-entity\n    \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Trade",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Trade(_NanoTimestamped, Entity):\n    pass\nclass Quote(_NanoTimestamped, Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n    /#last-quote-entity\n    \"\"\"\n    pass\nclass Clock(Entity):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Quote",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Quote(_NanoTimestamped, Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/market-data/last-quote\n    /#last-quote-entity\n    \"\"\"\n    pass\nclass Clock(Entity):\n    \"\"\"\n    Entity properties:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Clock",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Clock(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/clock/#clock-entity\n    \"\"\"\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]\n            if key in ('timestamp', 'next_open', 'next_close'):\n                return pd.Timestamp(val)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Calendar(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/calendar/\n    #calendar-entity\n    \"\"\"\n    def __getattr__(self, key):\n        if key in self._raw:\n            val = self._raw[key]\n            if key in ('date',):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "Watchlist",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class Watchlist(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/watchlist/\n    #watchlist-entity\n    \"\"\"\n    pass\nclass PortfolioHistory(Entity):\n    \"\"\"\n    Entity properties:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "PortfolioHistory",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "class PortfolioHistory(Entity):\n    \"\"\"\n    Entity properties:\n    https://alpaca.markets/docs/api-documentation/api-v2/portfolio-history/\n    #portfoliohistory-entity\n    \"\"\"\n    def __init__(self, raw):\n        self._raw = raw\n    @property\n    def df(self):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "ISO8601YMD",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "ISO8601YMD = re.compile(r'\\d{4}-\\d{2}-\\d{2}T')\nNY = 'America/New_York'\nclass Entity(object):\n    '''This helper class provides property access (the \"dot notation\")\n    to the json object, backed by the original object stored in the _raw\n    field.\n    '''\n    def __init__(self, raw):\n        self._raw = raw\n    def __getattr__(self, key):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "NY",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "NY = 'America/New_York'\nclass Entity(object):\n    '''This helper class provides property access (the \"dot notation\")\n    to the json object, backed by the original object stored in the _raw\n    field.\n    '''\n    def __init__(self, raw):\n        self._raw = raw\n    def __getattr__(self, key):\n        if key in self._raw:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "trade_mapping",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "trade_mapping = {\n    \"T\": \"symbol\",\n    \"c\": \"conditions\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"t\": \"timestamp\"\n}\nquote_mapping = {\n    \"T\": \"symbol\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "quote_mapping",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "quote_mapping = {\n    \"T\": \"symbol\",\n    \"X\": \"askexchange\",\n    \"P\": \"askprice\",\n    \"S\": \"asksize\",\n    \"x\": \"bidexchange\",\n    \"p\": \"bidprice\",\n    \"s\": \"bidsize\",\n    \"c\": \"conditions\",\n    \"t\": \"timestamp\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "agg_mapping",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "peekOfCode": "agg_mapping = {\n    \"T\": \"symbol\",\n    \"o\": \"open\",\n    \"c\": \"close\",\n    \"h\": \"high\",\n    \"l\": \"low\",\n    \"a\": \"average\",\n    \"x\": \"exchange\",\n    \"v\": \"volume\",\n    \"s\": \"start\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity",
        "documentation": {}
    },
    {
        "label": "EntityListType",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class EntityListType(Enum):\n    Trade = Trade, trade_mapping_v2\n    Quote = Quote, quote_mapping_v2\n    Bar = Bar, bar_mapping_v2\nclass EntityList(list):\n    def __init__(self, entity_type: EntityListType, raw):\n        entity = entity_type.value[0]\n        super().__init__([entity(o) for o in raw])\n        self._raw = raw\n        self.mapping = entity_type.value[1]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "EntityList",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class EntityList(list):\n    def __init__(self, entity_type: EntityListType, raw):\n        entity = entity_type.value[0]\n        super().__init__([entity(o) for o in raw])\n        self._raw = raw\n        self.mapping = entity_type.value[1]\n    @property\n    def df(self):\n        if not hasattr(self, '_df'):\n            df = pd.DataFrame(",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "Remapped",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class Remapped:\n    def __init__(self, mapping: Dict[str, str], *args, **kwargs):\n        self._reversed_mapping = {\n            value: key for (key, value) in mapping.items()}\n        super().__init__(*args, **kwargs)\n    def __getattr__(self, key):\n        if key in self._reversed_mapping:\n            return super().__getattr__(self._reversed_mapping[key])\n        return super().__getattr__(key)\nclass BarsV2(EntityList):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "BarsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class BarsV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Bar, raw)\nclass TradesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Trade, raw)\nclass QuotesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Quote, raw)\nclass TradeV2(Remapped, _NanoTimestamped, Entity):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "TradesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class TradesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Trade, raw)\nclass QuotesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Quote, raw)\nclass TradeV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(trade_mapping_v2, raw)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "QuotesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class QuotesV2(EntityList):\n    def __init__(self, raw):\n        super().__init__(EntityListType.Quote, raw)\nclass TradeV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(trade_mapping_v2, raw)\nclass QuoteV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "TradeV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class TradeV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(trade_mapping_v2, raw)\nclass QuoteV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(quote_mapping_v2, raw)\nclass BarV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "QuoteV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class QuoteV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(quote_mapping_v2, raw)\nclass BarV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(bar_mapping_v2, raw)\nclass StatusV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "BarV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class BarV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(bar_mapping_v2, raw)\nclass StatusV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(status_mapping_v2, raw)\nclass LULDV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "StatusV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class StatusV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(status_mapping_v2, raw)\nclass LULDV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(luld_mapping_v2, raw)\nclass CancelErrorV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LULDV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LULDV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(luld_mapping_v2, raw)\nclass CancelErrorV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(cancel_error_mapping_v2, raw)\nclass CorrectionV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "CancelErrorV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class CancelErrorV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(cancel_error_mapping_v2, raw)\nclass CorrectionV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(correction_mapping_v2, raw)\nclass SnapshotV2:\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "CorrectionV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class CorrectionV2(Remapped, _NanoTimestamped, Entity):\n    _tskeys = ('t',)\n    def __init__(self, raw):\n        super().__init__(correction_mapping_v2, raw)\nclass SnapshotV2:\n    def __init__(self, raw):\n        self.latest_trade = _convert_or_none(TradeV2, raw.get('latestTrade'))\n        self.latest_quote = _convert_or_none(QuoteV2, raw.get('latestQuote'))\n        self.minute_bar = _convert_or_none(BarV2, raw.get('minuteBar'))\n        self.daily_bar = _convert_or_none(BarV2, raw.get('dailyBar'))",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "SnapshotV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class SnapshotV2:\n    def __init__(self, raw):\n        self.latest_trade = _convert_or_none(TradeV2, raw.get('latestTrade'))\n        self.latest_quote = _convert_or_none(QuoteV2, raw.get('latestQuote'))\n        self.minute_bar = _convert_or_none(BarV2, raw.get('minuteBar'))\n        self.daily_bar = _convert_or_none(BarV2, raw.get('dailyBar'))\n        self.prev_daily_bar = _convert_or_none(BarV2, raw.get('prevDailyBar'))\nclass SnapshotsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "SnapshotsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class SnapshotsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(SnapshotV2, v)\nclass LatestBarsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(BarV2, v)\nclass LatestTradesV2(dict):\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LatestBarsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LatestBarsV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(BarV2, v)\nclass LatestTradesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(TradeV2, v)\nclass LatestQuotesV2(dict):\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LatestTradesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LatestTradesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(TradeV2, v)\nclass LatestQuotesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(QuoteV2, v)\nclass BidOrAsk(Entity):\n    def __init__(self, raw):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "LatestQuotesV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class LatestQuotesV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            self[k] = _convert_or_none(QuoteV2, v)\nclass BidOrAsk(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\nclass OrderbookV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "BidOrAsk",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class BidOrAsk(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\nclass OrderbookV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\n        if self.bids:\n            for i in range(len(self.bids)):\n                self.bids[i] = BidOrAsk(self.bids[i])\n        if self.asks:",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "OrderbookV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class OrderbookV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\n        if self.bids:\n            for i in range(len(self.bids)):\n                self.bids[i] = BidOrAsk(self.bids[i])\n        if self.asks:\n            for i in range(len(self.asks)):\n                self.asks[i] = BidOrAsk(self.asks[i])\nclass OrderbooksV2(dict):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "OrderbooksV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class OrderbooksV2(dict):\n    def __init__(self, raw):\n        for k, v in raw.items():\n            for side in orderbook_mapping_v2.keys():\n                if side not in v:\n                    continue\n                readable_side = orderbook_mapping_v2[side]\n                v[readable_side] = v[side]\n                v.pop(side)\n            self[k] = _convert_or_none(OrderbookV2, v)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "NewsV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class NewsV2(Entity):\n    def __init__(self, raw):\n        super().__init__(raw)\nclass NewsListV2(list):\n    def __init__(self, raw):\n        super().__init__([NewsV2(o) for o in raw])\ndef _convert_or_none(entityType, value):\n    if value:\n        return entityType(value)\n    return None",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "NewsListV2",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "class NewsListV2(list):\n    def __init__(self, raw):\n        super().__init__([NewsV2(o) for o in raw])\ndef _convert_or_none(entityType, value):\n    if value:\n        return entityType(value)\n    return None",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "trade_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "trade_mapping_v2 = {\n    \"i\": \"id\",\n    \"S\": \"symbol\",\n    \"c\": \"conditions\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"t\": \"timestamp\",\n    \"z\": \"tape\",  # stocks only\n    \"tks\": \"takerside\"  # crypto only",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "quote_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "quote_mapping_v2 = {\n    \"S\":  \"symbol\",\n    \"x\": \"exchange\",  # crypto only\n    \"ax\": \"ask_exchange\",\n    \"ap\": \"ask_price\",\n    \"as\": \"ask_size\",\n    \"bx\": \"bid_exchange\",\n    \"bp\": \"bid_price\",\n    \"bs\": \"bid_size\",\n    \"c\":  \"conditions\",  # stocks only",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "bar_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "bar_mapping_v2 = {\n    \"S\":  \"symbol\",\n    \"x\": \"exchange\",  # crypto only\n    \"o\":  \"open\",\n    \"h\":  \"high\",\n    \"l\":  \"low\",\n    \"c\":  \"close\",\n    \"v\":  \"volume\",\n    \"t\":  \"timestamp\",\n    \"n\":  \"trade_count\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "status_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "status_mapping_v2 = {\n    \"S\":  \"symbol\",\n    \"sc\": \"status_code\",\n    \"sm\": \"status_message\",\n    \"rc\": \"reason_code\",\n    \"rm\": \"reason_message\",\n    \"t\":  \"timestamp\",\n    \"z\":  \"tape\"\n}\nluld_mapping_v2 = {",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "luld_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "luld_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"u\": \"limit_up_price\",\n    \"d\": \"limit_down_price\",\n    \"i\": \"indicator\",\n    \"t\": \"timestamp\",\n    \"z\": \"tape\"\n}\ncancel_error_mapping_v2 = {\n    \"S\": \"symbol\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "cancel_error_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "cancel_error_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"i\": \"id\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"a\": \"cancel_error_action\",\n    \"z\": \"tape\",\n    \"t\": \"timestamp\",\n}",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "correction_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "correction_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"x\": \"exchange\",\n    \"oi\": \"original_id\",\n    \"op\": \"original_price\",\n    \"os\": \"original_size\",\n    \"oc\": \"original_conditions\",\n    \"ci\": \"corrected_id\",\n    \"cp\": \"corrected_price\",\n    \"cs\": \"corrected_size\",",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "orderbook_mapping_v2",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "description": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "peekOfCode": "orderbook_mapping_v2 = {\n    \"S\": \"symbol\",\n    \"x\": \"exchange\",\n    \"t\": \"timestamp\",\n    \"b\": \"bids\",\n    \"a\": \"asks\",\n}\nclass EntityListType(Enum):\n    Trade = Trade, trade_mapping_v2\n    Quote = Quote, quote_mapping_v2",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.entity_v2",
        "documentation": {}
    },
    {
        "label": "RetryException",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):\n        super().__init__(error['message'])\n        self._error = error",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "APIError",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):\n        super().__init__(error['message'])\n        self._error = error\n        self._http_error = http_error\n    @property",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrameUnit",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class TimeFrameUnit(Enum):\n    Minute = \"Min\"\n    Hour = \"Hour\"\n    Day = \"Day\"\n    Week = \"Week\"\n    Month = \"Month\"\nclass TimeFrame:\n    def __init__(self, amount: int, unit: TimeFrameUnit):\n        self.validate(amount, unit)\n        self.__amount = amount",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class TimeFrame:\n    def __init__(self, amount: int, unit: TimeFrameUnit):\n        self.validate(amount, unit)\n        self.__amount = amount\n        self.__unit = unit\n    @property\n    def amount(self):\n        return self.__amount\n    @amount.setter\n    def amount(self, value: int):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Sort",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 base_url: URL = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "REST",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "class REST(object):\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 base_url: URL = None,\n                 api_version: str = None,\n                 oauth=None,\n                 raw_data: bool = False\n                 ):\n        \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "raise_api_error",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "def raise_api_error(resp: requests.Response, http_error: requests.HTTPError):\n    try:\n        error = resp.json()\n    except:\n        raise http_error from None\n    if 'message' in error:\n        raise APIError(error, http_error) from None\n    raise http_error from None\nclass TimeFrameUnit(Enum):\n    Minute = \"Min\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "logger = logging.getLogger(__name__)\nPositions = List[Position]\nOrders = List[Order]\nAssets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Positions",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Positions = List[Position]\nOrders = List[Order]\nAssets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Orders",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Orders = List[Order]\nAssets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Assets",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Assets = List[Asset]\nAccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "AccountActivities",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "AccountActivities = List[AccountActivity]\nCalendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Calendars",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Calendars = List[Calendar]\nWatchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "Watchlists",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "Watchlists = List[Watchlist]\nTradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TradeIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TradeIterator = Iterator[Union[Trade, dict]]\nQuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "QuoteIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "QuoteIterator = Iterator[Union[Quote, dict]]\nBarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "BarIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "BarIterator = Iterator[Union[Bar, dict]]\nNewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "NewsIterator",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "NewsIterator = Iterator[Union[NewsV2, dict]]\nDATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "DATA_V2_MAX_LIMIT",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "DATA_V2_MAX_LIMIT = 10000  # max items per api call\nNEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "NEWS_MAX_LIMIT",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "NEWS_MAX_LIMIT = 50  # max items per api call\nclass RetryException(Exception):\n    pass\nclass APIError(Exception):\n    \"\"\"\n    Represent API related error.\n    error.status_code will have http status code.\n    \"\"\"\n    def __init__(self, error, http_error=None):\n        super().__init__(error['message'])",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Minute",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Minute = TimeFrame(1, TimeFrameUnit.Minute)\nTimeFrame.Hour = TimeFrame(1, TimeFrameUnit.Hour)\nTimeFrame.Day = TimeFrame(1, TimeFrameUnit.Day)\nTimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Hour",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Hour = TimeFrame(1, TimeFrameUnit.Hour)\nTimeFrame.Day = TimeFrame(1, TimeFrameUnit.Day)\nTimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Day",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Day = TimeFrame(1, TimeFrameUnit.Day)\nTimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Week",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Week = TimeFrame(1, TimeFrameUnit.Week)\nTimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,\n                 key_id: str = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "TimeFrame.Month",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "peekOfCode": "TimeFrame.Month = TimeFrame(1, TimeFrameUnit.Month)\nclass Sort(Enum):\n    Asc = \"asc\"\n    Desc = \"desc\"\n    def __str__(self):\n        return self.value\nclass REST(object):\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest",
        "documentation": {}
    },
    {
        "label": "AsyncRest",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.rest_async",
        "description": "docs.examples.PY.lib.alpaca_trade_api.rest_async",
        "peekOfCode": "class AsyncRest:\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 data_url: URL = None,\n                 api_version: str = None,\n                 raw_data: bool = False\n                 ):\n        \"\"\"\n        :param raw_data: should we return api response raw or wrap it with",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.rest_async",
        "documentation": {}
    },
    {
        "label": "_DataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class _DataStream:\n    def __init__(self,\n                 endpoint: str,\n                 key_id: str,\n                 secret_key: str,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "DataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class DataStream(_DataStream):\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool,\n                 feed: str = 'iex',\n                 websocket_params: Optional[Dict] = None):\n        base_url = re.sub(r'^http', 'ws', base_url)\n        super().__init__(endpoint=base_url + '/v2/' + feed,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "CryptoDataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class CryptoDataStream(_DataStream):\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool,\n                 exchanges: Optional[List[str]] = None,\n                 websocket_params: Optional[Dict] = None):\n        self._key_id = key_id\n        self._secret_key = secret_key",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "NewsDataStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class NewsDataStream(_DataStream):\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool,\n                 websocket_params: Optional[Dict] = None):\n        self._key_id = key_id\n        self._secret_key = secret_key\n        base_url = re.sub(r'^http', 'ws', base_url)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "TradingStream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class TradingStream:\n    def __init__(self,\n                 key_id: str,\n                 secret_key: str,\n                 base_url: URL,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None):\n        self._key_id = key_id\n        self._secret_key = secret_key\n        base_url = re.sub(r'^http', 'ws', base_url)",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "Stream",
        "kind": 6,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "class Stream:\n    def __init__(self,\n                 key_id: str = None,\n                 secret_key: str = None,\n                 base_url: URL = None,\n                 data_stream_url: URL = None,\n                 data_feed: str = 'iex',\n                 raw_data: bool = False,\n                 crypto_exchanges: Optional[List[str]] = None,\n                 websocket_params: Optional[Dict] = None):",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "log = logging.getLogger(__name__)\n# Default Params we pass to the websocket constructors\nWEBSOCKET_DEFAULTS = {\n    \"ping_interval\": 10,\n    \"ping_timeout\": 180,\n    \"max_queue\": 1024,\n}\ndef _ensure_coroutine(handler):\n    if not asyncio.iscoroutinefunction(handler):\n        raise ValueError('handler must be a coroutine function')",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_DEFAULTS",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "description": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "peekOfCode": "WEBSOCKET_DEFAULTS = {\n    \"ping_interval\": 10,\n    \"ping_timeout\": 180,\n    \"max_queue\": 1024,\n}\ndef _ensure_coroutine(handler):\n    if not asyncio.iscoroutinefunction(handler):\n        raise ValueError('handler must be a coroutine function')\nclass _DataStream:\n    def __init__(self,",
        "detail": "docs.examples.PY.lib.alpaca_trade_api.stream",
        "documentation": {}
    },
    {
        "label": "delete_base_url_envs",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def delete_base_url_envs():\n    if 'APCA_API_BASE_URL' in os.environ:\n        del os.environ['APCA_API_BASE_URL']\n    if 'APCA_API_DATA_URL' in os.environ:\n        del os.environ['APCA_API_DATA_URL']\n@pytest.fixture\ndef reqmock():\n    with requests_mock.Mocker() as m:\n        yield m\ndef test_api(reqmock):",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "reqmock",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def reqmock():\n    with requests_mock.Mocker() as m:\n        yield m\ndef test_api(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of accounts\n    reqmock.get('https://api.alpaca.markets/v1/account', text='''\n    {",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_api",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_api(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of accounts\n    reqmock.get('https://api.alpaca.markets/v1/account', text='''\n    {\n      \"id\": \"904837e3-3b76-47ec-b432-046db621571b\",\n      \"status\": \"ACTIVE\",\n      \"currency\": \"USD\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_orders",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_orders(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of orders\n    reqmock.get(\n        'https://api.alpaca.markets/v1/orders',\n        text='''[\n  {\n    \"id\": \"904837e3-3b76-47ec-b432-046db621571b\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_positions",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_positions(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Get a list of positions\n    reqmock.get(\n        'https://api.alpaca.markets/v1/positions',\n        text='''[\n  {\n    \"account_id\": \"904837e3-3b76-47ec-b432-046db621571b\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_chronos",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_chronos(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # clock\n    reqmock.get(\n        'https://api.alpaca.markets/v1/clock',\n        text='''{\n  \"timestamp\": \"2018-04-01T12:00:00.000Z\",\n  \"is_open\": true,",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_data",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_data(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # Latest trade\n    reqmock.get(\n        'https://data.alpaca.markets/v2/stocks/AAPL/trades/latest',\n        text='''\n        {\n            \"symbol\": \"AAPL\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_timeframe",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_timeframe(reqmock):\n    # Custom timeframe: Minutes\n    reqmock.get('https://data.alpaca.markets/v2/stocks/AAPL/bars?'\n                'timeframe=45Min&adjustment=raw&'\n                'start=2021-06-08&end=2021-06-08', text='{}')\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    timeframe = tradeapi.TimeFrame(45, tradeapi.TimeFrameUnit.Minute)\n    api.get_bars('AAPL', timeframe, '2021-06-08', '2021-06-08')\n    assert reqmock.called\n    # Custom timeframe: Hours",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_watchlists",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_watchlists(reqmock):\n    api = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_raw = tradeapi.REST('key-id', 'secret-key', api_version='v1',\n                            raw_data=True)\n    # get watchlists\n    reqmock.get(\n        'https://api.alpaca.markets/v1/watchlists',\n        text='''[\n    {\n        \"id\": \"900e20b1-46eb-492b-a505-2ea67386b5fd\",",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_errors",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_errors(reqmock):\n    api_v1 = tradeapi.REST('key-id', 'secret-key', api_version='v1')\n    api_v1._retry = 1\n    api_v1._retry_wait = 0\n    api_v1._do_error = True\n    def callback_429(request, context):\n        if api_v1._do_error:\n            api_v1._do_error = False\n            context.status_code = 429\n            return 'Too Many Requests'",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "test_no_resource_warning_with_context_manager",
        "kind": 2,
        "importPath": "docs.examples.PY.lib.tests.test_rest",
        "description": "docs.examples.PY.lib.tests.test_rest",
        "peekOfCode": "def test_no_resource_warning_with_context_manager():\n    with warnings.catch_warnings():  # ensure no warnings are raised\n        warnings.simplefilter(\"error\")\n        with tradeapi.REST(\"key-id\", \"secret-key\", api_version=\"v1\") as api:\n            assert api",
        "detail": "docs.examples.PY.lib.tests.test_rest",
        "documentation": {}
    },
    {
        "label": "_version_re",
        "kind": 5,
        "importPath": "docs.examples.PY.lib.setup",
        "description": "docs.examples.PY.lib.setup",
        "peekOfCode": "_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\nwith open('alpaca_trade_api/__init__.py', 'rb') as f:\n    version = str(ast.literal_eval(_version_re.search(\n        f.read().decode('utf-8')).group(1)))\nwith open('README.md') as readme_file:\n    README = readme_file.read()\nwith open(os.path.join(\"requirements\", \"requirements.txt\")) as reqs:\n    REQUIREMENTS = reqs.readlines()\nwith open(os.path.join(\"requirements\", \"requirements_test.txt\")) as reqs:\n    REQUIREMENTS_TEST = reqs.readlines()",
        "detail": "docs.examples.PY.lib.setup",
        "documentation": {}
    },
    {
        "label": "animation_demo",
        "kind": 2,
        "importPath": "docs.examples.PY.0_Animation_Demo",
        "description": "docs.examples.PY.0_Animation_Demo",
        "peekOfCode": "def animation_demo() -> None:\n    # Interactive Streamlit elements, like these sliders, return their value.\n    # This gives you an extremely simple interaction model.\n    iterations = st.sidebar.slider(\"Level of detail\", 2, 20, 10, 1)\n    separation = st.sidebar.slider(\"Separation\", 0.7, 2.0, 0.7885)\n    # Non-interactive elements return a placeholder to their location\n    # in the app. Here we're storing progress_bar to update it later.\n    progress_bar = st.sidebar.progress(0)\n    # These two elements will be filled in later, so we create a placeholder\n    # for them using st.empty()",
        "detail": "docs.examples.PY.0_Animation_Demo",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "kind": 6,
        "importPath": "docs.examples.PY.AlpacPaperTrading",
        "description": "docs.examples.PY.AlpacPaperTrading",
        "peekOfCode": "class AlpacaPaperTrading:\n    def __init__(self, ticker_list, time_interval, drl_lib, agent, cwd, net_dim, \n                 state_dim, action_dim, API_KEY, API_SECRET, \n                 API_BASE_URL, tech_indicator_list, turbulence_thresh=30, \n                 max_stock=1e2, latency=None):\n        self.ticker_list = ticker_list\n        self.time_interval = time_interval\n        self.drl_lib = drl_lib\n        self.agent = agent\n        self.cwd = cwd",
        "detail": "docs.examples.PY.AlpacPaperTrading",
        "documentation": {}
    },
    {
        "label": "DATA_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "DATA_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.data_key\nDATA_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.data_secret\nDATA_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.data_url\nTRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "DATA_API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "DATA_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.data_secret\nDATA_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.data_url\nTRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "DATA_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "DATA_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.data_url\nTRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRADING_API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRADING_API_KEY = \"PKVD6WOSPEMKS0UI6A3K\" #args.trading_key\nTRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)\nimport alpaca_trade_api",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRADING_API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRADING_API_SECRET = \"BxT64PIQtDBb*tnW\"  #args.trading_secret\nTRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)\nimport alpaca_trade_api\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRADING_API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRADING_API_BASE_URL = 'https://paper-api.alpaca.markets' #args.trading_url\nprint(\"DATA_API_KEY: \", DATA_API_KEY)\nprint(\"DATA_API_SECRET: \", DATA_API_SECRET)\nprint(\"DATA_API_BASE_URL: \", DATA_API_BASE_URL)\nprint(\"TRADING_API_KEY: \", TRADING_API_KEY)\nprint(\"TRADING_API_SECRET: \", TRADING_API_SECRET)\nprint(\"TRADING_API_BASE_URL: \", TRADING_API_BASE_URL)\nimport alpaca_trade_api\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv\nfrom finrl.meta.paper_trading.alpaca import PaperTradingAlpaca",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "ticker_list",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "ticker_list = DOW_30_TICKER\nenv = StockTradingEnv\n# if you want to use larger datasets (change to longer period), and it raises error, please try to increase \"target_step\". It should be larger than the episode steps.\nERL_PARAMS = {\n    \"learning_rate\": 3e-6,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": [128, 64],\n    \"target_step\": 5000,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "env = StockTradingEnv\n# if you want to use larger datasets (change to longer period), and it raises error, please try to increase \"target_step\". It should be larger than the episode steps.\nERL_PARAMS = {\n    \"learning_rate\": 3e-6,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": [128, 64],\n    \"target_step\": 5000,\n    \"eval_gap\": 30,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "ERL_PARAMS = {\n    \"learning_rate\": 3e-6,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": [128, 64],\n    \"target_step\": 5000,\n    \"eval_gap\": 30,\n    \"eval_times\": 1,\n}",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "today = datetime.datetime.today()\nTEST_END_DATE = (today - BDay(1)).to_pydatetime().date()\nTEST_START_DATE = (TEST_END_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_END_DATE = (today - BDay(1)).to_pydatetime().date()\nTEST_START_DATE = (TEST_END_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_START_DATE = (TEST_END_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_END_DATE = (TEST_START_DATE - BDay(1)).to_pydatetime().date()\nTRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_START_DATE = (TRAIN_END_DATE - BDay(5)).to_pydatetime().date()\nTRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_START_DATE = TRAIN_START_DATE\nTRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_END_DATE = TEST_END_DATE\nTRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_START_DATE = str(TRAIN_START_DATE)\nTRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAIN_END_DATE = str(TRAIN_END_DATE)\nTEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_START_DATE = str(TEST_START_DATE)\nTEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TEST_END_DATE = str(TEST_END_DATE)\nTRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)\ntrain(",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_START_DATE = str(TRAINFULL_START_DATE)\nTRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)\ntrain(\n    start_date=TRAIN_START_DATE,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "TRAINFULL_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "TRAINFULL_END_DATE = str(TRAINFULL_END_DATE)\nprint(\"TRAIN_START_DATE: \", TRAIN_START_DATE)\nprint(\"TRAIN_END_DATE: \", TRAIN_END_DATE)\nprint(\"TEST_START_DATE: \", TEST_START_DATE)\nprint(\"TEST_END_DATE: \", TEST_END_DATE)\nprint(\"TRAINFULL_START_DATE: \", TRAINFULL_START_DATE)\nprint(\"TRAINFULL_END_DATE: \", TRAINFULL_END_DATE)\ntrain(\n    start_date=TRAIN_START_DATE,\n    end_date=TRAIN_END_DATE,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "account_value_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "account_value_erl = test(\n    start_date=TEST_START_DATE,\n    end_date=TEST_END_DATE,\n    ticker_list=ticker_list,\n    data_source=\"alpaca\",\n    time_interval=\"1Min\",\n    technical_indicator_list=INDICATORS,\n    drl_lib=\"elegantrl\",\n    env=env,\n    model_name=\"ppo\",",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "action_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "action_dim = len(DOW_30_TICKER)\nstate_dim = (\n    1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\n)  # Calculate the DRL state dimension manually for paper trading. amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\npaper_trading_erl = PaperTradingAlpaca(\n    ticker_list=DOW_30_TICKER,\n    time_interval=\"1Min\",\n    drl_lib=\"elegantrl\",\n    agent=\"ppo\",\n    cwd=\"./papertrading_erl_retrain\",",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "state_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "state_dim = (\n    1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\n)  # Calculate the DRL state dimension manually for paper trading. amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\npaper_trading_erl = PaperTradingAlpaca(\n    ticker_list=DOW_30_TICKER,\n    time_interval=\"1Min\",\n    drl_lib=\"elegantrl\",\n    agent=\"ppo\",\n    cwd=\"./papertrading_erl_retrain\",\n    net_dim=ERL_PARAMS[\"net_dimension\"],",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "paper_trading_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "paper_trading_erl = PaperTradingAlpaca(\n    ticker_list=DOW_30_TICKER,\n    time_interval=\"1Min\",\n    drl_lib=\"elegantrl\",\n    agent=\"ppo\",\n    cwd=\"./papertrading_erl_retrain\",\n    net_dim=ERL_PARAMS[\"net_dimension\"],\n    state_dim=state_dim,\n    action_dim=action_dim,\n    API_KEY=TRADING_API_KEY,",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "returns_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "returns_erl = cumu_erl - 1\nreturns_dia = cumu_djia - 1\nreturns_dia = returns_dia[: returns_erl.shape[0]]\n# plot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which=\"minor\", axis=\"y\")\nplt.title(\"Stock Trading (Paper trading)\", fontsize=20)\nplt.plot(returns_erl, label=\"ElegantRL Agent\", color=\"red\")",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "returns_dia = cumu_djia - 1\nreturns_dia = returns_dia[: returns_erl.shape[0]]\n# plot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which=\"minor\", axis=\"y\")\nplt.title(\"Stock Trading (Paper trading)\", fontsize=20)\nplt.plot(returns_erl, label=\"ElegantRL Agent\", color=\"red\")\n# plt.plot(returns_sb3, label = 'Stable-Baselines3 Agent', color = 'blue' )",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "returns_dia = returns_dia[: returns_erl.shape[0]]\n# plot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which=\"minor\", axis=\"y\")\nplt.title(\"Stock Trading (Paper trading)\", fontsize=20)\nplt.plot(returns_erl, label=\"ElegantRL Agent\", color=\"red\")\n# plt.plot(returns_sb3, label = 'Stable-Baselines3 Agent', color = 'blue' )\n# plt.plot(returns_rllib, label = 'RLlib Agent', color = 'green')",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "description": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "peekOfCode": "ax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(\n    ticker.FixedFormatter([\"\", \"10-19\", \"\", \"10-20\", \"\", \"10-21\", \"\", \"10-22\"])\n)\nplt.legend(fontsize=10.5)\nplt.savefig(\"papertrading_stock.png\")",
        "detail": "docs.examples.PY.FinRL_PaperTrading_Demo_refactored",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "kind": 2,
        "importPath": "docs.examples.PY.Stablebaselines3 + Dow Jones",
        "description": "docs.examples.PY.Stablebaselines3 + Dow Jones",
        "peekOfCode": "def stock_trading(\n        train_start_date: str,\n        train_end_date: str,\n        trade_start_date: str,\n        trade_end_date: str,\n        if_store_actions: bool = True,\n        if_store_result: bool = True,\n        if_using_a2c: bool = True,\n        if_using_ddpg: bool = True,\n        if_using_ppo: bool = True,",
        "detail": "docs.examples.PY.Stablebaselines3 + Dow Jones",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "kind": 2,
        "importPath": "docs.examples.PY.df_account_value_a2c",
        "description": "docs.examples.PY.df_account_value_a2c",
        "peekOfCode": "def stock_trading(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,\n    if_using_ppo: bool = True,",
        "detail": "docs.examples.PY.df_account_value_a2c",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "kind": 6,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "class YahooDownloader:\n    Provides methods for retrieving daily stock data from\n    Yahoo Finance API\n    Attributes\n    ----------\n        start_date : str\n            start date of the data (modified from config.py)\n        end_date : str\n            end date of the data (modified from config.py)\n        ticker_list : list",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "os = sys.path.append(\"/content/drive/packages\")\nprint(os)\nimport itertools\n# %matplotlib inline\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTEST_START_DATE = '2021-10-01'\nTEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TRAIN_END_DATE = '2021-10-01'\nTEST_START_DATE = '2021-10-01'\nTEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TEST_START_DATE = '2021-10-01'\nTEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()\nlen(df.tic.unique())",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "TEST_END_DATE = '2023-03-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()\nlen(df.tic.unique())\ndf.tic.value_counts()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.head()\ndf.tail()\ndf.shape\ndf.sort_values(['date','tic']).head()\nlen(df.tic.unique())\ndf.tic.value_counts()\n\"\"\"# Part 4: Preprocess Data",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.\n\"\"\"",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.\n\"\"\"\nstock_dimension = len(processed.tic.unique())",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprocessed.sample(5)\n\"\"\"<a id='4'></a>\n# Part 5. Design Environment\nConsidering the stochastic and interactive nature of the automated stock trading tasks, a financial task is modeled as a **Markov Decision Process (MDP)** problem. The training process involves observing stock price change, taking an action and reward's calculation to have the agent adjusting its strategy accordingly. By interacting with the environment, the trading agent will derive a trading strategy with the maximized rewards as time proceeds.\nOur trading environments, based on OpenAI Gym framework, simulate live stock markets with real market data according to the principle of time-driven simulation.\nThe action space describes the allowed actions that the agent interacts with the environment. Normally, action a includes three actions: {-1, 0, 1}, where -1, 0, 1 represent selling, holding, and buying one share. Also, an action can be carried upon multiple shares. We use an action space {-k,…,-1, 0, 1, …, k}, where k denotes the number of shares to buy and -k denotes the number of shares to sell. For example, \"Buy 10 shares of AAPL\" or \"Sell 10 shares of AAPL\" are 10 or -10, respectively. The continuous action space needs to be normalized to [-1, 1], since the policy is defined on a Gaussian distribution, which needs to be normalized and symmetric.\n\"\"\"\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100,\n    \"initial_amount\": 1000000,\n    \"buy_cost_pct\": 0.001,\n    \"sell_cost_pct\": 0.001,\n    \"state_space\": state_space,\n    \"stock_dim\": stock_dimension,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100,\n    \"initial_amount\": 1000000,\n    \"buy_cost_pct\": 0.001,\n    \"sell_cost_pct\": 0.001,\n    \"state_space\": state_space,\n    \"stock_dim\": stock_dimension,\n    \"tech_indicator_list\": INDICATORS,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100,\n    \"initial_amount\": 1000000,\n    \"buy_cost_pct\": 0.001,\n    \"sell_cost_pct\": 0.001,\n    \"state_space\": state_space,\n    \"stock_dim\": stock_dimension,\n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension,\n    \"reward_scaling\": 1e-4,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "rebalance_window = 63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window,\n                 validation_window=validation_window,\n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "validation_window = 63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window,\n                 validation_window=validation_window,\n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window,\n                 validation_window=validation_window,\n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2048,\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2048,\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 10_000,\n                      \"learning_rate\": 0.0005,",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 10_000,\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\ntimesteps_dict = {'a2c' : 10_000,\n                 'ppo' : 10_000,\n                 'ddpg' : 10_000\n                 }",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "timesteps_dict = {'a2c' : 10_000,\n                 'ppo' : 10_000,\n                 'ddpg' : 10_000\n                 }\ndf_summary = ensemble_agent.run_ensemble_strategy(A2C_model_kwargs,\n                                                 PPO_model_kwargs,\n                                                 DDPG_model_kwargs,\n                                                 timesteps_dict)\ndf_summary\n\"\"\"<a id='6'></a>",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(A2C_model_kwargs,\n                                                 PPO_model_kwargs,\n                                                 DDPG_model_kwargs,\n                                                 timesteps_dict)\ndf_summary\n\"\"\"<a id='6'></a>\n# Part 7: Backtest Our Strategy\nBacktesting plays a key role in evaluating the performance of a trading strategy. Automated backtesting tool is preferred because it reduces the human error. We usually use the Quantopian pyfolio package to backtest our trading strategies. It is easy to use and consists of various individual plots that provide a comprehensive image of the performance of a trading strategy.\n\"\"\"\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value.append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value.append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\n# Commented out IPython magic to ensure Python compatibility.",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\ndf_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\ndf_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\ndf_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji_",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji_ = get_baseline(\n        ticker=\"^DJI\",\n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "stats = backtest_stats(df_dji_, value_col_name = 'close')\ndf_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji = pd.DataFrame()\ndf_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji['date']",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji['date'] = df_account_value['date']\ndf_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>\n## 7.2 BackTestPlot",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji['dji']",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji['dji'] = df_dji_['close'] / df_dji_['close'][0] * env_kwargs[\"initial_amount\"]\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji.csv\")\ndf_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>\n## 7.2 BackTestPlot\n\"\"\"",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_dji",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_dji = df_dji.set_index(df_dji.columns[0])\nprint(\"df_dji: \", df_dji)\ndf_dji.to_csv(\"df_dji+.csv\")\ndf_account_value.to_csv('df_account_value.csv')\n\"\"\"<a id='6.2'></a>\n## 7.2 BackTestPlot\n\"\"\"\n# Commented out IPython magic to ensure Python compatibility.\n# print(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_result_ensemble",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_result_ensemble = pd.DataFrame({'date': df_account_value['date'], 'ensemble': df_account_value['account_value']})\ndf_result_ensemble = df_result_ensemble.set_index('date')\nprint(\"df_result_ensemble.columns: \", df_result_ensemble.columns)\n# df_result_ensemble.drop(df_result_ensemble.columns[0], axis = 1)\nprint(\"df_trade_date: \", df_trade_date)\n# df_result_ensemble['date'] = df_trade_date['datadate']\n# df_result_ensemble['account_value'] = df_account_value['account_value']\ndf_result_ensemble.to_csv(\"df_result_ensemble.csv\")\nprint(\"df_result_ensemble: \", df_result_ensemble)\nprint(\"==============Compare to DJIA===========\")",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "df_result_ensemble",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "df_result_ensemble = df_result_ensemble.set_index('date')\nprint(\"df_result_ensemble.columns: \", df_result_ensemble.columns)\n# df_result_ensemble.drop(df_result_ensemble.columns[0], axis = 1)\nprint(\"df_trade_date: \", df_trade_date)\n# df_result_ensemble['date'] = df_trade_date['datadate']\n# df_result_ensemble['account_value'] = df_account_value['account_value']\ndf_result_ensemble.to_csv(\"df_result_ensemble.csv\")\nprint(\"df_result_ensemble: \", df_result_ensemble)\nprint(\"==============Compare to DJIA===========\")\nresult = pd.DataFrame()",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "result = pd.DataFrame()\n# result = pd.merge(result, df_result_ensemble, left_index=True, right_index=True)\n# result = pd.merge(result, df_dji, left_index=True, right_index=True)\nresult = pd.merge(df_result_ensemble, df_dji, left_index=True, right_index=True)\nprint(\"result: \", result)\nresult.to_csv(\"result.csv\")\nresult.columns = ['ensemble', 'dji']\n# %matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "result = pd.merge(df_result_ensemble, df_dji, left_index=True, right_index=True)\nprint(\"result: \", result)\nresult.to_csv(\"result.csv\")\nresult.columns = ['ensemble', 'dji']\n# %matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();\nresult.plot();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "result.columns",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "result.columns = ['ensemble', 'dji']\n# %matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();\nresult.plot();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"figure.figsize\"]",
        "kind": 5,
        "importPath": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "description": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "peekOfCode": "plt.rcParams[\"figure.figsize\"] = (15,5)\nplt.figure();\nresult.plot();",
        "detail": "docs.examples.PY.finrl_ensemble_stocktrading_icaif_2020",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "docs.examples.PY.flusk",
        "description": "docs.examples.PY.flusk",
        "peekOfCode": "def run_script():\n    data = request.json.get('data')\n    # Simulate running a Python script (replace this with your actual logic)\n    time.sleep(2)  # Simulating a delay\n    result = f'Processed data: {data}'  # Example response\n    return jsonify({'message': result})\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "docs.examples.PY.flusk",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "docs.examples.PY.flusk",
        "description": "docs.examples.PY.flusk",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/run-script', methods=['POST'])\ndef run_script():\n    data = request.json.get('data')\n    # Simulate running a Python script (replace this with your actual logic)\n    time.sleep(2)  # Simulating a delay\n    result = f'Processed data: {data}'  # Example response\n    return jsonify({'message': result})\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "docs.examples.PY.flusk",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "def main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    lib_path = os.path.join(script_dir, 'lib', 'alpaca_trade_api')\n    print(lib_path)\n    sys.path.append(lib_path)\n    import lib.alpaca_trade_api as tradeapi\n    now = datetime.now()\n    formatted_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(f\"Time from greet.py at {formatted_time}\")\n    api = tradeapi.rest.REST(API_KEY, API_SECRET, API_BASE_URL, api_version='v2')",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "API_KEY = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\n# Description: This is a simple python script that prints a greeting message along with the current date and time.\nfrom datetime import datetime\nimport sys\nimport os\n# import alpaca_trade_api as tradeapi\ndef main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\n# Description: This is a simple python script that prints a greeting message along with the current date and time.\nfrom datetime import datetime\nimport sys\nimport os\n# import alpaca_trade_api as tradeapi\ndef main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    lib_path = os.path.join(script_dir, 'lib', 'alpaca_trade_api')",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.greet",
        "description": "docs.examples.PY.greet",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\n# Description: This is a simple python script that prints a greeting message along with the current date and time.\nfrom datetime import datetime\nimport sys\nimport os\n# import alpaca_trade_api as tradeapi\ndef main():\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    lib_path = os.path.join(script_dir, 'lib', 'alpaca_trade_api')\n    print(lib_path)",
        "detail": "docs.examples.PY.greet",
        "documentation": {}
    },
    {
        "label": "place_order",
        "kind": 2,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "def place_order(action):\n    if action == \"buy\":\n        api.submit_order(symbol='AAPL', qty=1, side='buy', type='market', time_in_force='gtc')\n    elif action == \"sell\":\n        api.submit_order(symbol='AAPL', qty=1, side='sell', type='market', time_in_force='gtc')\n    elif action == \"hold\":\n        print(\"Hold action. No trade executed.\")\ndef calculate_action():\n    # Simplified hedge ratio logic\n    hedge_ratio = 0.5  # Placeholder logic",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "calculate_action",
        "kind": 2,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "def calculate_action():\n    # Simplified hedge ratio logic\n    hedge_ratio = 0.5  # Placeholder logic\n    if hedge_ratio > 0.6:\n        return \"buy\"\n    elif hedge_ratio < 0.4:\n        return \"sell\"\n    else:\n        return \"hold\"\naction = calculate_action()",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "api = tradeapi.REST('APCA-API-KEY-ID', 'APCA-API-SECRET-KEY', base_url='https://paper-api.alpaca.markets')\ndef place_order(action):\n    if action == \"buy\":\n        api.submit_order(symbol='AAPL', qty=1, side='buy', type='market', time_in_force='gtc')\n    elif action == \"sell\":\n        api.submit_order(symbol='AAPL', qty=1, side='sell', type='market', time_in_force='gtc')\n    elif action == \"hold\":\n        print(\"Hold action. No trade executed.\")\ndef calculate_action():\n    # Simplified hedge ratio logic",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 5,
        "importPath": "docs.examples.PY.ord",
        "description": "docs.examples.PY.ord",
        "peekOfCode": "action = calculate_action()\nplace_order(action)",
        "detail": "docs.examples.PY.ord",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "docs.examples.PY.sc",
        "description": "docs.examples.PY.sc",
        "peekOfCode": "def run_script():\n    current_time = datetime.now()\n    if current_time.hour >= 9 and current_time.hour <= 16 and current_time.weekday() < 5:\n        os.system(\"train.py\")\nschedule.every(1).minutes.do(run_script)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)",
        "detail": "docs.examples.PY.sc",
        "documentation": {}
    },
    {
        "label": "stock_trading",
        "kind": 2,
        "importPath": "docs.examples.PY.stock_trading",
        "description": "docs.examples.PY.stock_trading",
        "peekOfCode": "def stock_trading(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,\n    if_using_ppo: bool = True,",
        "detail": "docs.examples.PY.stock_trading",
        "documentation": {}
    },
    {
        "label": "stock_trading_rolling_window",
        "kind": 2,
        "importPath": "docs.examples.PY.stock_trading_rolling_window",
        "description": "docs.examples.PY.stock_trading_rolling_window",
        "peekOfCode": "def stock_trading_rolling_window(\n    train_start_date: str,\n    train_end_date: str,\n    trade_start_date: str,\n    trade_end_date: str,\n    rolling_window_length: int,\n    if_store_actions: bool = True,\n    if_store_result: bool = True,\n    if_using_a2c: bool = True,\n    if_using_ddpg: bool = True,",
        "detail": "docs.examples.PY.stock_trading_rolling_window",
        "documentation": {}
    },
    {
        "label": "ActorPPO",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class ActorPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, action_dim])\n        self.action_std_log = nn.Parameter(torch.zeros((1, action_dim)), requires_grad=True)  # trainable parameter\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state).tanh()  # action.tanh()\n    def get_action(self, state: Tensor) -> (Tensor, Tensor):  # for exploration\n        action_avg = self.net(state)\n        action_std = self.action_std_log.exp()",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "CriticPPO",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class CriticPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, _action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, 1])\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state)  # advantage value\ndef build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)\n        if env_args is None:  # dummy env_args\n            env_args = {'env_name': None, 'state_dim': None, 'action_dim': None, 'if_discrete': None}\n        self.env_name = env_args['env_name']  # the name of environment. Be used to set 'cwd'.\n        self.state_dim = env_args['state_dim']  # vector dimension (feature number) of state\n        self.action_dim = env_args['action_dim']  # vector dimension (feature number) of action\n        self.if_discrete = env_args['if_discrete']  # discrete or continuous action space",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "AgentBase",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class AgentBase:\n    def __init__(self, net_dims: [int], state_dim: int, action_dim: int, gpu_id: int = 0, args: Config = Config()):\n        self.state_dim = state_dim\n        self.action_dim = action_dim\n        self.gamma = args.gamma\n        self.batch_size = args.batch_size\n        self.repeat_times = args.repeat_times\n        self.reward_scale = args.reward_scale\n        self.soft_update_tau = args.soft_update_tau\n        self.states = None  # assert self.states == (1, state_dim)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "AgentPPO",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class AgentPPO(AgentBase):\n    def __init__(self, net_dims: [int], state_dim: int, action_dim: int, gpu_id: int = 0, args: Config = Config()):\n        self.if_off_policy = False\n        self.act_class = getattr(self, \"act_class\", ActorPPO)\n        self.cri_class = getattr(self, \"cri_class\", CriticPPO)\n        AgentBase.__init__(self, net_dims, state_dim, action_dim, gpu_id, args)\n        self.ratio_clip = getattr(args, \"ratio_clip\", 0.25)  # `ratio.clamp(1 - clip, 1 + clip)`\n        self.lambda_gae_adv = getattr(args, \"lambda_gae_adv\", 0.95)  # could be 0.80~0.99\n        self.lambda_entropy = getattr(args, \"lambda_entropy\", 0.01)  # could be 0.00~0.10\n        self.lambda_entropy = torch.tensor(self.lambda_entropy, dtype=torch.float32, device=self.device)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "PendulumEnv",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class PendulumEnv(gym.Wrapper):  # a demo of custom gym env\n    def __init__(self):\n        gym.logger.set_level(40)  # Block warning\n        gym_env_name = \"Pendulum-v0\" if gym.__version__ < '0.18.0' else \"Pendulum-v1\"\n        super().__init__(env=gym.make(gym_env_name))\n        '''the necessary env information when you design a custom env'''\n        self.env_name = gym_env_name  # the name of this env.\n        self.state_dim = self.observation_space.shape[0]  # feature number of state\n        self.action_dim = self.action_space.shape[0]  # feature number of action\n        self.if_discrete = False  # discrete action or continuous action",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "Evaluator",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class Evaluator:\n    def __init__(self, eval_env, eval_per_step: int = 1e4, eval_times: int = 8, cwd: str = '.'):\n        self.cwd = cwd\n        self.env_eval = eval_env\n        self.eval_step = 0\n        self.total_step = 0\n        self.start_time = time.time()\n        self.eval_times = eval_times  # number of times that get episodic cumulative return\n        self.eval_per_step = eval_per_step  # evaluate the agent per training steps\n        self.recorder = []",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class AlpacaPaperTrading():\n    def __init__(self,ticker_list, time_interval, drl_lib, agent, cwd, net_dim, \n                 state_dim, action_dim, API_KEY, API_SECRET, \n                 API_BASE_URL, tech_indicator_list, turbulence_thresh=30, \n                 max_stock=1e2, latency = None):\n        #load agent\n        self.drl_lib = drl_lib\n        if agent =='ppo':\n            if drl_lib == 'elegantrl':              \n                agent_class = AgentPPO",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "StockEnvEmpty",
        "kind": 6,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "class StockEnvEmpty(gym.Env):\n    #Empty Env used for loading rllib agent\n    def __init__(self,config):\n      state_dim = config['state_dim']\n      action_dim = config['action_dim']\n      self.env_num = 1\n      self.max_step = 10000\n      self.env_name = 'StockEnvEmpty'\n      self.state_dim = state_dim  \n      self.action_dim = action_dim",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "build_mlp",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])\n    del net_list[-1]  # remove the activation of output layer\n    return nn.Sequential(*net_list)\nclass Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "get_gym_env_args",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def get_gym_env_args(env, if_print: bool) -> dict:\n    if {'unwrapped', 'observation_space', 'action_space', 'spec'}.issubset(dir(env)):  # isinstance(env, gym.Env):\n        env_name = env.unwrapped.spec.id\n        state_shape = env.observation_space.shape\n        state_dim = state_shape[0] if len(state_shape) == 1 else state_shape  # sometimes state_dim is a list\n        if_discrete = isinstance(env.action_space, gym.spaces.Discrete)\n        if if_discrete:  # make sure it is discrete action space\n            action_dim = env.action_space.n\n        elif isinstance(env.action_space, gym.spaces.Box):  # make sure it is continuous action space\n            action_dim = env.action_space.shape[0]",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "kwargs_filter",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def kwargs_filter(function, kwargs: dict) -> dict:\n    import inspect\n    sign = inspect.signature(function).parameters.values()\n    sign = {val.name for val in sign}\n    common_args = sign.intersection(kwargs.keys())\n    return {key: kwargs[key] for key in common_args}  # filtered kwargs\ndef build_env(env_class=None, env_args=None):\n    if env_class.__module__ == 'gym.envs.registration':  # special rule\n        env = env_class(id=env_args['env_name'])\n    else:",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "build_env",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def build_env(env_class=None, env_args=None):\n    if env_class.__module__ == 'gym.envs.registration':  # special rule\n        env = env_class(id=env_args['env_name'])\n    else:\n        env = env_class(**kwargs_filter(env_class.__init__, env_args.copy()))\n    for attr_str in ('env_name', 'state_dim', 'action_dim', 'if_discrete'):\n        setattr(env, attr_str, env_args[attr_str])\n    return env\nclass AgentBase:\n    def __init__(self, net_dims: [int], state_dim: int, action_dim: int, gpu_id: int = 0, args: Config = Config()):",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def train_agent(args: Config):\n    args.init_before_training()\n    env = build_env(args.env_class, args.env_args)\n    agent = args.agent_class(args.net_dims, args.state_dim, args.action_dim, gpu_id=args.gpu_id, args=args)\n    new_env, _ = env.reset()\n    agent.states = new_env[np.newaxis, :]\n    evaluator = Evaluator(eval_env=build_env(args.env_class, args.env_args),\n                          eval_per_step=args.eval_per_step,\n                          eval_times=args.eval_times,\n                          cwd=args.cwd)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "render_agent",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def render_agent(env_class, env_args: dict, net_dims: [int], agent_class, actor_path: str, render_times: int = 8):\n    env = build_env(env_class, env_args)\n    state_dim = env_args['state_dim']\n    action_dim = env_args['action_dim']\n    agent = agent_class(net_dims, state_dim, action_dim, gpu_id=-1)\n    actor = agent.act\n    print(f\"| render and load actor from: {actor_path}\")\n    actor.load_state_dict(torch.load(actor_path, map_location=lambda storage, loc: storage))\n    for i in range(render_times):\n        cumulative_reward, episode_step = get_rewards_and_steps(env, actor, if_render=True)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "get_rewards_and_steps",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def get_rewards_and_steps(env, actor, if_render: bool = False) -> (float, int):  # cumulative_rewards and episode_steps\n    device = next(actor.parameters()).device  # net.parameters() is a Python generator.\n    state, _ = env.reset()\n    episode_steps = 0\n    cumulative_returns = 0.0  # sum of rewards in an episode\n    for episode_steps in range(12345):\n        tensor_state = torch.as_tensor(state, dtype=torch.float32, device=device).unsqueeze(0)\n        tensor_action = actor(tensor_state)\n        action = tensor_action.detach().cpu().numpy()[0]  # not need detach(), because using torch.no_grad() outside\n        state, reward, done, _, _ = env.step(action)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def train(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def test(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def get_trading_days(start, end):\n    nyse = tc.get_calendar('NYSE')\n    df = nyse.sessions_in_range(pd.Timestamp(start),\n                                pd.Timestamp(end))\n    trading_days = []\n    for day in df:\n        trading_days.append(str(day)[:10])\n    return trading_days\ndef alpaca_history(key, secret, url, start, end):\n    api = tradeapi.REST(key, secret, url, 'v2')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "alpaca_history",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def alpaca_history(key, secret, url, start, end):\n    api = tradeapi.REST(key, secret, url, 'v2')\n    trading_days = get_trading_days(start, end)\n    df = pd.DataFrame()\n    for day in trading_days:\n        df = pd.concat([df, api.get_portfolio_history(date_start = day,timeframe='5Min').df.iloc[:78]])\n    equities = df.equity.values\n    cumu_returns = equities/equities[0]\n    cumu_returns = cumu_returns[~np.isnan(cumu_returns)]\n    return df, cumu_returns",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "DIA_history",
        "kind": 2,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "def DIA_history(start):\n    data_df = yf.download(['^DJI'],start=start, interval=\"5m\")\n    data_df = data_df.iloc[:]\n    baseline_returns = data_df['Adj Close'].values/data_df['Adj Close'].values[0]\n    return data_df, baseline_returns\n# Get cumulative return\nAPI_KEY = \"\"\nAPI_SECRET = \"\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_KEY = \"PKA2OY3YK7Y4M6Q7LCLR\"\nAPI_SECRET = \"BxT64PIQtDBb*tnW\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.config import INDICATORS\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv\nfrom finrl.meta.env_stock_trading.env_stock_papertrading import AlpacaPaperTrading\nfrom finrl.meta.data_processor import DataProcessor\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nimport numpy as np",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_SECRET = \"BxT64PIQtDBb*tnW\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.config import INDICATORS\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv\nfrom finrl.meta.env_stock_trading.env_stock_papertrading import AlpacaPaperTrading\nfrom finrl.meta.data_processor import DataProcessor\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nimport numpy as np\nimport pandas as pd",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.config import INDICATORS\nfrom finrl.meta.env_stock_trading.env_stocktrading_np import StockTradingEnv\nfrom finrl.meta.env_stock_trading.env_stock_papertrading import AlpacaPaperTrading\nfrom finrl.meta.data_processor import DataProcessor\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nimport numpy as np\nimport pandas as pd\n# PPO",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "MODELS = {\"ppo\": AgentPPO}\nOFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "OFF_POLICY_MODELS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "OFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ON_POLICY_MODELS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ticker_list",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ticker_list = DOW_30_TICKER\naction_dim = len(DOW_30_TICKER)\nprint(ticker_list)\nprint(INDICATORS)\n# Calculate the DRL state dimension manually for paper trading\n# amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\nstate_dim = 1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\nstate_dim\n# Get the API Keys Ready\n# API_KEY = \"\"",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "action_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "action_dim = len(DOW_30_TICKER)\nprint(ticker_list)\nprint(INDICATORS)\n# Calculate the DRL state dimension manually for paper trading\n# amount + (turbulence, turbulence_bool) + (price, shares, cd (holding time)) * stock_dim + tech_dim\nstate_dim = 1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\nstate_dim\n# Get the API Keys Ready\n# API_KEY = \"\"\n# API_SECRET = \"\"",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "state_dim",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "state_dim = 1 + 2 + 3 * action_dim + len(INDICATORS) * action_dim\nstate_dim\n# Get the API Keys Ready\n# API_KEY = \"\"\n# API_SECRET = \"\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\nenv = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\nenv = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  API_KEY = API_KEY, \n#                  API_SECRET = API_SECRET, \n#                  API_BASE_URL = API_BASE_URL\n#                  )",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "data_url",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "data_url = 'wss://data.alpaca.markets'\nenv = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  API_KEY = API_KEY, \n#                  API_SECRET = API_SECRET, \n#                  API_BASE_URL = API_BASE_URL\n#                  )\n# Step 2. Get ticker list, Set start date and end date, specify the data frequency",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "env = StockTradingEnv\n# Show the data\n# Step 1. Pick a data source\n#DP = DataProcessor(data_source = 'alpaca',\n#                  API_KEY = API_KEY, \n#                  API_SECRET = API_SECRET, \n#                  API_BASE_URL = API_BASE_URL\n#                  )\n# Step 2. Get ticker list, Set start date and end date, specify the data frequency\n#data = DP.download_data(start_date = '2021-10-04', ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#DP",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#DP = DataProcessor(data_source = 'alpaca',\n#                  API_KEY = API_KEY, \n#                  API_SECRET = API_SECRET, \n#                  API_BASE_URL = API_BASE_URL\n#                  )\n# Step 2. Get ticker list, Set start date and end date, specify the data frequency\n#data = DP.download_data(start_date = '2021-10-04', \n#                        end_date = '2021-10-08',\n#                        ticker_list = ticker_list, \n#                        time_interval= '1Min')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.download_data(start_date = '2021-10-04', \n#                        end_date = '2021-10-08',\n#                        ticker_list = ticker_list, \n#                        time_interval= '1Min')\n#data['timestamp'].nunique()\n# Step 3. Data Cleaning & Feature Engineering\n#data = DP.clean_data(data)\n#data = DP.add_technical_indicator(data, INDICATORS)\n#data = DP.add_vix(data)\n#data.shape",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.clean_data(data)\n#data = DP.add_technical_indicator(data, INDICATORS)\n#data = DP.add_vix(data)\n#data.shape\n# Step 4. Transform to numpy array\n#price_array, tech_array, turbulence_array = DP.df_to_array(data, if_vix=True)\n# price_array\n# Part 2: Train the agent\n# Train\nERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.add_technical_indicator(data, INDICATORS)\n#data = DP.add_vix(data)\n#data.shape\n# Step 4. Transform to numpy array\n#price_array, tech_array, turbulence_array = DP.df_to_array(data, if_vix=True)\n# price_array\n# Part 2: Train the agent\n# Train\nERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,\n        \"seed\":312,\"net_dimension\":[128,64], \"target_step\":5000, \"eval_gap\":30,",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "#data = DP.add_vix(data)\n#data.shape\n# Step 4. Transform to numpy array\n#price_array, tech_array, turbulence_array = DP.df_to_array(data, if_vix=True)\n# price_array\n# Part 2: Train the agent\n# Train\nERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,\n        \"seed\":312,\"net_dimension\":[128,64], \"target_step\":5000, \"eval_gap\":30,\n        \"eval_times\":1} ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ERL_PARAMS = {\"learning_rate\": 3e-6,\"batch_size\": 2048,\"gamma\":  0.985,\n        \"seed\":312,\"net_dimension\":[128,64], \"target_step\":5000, \"eval_gap\":30,\n        \"eval_times\":1} \nenv = StockTradingEnv\n#if you want to use larger datasets (change to longer period), and it raises error, \n#please try to increase \"target_step\". It should be larger than the episode steps. \ntrain(start_date = '2022-08-25', \n      end_date = '2022-08-31',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "env = StockTradingEnv\n#if you want to use larger datasets (change to longer period), and it raises error, \n#please try to increase \"target_step\". It should be larger than the episode steps. \ntrain(start_date = '2022-08-25', \n      end_date = '2022-08-31',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',\n      time_interval= '1Min', \n      technical_indicator_list= INDICATORS,\n      drl_lib='elegantrl', ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train(start_date",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "train(start_date = '2022-08-25', \n      end_date = '2022-08-31',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',\n      time_interval= '1Min', \n      technical_indicator_list= INDICATORS,\n      drl_lib='elegantrl', \n      env=env,\n      model_name='ppo',\n      if_vix=True, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "account_value_erl=test(start_date",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "account_value_erl=test(start_date = '2022-09-01', \n                      end_date = '2022-09-02',\n                      ticker_list = ticker_list, \n                      data_source = 'alpaca',\n                      time_interval= '1Min', \n                      technical_indicator_list= INDICATORS,\n                      drl_lib='elegantrl', \n                      env=env, \n                      model_name='ppo',\n                      if_vix=True, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "train(start_date",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "train(start_date = '2022-08-25', \n      end_date = '2022-09-02',\n      ticker_list = ticker_list, \n      data_source = 'alpaca',\n      time_interval= '1Min', \n      technical_indicator_list= INDICATORS,\n      drl_lib='elegantrl', \n      env=env, \n      model_name='ppo',\n      if_vix=True, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "paper_trading_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "paper_trading_erl = AlpacaPaperTrading(ticker_list = DOW_30_TICKER, \n                                       time_interval = '1Min', \n                                       drl_lib = 'elegantrl', \n                                       agent = 'ppo', \n                                       cwd = './papertrading_erl_retrain', \n                                       net_dim = ERL_PARAMS['net_dimension'], \n                                       state_dim = state_dim, \n                                       action_dim= action_dim, \n                                       API_KEY = API_KEY, \n                                       API_SECRET = API_SECRET, ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_KEY = \"\"\nAPI_SECRET = \"\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=API_KEY, \n                                  secret=API_SECRET, \n                                  url=API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_SECRET = \"\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=API_KEY, \n                                  secret=API_SECRET, \n                                  url=API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')\ndf_erl.tail()",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\ndata_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=API_KEY, \n                                  secret=API_SECRET, \n                                  url=API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')\ndf_erl.tail()\nreturns_erl = cumu_erl -1 ",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "data_url",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "data_url = 'wss://data.alpaca.markets'\ndf_erl, cumu_erl = alpaca_history(key=API_KEY, \n                                  secret=API_SECRET, \n                                  url=API_BASE_URL, \n                                  start='2022-09-01', #must be within 1 month\n                                  end='2022-09-12') #change the date if error occurs\ndf_djia, cumu_djia = DIA_history(start='2022-09-01')\ndf_erl.tail()\nreturns_erl = cumu_erl -1 \nreturns_dia = cumu_djia - 1",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "returns_erl",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "returns_erl = cumu_erl -1 \nreturns_dia = cumu_djia - 1\nreturns_dia = returns_dia[:returns_erl.shape[0]]\nprint('len of erl return: ', returns_erl.shape[0])\nprint('len of dia return: ', returns_dia.shape[0])\nreturns_erl\nplot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "returns_dia = cumu_djia - 1\nreturns_dia = returns_dia[:returns_erl.shape[0]]\nprint('len of erl return: ', returns_erl.shape[0])\nprint('len of dia return: ', returns_dia.shape[0])\nreturns_erl\nplot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which='minor', axis='y')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "returns_dia",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "returns_dia = returns_dia[:returns_erl.shape[0]]\nprint('len of erl return: ', returns_erl.shape[0])\nprint('len of dia return: ', returns_dia.shape[0])\nreturns_erl\nplot and save\nimport matplotlib.pyplot as plt\nplt.figure(dpi=1000)\nplt.grid()\nplt.grid(which='minor', axis='y')\nplt.title('Stock Trading (Paper trading)', fontsize=20)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "plt.xticks(size",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "plt.xticks(size = 14)\nplt.yticks(size = 14)\nax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(ticker.FixedFormatter(['','10-19','','10-20',\n                                                    '','10-21','','10-22']))\nplt.legend(fontsize=10.5)",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "plt.yticks(size",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "plt.yticks(size = 14)\nax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(ticker.FixedFormatter(['','10-19','','10-20',\n                                                    '','10-21','','10-22']))\nplt.legend(fontsize=10.5)\nplt.savefig('papertrading_stock.png')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "docs.examples.PY.submit_order",
        "description": "docs.examples.PY.submit_order",
        "peekOfCode": "ax = plt.gca()\nax.xaxis.set_major_locator(ticker.MultipleLocator(78))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(6))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.005))\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=2))\nax.xaxis.set_major_formatter(ticker.FixedFormatter(['','10-19','','10-20',\n                                                    '','10-21','','10-22']))\nplt.legend(fontsize=10.5)\nplt.savefig('papertrading_stock.png')",
        "detail": "docs.examples.PY.submit_order",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "docs.examples.PY.t6",
        "description": "docs.examples.PY.t6",
        "peekOfCode": "def main():\n  API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\n  API_SECRET = \"BxT64PIQtDBb*tnW\"\n  API_BASE_URL = 'https://paper-api.alpaca.markets'\n  import warnings\n  warnings.filterwarnings(\"ignore\")\n  import os\n  import time\n  import gym\n  import torch",
        "detail": "docs.examples.PY.t6",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint\nimport sys\nsys.path.append(\"../FinRL-Library\")",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nINDICATORS = ['macd',",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,\n    'td3' : 1\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],\n              baseline_end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.t7",
        "description": "docs.examples.PY.t7",
        "peekOfCode": "api = tradeapi.REST(API_KEY, API_SECRET, API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,\n            qty=qty,",
        "detail": "docs.examples.PY.t7",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "API_KEY = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint\nimport sys",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint\nimport sys\nsys.path.append(\"../FinRL-Library\")",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nINDICATORS = ['macd',",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,\n    'td3' : 1\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],\n              baseline_end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.trade_bot",
        "description": "docs.examples.PY.trade_bot",
        "peekOfCode": "api = tradeapi.REST(API_KEY, API_SECRET, API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,\n            qty=qty,",
        "detail": "docs.examples.PY.trade_bot",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "data = download_data('AAPL')\nmodel = train(data, 'ppo')\n# Save output text\noutput_text = \"Training completed with PPO agent.\"\nwith open('public/results/output.txt', 'w') as f:\n    f.write(output_text)\n# Save a plot\nplt.plot(data['price'])\nplt.savefig('public/results/plot.png')\n# Alpaca API for trading",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "model = train(data, 'ppo')\n# Save output text\noutput_text = \"Training completed with PPO agent.\"\nwith open('public/results/output.txt', 'w') as f:\n    f.write(output_text)\n# Save a plot\nplt.plot(data['price'])\nplt.savefig('public/results/plot.png')\n# Alpaca API for trading\napi = tradeapi.REST('<API_KEY>', '<SECRET_KEY>', base_url='https://paper-api.alpaca.markets')",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "output_text",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "output_text = \"Training completed with PPO agent.\"\nwith open('public/results/output.txt', 'w') as f:\n    f.write(output_text)\n# Save a plot\nplt.plot(data['price'])\nplt.savefig('public/results/plot.png')\n# Alpaca API for trading\napi = tradeapi.REST('<API_KEY>', '<SECRET_KEY>', base_url='https://paper-api.alpaca.markets')\naction = 'buy'  # Example action based on model\nsymbol = 'AAPL'",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "api = tradeapi.REST('<API_KEY>', '<SECRET_KEY>', base_url='https://paper-api.alpaca.markets')\naction = 'buy'  # Example action based on model\nsymbol = 'AAPL'\nqty = 1\nif action == 'buy':\n    api.submit_order(symbol=symbol, qty=qty, side='buy', type='market', time_in_force='gtc')",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "action = 'buy'  # Example action based on model\nsymbol = 'AAPL'\nqty = 1\nif action == 'buy':\n    api.submit_order(symbol=symbol, qty=qty, side='buy', type='market', time_in_force='gtc')",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "symbol",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "symbol = 'AAPL'\nqty = 1\nif action == 'buy':\n    api.submit_order(symbol=symbol, qty=qty, side='buy', type='market', time_in_force='gtc')",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "qty",
        "kind": 5,
        "importPath": "docs.examples.PY.train2",
        "description": "docs.examples.PY.train2",
        "peekOfCode": "qty = 1\nif action == 'buy':\n    api.submit_order(symbol=symbol, qty=qty, side='buy', type='market', time_in_force='gtc')",
        "detail": "docs.examples.PY.train2",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "docs.examples.cron_job.app",
        "description": "docs.examples.cron_job.app",
        "peekOfCode": "class Config:\n    SCHEDULER_API_ENABLED = True\napp = Flask(__name__)\napp.config.from_object(Config())\nscheduler = APScheduler()\ndef scheduled_task():\n    run_drl_task()\n    print(\"++++++++++run+++++++++\")\n@app.route('/')\ndef index():",
        "detail": "docs.examples.cron_job.app",
        "documentation": {}
    },
    {
        "label": "scheduled_task",
        "kind": 2,
        "importPath": "docs.examples.cron_job.app",
        "description": "docs.examples.cron_job.app",
        "peekOfCode": "def scheduled_task():\n    run_drl_task()\n    print(\"++++++++++run+++++++++\")\n@app.route('/')\ndef index():\n    return 'DRL Task Scheduler is running.'\nif __name__ == '__main__':\n    # scheduler.init_app(app)\n    # Schedule the task to run every 10 seconds\n    scheduler.add_job(id='Scheduled Task', func=scheduled_task, trigger='interval', seconds=10)",
        "detail": "docs.examples.cron_job.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "docs.examples.cron_job.app",
        "description": "docs.examples.cron_job.app",
        "peekOfCode": "def index():\n    return 'DRL Task Scheduler is running.'\nif __name__ == '__main__':\n    # scheduler.init_app(app)\n    # Schedule the task to run every 10 seconds\n    scheduler.add_job(id='Scheduled Task', func=scheduled_task, trigger='interval', seconds=10)\n    scheduler.start()\n    app.run(debug=True)",
        "detail": "docs.examples.cron_job.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "docs.examples.cron_job.app",
        "description": "docs.examples.cron_job.app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(Config())\nscheduler = APScheduler()\ndef scheduled_task():\n    run_drl_task()\n    print(\"++++++++++run+++++++++\")\n@app.route('/')\ndef index():\n    return 'DRL Task Scheduler is running.'\nif __name__ == '__main__':",
        "detail": "docs.examples.cron_job.app",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "docs.examples.cron_job.app",
        "description": "docs.examples.cron_job.app",
        "peekOfCode": "scheduler = APScheduler()\ndef scheduled_task():\n    run_drl_task()\n    print(\"++++++++++run+++++++++\")\n@app.route('/')\ndef index():\n    return 'DRL Task Scheduler is running.'\nif __name__ == '__main__':\n    # scheduler.init_app(app)\n    # Schedule the task to run every 10 seconds",
        "detail": "docs.examples.cron_job.app",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "docs.examples.cron_job.setup",
        "description": "docs.examples.cron_job.setup",
        "peekOfCode": "API_KEY = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.examples.cron_job.setup",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "docs.examples.cron_job.setup",
        "description": "docs.examples.cron_job.setup",
        "peekOfCode": "API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.examples.cron_job.setup",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.examples.cron_job.setup",
        "description": "docs.examples.cron_job.setup",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.examples.cron_job.setup",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "project = \"FinRL\"\ncopyright = \"2021, FinRL\"\nauthor = \"FinRL\"\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "copyright = \"2021, FinRL\"\nauthor = \"FinRL\"\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "author = \"FinRL\"\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "version = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "release = \"0.3.1\"\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "extensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.doctest\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.githubpages\",\n    \"sphinx.ext.autosectionlabel\",\n    \"recommonmark\",  # for including markdown\n    #     'sphinx_markdown_tables'  # Support rendering tables in markdown\n]\nautodoc_mock_imports = [",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_mock_imports",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_mock_imports = [\n    \"gym\",\n    \"matplotlib\",\n    \"numpy\",\n    \"pybullet\",\n    \"torch\",\n    \"opencv-python\",\n]\npygments_style = \"sphinx\"\n# Add any paths that contain templates here, relative to this directory.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "pygments_style = \"sphinx\"\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = \".rst\"\n# The master toctree document.\nmaster_doc = \"index\"",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "templates_path = [\"_templates\"]\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = \".rst\"\n# The master toctree document.\nmaster_doc = \"index\"\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "source_suffix = \".rst\"\n# The master toctree document.\nmaster_doc = \"index\"\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "master_doc = \"index\"\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "language = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "exclude_patterns = []\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "pygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme = \"sphinx_rtd_theme\"\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_logo",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_logo = \"./image/logo_transparent_background.png\"\nhtml_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme_options = {\n    \"logo_only\": True,\n    \"display_version\": False,\n}\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n# Add any paths that contain custom static files (such as style sheets) here,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_static_path = [\"_static\"]\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don't match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',\n# 'searchbox.html']``.\n#\n# html_sidebars = {}",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "htmlhelp_basename = \"FinRLdoc\"\n# -- Options for LaTeX output ------------------------------------------------\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "latex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "latex_documents = [\n    (master_doc, \"FinRL.tex\", \"FinRL Documentation\", \"FinRL\", \"manual\"),\n]\n# -- Options for manual page output ------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [(master_doc, \"finrl\", \"FinRL Documentation\", [author], 1)]\n# -- Options for Texinfo output ----------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "man_pages = [(master_doc, \"finrl\", \"FinRL Documentation\", [author], 1)]\n# -- Options for Texinfo output ----------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (\n        master_doc,\n        \"FinRL\",\n        \"FinRL Documentation\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "texinfo_documents = [\n    (\n        master_doc,\n        \"FinRL\",\n        \"FinRL Documentation\",\n        author,\n        \"FinRL\",\n        \"One line description of project.\",\n        \"Miscellaneous\",\n    ),",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_title",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "epub_title = project\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = ''\n# A unique identification for the text.\n#\n# epub_uid = ''\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = [\"search.html\"]",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_exclude_files",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "epub_exclude_files = [\"search.html\"]\n# -- Extension configuration -------------------------------------------------",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "docs.JojoHell",
        "description": "docs.JojoHell",
        "peekOfCode": "def run():\n    st.set_page_config(\n        page_title=\"Hello\",\n        page_icon=\"👋\",\n    )\n    st.write(\"# Jojo Welcome to Streamlit! 👋\")\n    st.sidebar.success(\"Select a demo above.\")\n    st.markdown(\n        \"\"\"\n        Streamlit is an open-source app framework built specifically for",
        "detail": "docs.JojoHell",
        "documentation": {}
    },
    {
        "label": "LOGGER",
        "kind": 5,
        "importPath": "docs.JojoHell",
        "description": "docs.JojoHell",
        "peekOfCode": "LOGGER = get_logger(__name__)\ndef run():\n    st.set_page_config(\n        page_title=\"Hello\",\n        page_icon=\"👋\",\n    )\n    st.write(\"# Jojo Welcome to Streamlit! 👋\")\n    st.sidebar.success(\"Select a demo above.\")\n    st.markdown(\n        \"\"\"",
        "detail": "docs.JojoHell",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "docs.utils",
        "description": "docs.utils",
        "peekOfCode": "API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\nAPI_SECRET = \"BxT64PIQtDBb*tnW\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.utils",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "docs.utils",
        "description": "docs.utils",
        "peekOfCode": "API_SECRET = \"BxT64PIQtDBb*tnW\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.utils",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "docs.utils",
        "description": "docs.utils",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'",
        "detail": "docs.utils",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "MODELS = {\n    \"ddpg\": AgentDDPG,\n    \"td3\": AgentTD3,\n    \"sac\": AgentSAC,\n    \"ppo\": AgentPPO,\n    \"a2c\": AgentA2C,\n}\nOFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "OFF_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "OFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "ON_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.elegantrl.models",
        "description": "lib.rl.agents.elegantrl.models",
        "peekOfCode": "ON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes",
        "detail": "lib.rl.agents.elegantrl.models",
        "documentation": {}
    },
    {
        "label": "PolicyGradient",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.algorithms",
        "description": "lib.rl.agents.portfolio_optimization.algorithms",
        "peekOfCode": "class PolicyGradient:\n    \"\"\"Class implementing policy gradient algorithm to train portfolio\n    optimization agents.\n    Note:\n        During testing, the agent is optimized through online learning.\n        The parameters of the policy is updated repeatedly after a constant\n        period of time. To disable it, set learning rate to 0.\n    Attributes:\n        train_env: Environment used to train the agent\n        train_policy: Policy used in training.",
        "detail": "lib.rl.agents.portfolio_optimization.algorithms",
        "documentation": {}
    },
    {
        "label": "EIIE",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.architectures",
        "description": "lib.rl.agents.portfolio_optimization.architectures",
        "peekOfCode": "class EIIE(nn.Module):\n    def __init__(\n        self,\n        initial_features=3,\n        k_size=3,\n        conv_mid_features=2,\n        conv_final_features=20,\n        time_window=50,\n        device=\"cpu\",\n    ):",
        "detail": "lib.rl.agents.portfolio_optimization.architectures",
        "documentation": {}
    },
    {
        "label": "EI3",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.architectures",
        "description": "lib.rl.agents.portfolio_optimization.architectures",
        "peekOfCode": "class EI3(nn.Module):\n    def __init__(\n        self,\n        initial_features=3,\n        k_short=3,\n        k_medium=21,\n        conv_mid_features=3,\n        conv_final_features=20,\n        time_window=50,\n        device=\"cpu\",",
        "detail": "lib.rl.agents.portfolio_optimization.architectures",
        "documentation": {}
    },
    {
        "label": "GPM",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.architectures",
        "description": "lib.rl.agents.portfolio_optimization.architectures",
        "peekOfCode": "class GPM(nn.Module):\n    def __init__(\n        self,\n        edge_index,\n        edge_type,\n        nodes_to_select,\n        initial_features=3,\n        k_short=3,\n        k_medium=21,\n        conv_mid_features=3,",
        "detail": "lib.rl.agents.portfolio_optimization.architectures",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.models",
        "description": "lib.rl.agents.portfolio_optimization.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementation for DRL algorithms for portfolio optimization.\n    Note:\n        During testing, the agent is optimized through online learning.\n        The parameters of the policy is updated repeatedly after a constant\n        period of time. To disable it, set learning rate to 0.\n    Attributes:\n        env: Gym environment class.\n    \"\"\"\n    def __init__(self, env):",
        "detail": "lib.rl.agents.portfolio_optimization.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.portfolio_optimization.models",
        "description": "lib.rl.agents.portfolio_optimization.models",
        "peekOfCode": "MODELS = {\"pg\": PolicyGradient}\nclass DRLAgent:\n    \"\"\"Implementation for DRL algorithms for portfolio optimization.\n    Note:\n        During testing, the agent is optimized through online learning.\n        The parameters of the policy is updated repeatedly after a constant\n        period of time. To disable it, set learning rate to 0.\n    Attributes:\n        env: Gym environment class.\n    \"\"\"",
        "detail": "lib.rl.agents.portfolio_optimization.models",
        "documentation": {}
    },
    {
        "label": "PVM",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "class PVM:\n    def __init__(self, capacity, portfolio_size):\n        \"\"\"Initializes portfolio vector memory.\n        Args:\n          capacity: Max capacity of memory.\n          portfolio_size: Portfolio size.\n        \"\"\"\n        # initially, memory will have the same actions\n        self.capacity = capacity\n        self.portfolio_size = portfolio_size",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "ReplayBuffer",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "class ReplayBuffer:\n    def __init__(self, capacity):\n        \"\"\"Initializes replay buffer.\n        Args:\n          capacity: Max capacity of buffer.\n        \"\"\"\n        self.buffer = deque(maxlen=capacity)\n    def __len__(self):\n        \"\"\"Represents the size of the buffer\n        Returns:",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "RLDataset",
        "kind": 6,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "class RLDataset(IterableDataset):\n    def __init__(self, buffer):\n        \"\"\"Initializes reinforcement learning dataset.\n        Args:\n            buffer: replay buffer to become iterable dataset.\n        Note:\n            It's a subclass of pytorch's IterableDataset,\n            check https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset\n        \"\"\"\n        self.buffer = buffer",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "apply_portfolio_noise",
        "kind": 2,
        "importPath": "lib.rl.agents.portfolio_optimization.utils",
        "description": "lib.rl.agents.portfolio_optimization.utils",
        "peekOfCode": "def apply_portfolio_noise(portfolio, epsilon=0.0):\n    \"\"\"Apply noise to portfolio distribution considering its constrains.\n    Arg:\n        portfolio: initial portfolio distribution.\n        epsilon: maximum rebalancing.\n    Returns:\n        New portolio distribution with noise applied.\n    \"\"\"\n    portfolio_size = portfolio.shape[0]\n    new_portfolio = portfolio.copy()",
        "detail": "lib.rl.agents.portfolio_optimization.utils",
        "documentation": {}
    },
    {
        "label": "DRLlibv2",
        "kind": 6,
        "importPath": "lib.rl.agents.rllib.drllibv2",
        "description": "lib.rl.agents.rllib.drllibv2",
        "peekOfCode": "class DRLlibv2:\n    \"\"\"\n    It instantiates RLlib model with Ray tune functionality\n    Params\n    -------------------------------------\n    trainable:\n        Any Trainable class that takes config as parameter\n    train_env:\n        Training environment instance\n    train_env_name: str",
        "detail": "lib.rl.agents.rllib.drllibv2",
        "documentation": {}
    },
    {
        "label": "psutil_memory_in_bytes",
        "kind": 5,
        "importPath": "lib.rl.agents.rllib.drllibv2",
        "description": "lib.rl.agents.rllib.drllibv2",
        "peekOfCode": "psutil_memory_in_bytes = psutil.virtual_memory().total\nray._private.utils.get_system_memory = lambda: psutil_memory_in_bytes\nfrom typing import Dict, Optional, Any, List, Union\nclass DRLlibv2:\n    \"\"\"\n    It instantiates RLlib model with Ray tune functionality\n    Params\n    -------------------------------------\n    trainable:\n        Any Trainable class that takes config as parameter",
        "detail": "lib.rl.agents.rllib.drllibv2",
        "documentation": {}
    },
    {
        "label": "ray._private.utils.get_system_memory",
        "kind": 5,
        "importPath": "lib.rl.agents.rllib.drllibv2",
        "description": "lib.rl.agents.rllib.drllibv2",
        "peekOfCode": "ray._private.utils.get_system_memory = lambda: psutil_memory_in_bytes\nfrom typing import Dict, Optional, Any, List, Union\nclass DRLlibv2:\n    \"\"\"\n    It instantiates RLlib model with Ray tune functionality\n    Params\n    -------------------------------------\n    trainable:\n        Any Trainable class that takes config as parameter\n    train_env:",
        "detail": "lib.rl.agents.rllib.drllibv2",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.rllib.models",
        "description": "lib.rl.agents.rllib.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations for DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n        price_array: numpy array\n            OHLC data\n        tech_array: numpy array\n            techical data",
        "detail": "lib.rl.agents.rllib.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.rllib.models",
        "description": "lib.rl.agents.rllib.models",
        "peekOfCode": "MODELS = {\"a2c\": a2c, \"ddpg\": ddpg, \"td3\": td3, \"sac\": sac, \"ppo\": ppo}\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\nclass DRLAgent:\n    \"\"\"Implementations for DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n        price_array: numpy array\n            OHLC data",
        "detail": "lib.rl.agents.rllib.models",
        "documentation": {}
    },
    {
        "label": "sample_ppo_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_ppo_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for PPO hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    batch_size = trial.suggest_categorical(\"batch_size\", [8, 16, 32, 64, 128, 256, 512])\n    n_steps = trial.suggest_categorical(\n        \"n_steps\", [8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n    )",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_trpo_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_trpo_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for TRPO hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    batch_size = trial.suggest_categorical(\"batch_size\", [8, 16, 32, 64, 128, 256, 512])\n    n_steps = trial.suggest_categorical(\n        \"n_steps\", [8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n    )",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_a2c_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_a2c_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for A2C hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    normalize_advantage = trial.suggest_categorical(",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_sac_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_sac_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for SAC hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_td3_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_td3_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for TD3 hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_ddpg_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_ddpg_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for DDPG hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_dqn_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_dqn_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for DQN hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    gamma = trial.suggest_categorical(\n        \"gamma\", [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999]\n    )\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_her_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_her_params(\n    trial: optuna.Trial, hyperparams: dict[str, Any]\n) -> dict[str, Any]:\n    \"\"\"\n    Sampler for HerReplayBuffer hyperparams.\n    :param trial:\n    :parma hyperparams:\n    :return:\n    \"\"\"\n    her_kwargs = trial.her_kwargs.copy()",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_tqc_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_tqc_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for TQC hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    # TQC is SAC + Distributional RL\n    hyperparams = sample_sac_params(trial)\n    n_quantiles = trial.suggest_int(\"n_quantiles\", 5, 50)\n    top_quantiles_to_drop_per_net = trial.suggest_int(",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_qrdqn_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_qrdqn_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for QR-DQN hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    # TQC is DQN + Distributional RL\n    hyperparams = sample_dqn_params(trial)\n    n_quantiles = trial.suggest_int(\"n_quantiles\", 5, 200)\n    hyperparams[\"policy_kwargs\"].update({\"n_quantiles\": n_quantiles})",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "sample_ars_params",
        "kind": 2,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "def sample_ars_params(trial: optuna.Trial) -> dict[str, Any]:\n    \"\"\"\n    Sampler for ARS hyperparams.\n    :param trial:\n    :return:\n    \"\"\"\n    # n_eval_episodes = trial.suggest_categorical(\"n_eval_episodes\", [1, 2])\n    n_delta = trial.suggest_categorical(\"n_delta\", [4, 8, 6, 32, 64])\n    # learning_rate = trial.suggest_categorical(\"learning_rate\", [0.01, 0.02, 0.025, 0.03])\n    learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "HYPERPARAMS_SAMPLER",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "description": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "peekOfCode": "HYPERPARAMS_SAMPLER = {\n    \"a2c\": sample_a2c_params,\n    \"ars\": sample_ars_params,\n    \"ddpg\": sample_ddpg_params,\n    \"dqn\": sample_dqn_params,\n    \"qrdqn\": sample_qrdqn_params,\n    \"sac\": sample_sac_params,\n    \"tqc\": sample_tqc_params,\n    \"ppo\": sample_ppo_params,\n    \"td3\": sample_td3_params,",
        "detail": "lib.rl.agents.stablebaselines3.hyperparams_opt",
        "documentation": {}
    },
    {
        "label": "TensorboardCallback",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "class TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"\n    def __init__(self, verbose=0):\n        super().__init__(verbose)\n    def _on_step(self) -> bool:\n        try:\n            self.logger.record(key=\"train/reward\", value=self.locals[\"rewards\"][0])\n        except BaseException as error:",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Provides implementations for DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "DRLEnsembleAgent",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "class DRLEnsembleAgent:\n    @staticmethod\n    def get_model(\n        model_name,\n        env,\n        policy=\"MlpPolicy\",\n        policy_kwargs=None,\n        model_kwargs=None,\n        seed=None,\n        verbose=1,",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "MODELS = {\"a2c\": A2C, \"ddpg\": DDPG, \"td3\": TD3, \"sac\": SAC, \"ppo\": PPO}\nMODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\nNOISE = {\n    \"normal\": NormalActionNoise,\n    \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n}\nclass TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "MODEL_KWARGS",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\nNOISE = {\n    \"normal\": NormalActionNoise,\n    \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n}\nclass TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"\n    def __init__(self, verbose=0):",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "NOISE",
        "kind": 5,
        "importPath": "lib.rl.agents.stablebaselines3.models",
        "description": "lib.rl.agents.stablebaselines3.models",
        "peekOfCode": "NOISE = {\n    \"normal\": NormalActionNoise,\n    \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n}\nclass TensorboardCallback(BaseCallback):\n    \"\"\"\n    Custom callback for plotting additional values in tensorboard.\n    \"\"\"\n    def __init__(self, verbose=0):\n        super().__init__(verbose)",
        "detail": "lib.rl.agents.stablebaselines3.models",
        "documentation": {}
    },
    {
        "label": "LoggingCallback",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.tune_sb3",
        "description": "lib.rl.agents.stablebaselines3.tune_sb3",
        "peekOfCode": "class LoggingCallback:\n    def __init__(self, threshold: int, trial_number: int, patience: int):\n        \"\"\"\n        threshold:int tolerance for increase in sharpe ratio\n        trial_number: int Prune after minimum number of trials\n        patience: int patience for the threshold\n        \"\"\"\n        self.threshold = threshold\n        self.trial_number = trial_number\n        self.patience = patience",
        "detail": "lib.rl.agents.stablebaselines3.tune_sb3",
        "documentation": {}
    },
    {
        "label": "TuneSB3Optuna",
        "kind": 6,
        "importPath": "lib.rl.agents.stablebaselines3.tune_sb3",
        "description": "lib.rl.agents.stablebaselines3.tune_sb3",
        "peekOfCode": "class TuneSB3Optuna:\n    \"\"\"\n    Hyperparameter tuning of SB3 agents using Optuna\n    Attributes\n    ----------\n      env_train: Training environment for SB3\n      model_name: str\n      env_trade: testing environment\n      logging_callback: callback for tuning\n      total_timesteps: int",
        "detail": "lib.rl.agents.stablebaselines3.tune_sb3",
        "documentation": {}
    },
    {
        "label": "calc_stockname_from_filename",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_stockname_from_filename(filename):\n    return filename.split(\"/\")[-1].split(\".csv\")[0]\ndef calc_all_filenames(path):\n    dir_list = os.listdir(path)\n    dir_list.sort()\n    paths2 = []\n    for dir in dir_list:\n        filename = os.path.join(os.path.abspath(path), dir)\n        if \".csv\" in filename and \"#\" not in filename and \"~\" not in filename:\n            paths2.append(filename)",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_all_filenames",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_all_filenames(path):\n    dir_list = os.listdir(path)\n    dir_list.sort()\n    paths2 = []\n    for dir in dir_list:\n        filename = os.path.join(os.path.abspath(path), dir)\n        if \".csv\" in filename and \"#\" not in filename and \"~\" not in filename:\n            paths2.append(filename)\n    return paths2\ndef calc_stocknames(path):",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_stocknames",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_stocknames(path):\n    filenames = calc_all_filenames(path)\n    res = []\n    for filename in filenames:\n        stockname = calc_stockname_from_filename(filename)\n        res.append(stockname)\n    return res\ndef remove_all_files(remove, path_of_data):\n    assert remove in [0, 1]\n    if remove == 1:",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "remove_all_files",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def remove_all_files(remove, path_of_data):\n    assert remove in [0, 1]\n    if remove == 1:\n        os.system(\"rm -f \" + path_of_data + \"/*\")\n    dir_list = os.listdir(path_of_data)\n    for file in dir_list:\n        if \"~\" in file:\n            os.system(\"rm -f \" + path_of_data + \"/\" + file)\n    dir_list = os.listdir(path_of_data)\n    if remove == 1:",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "date2str",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def date2str(dat: datetime.date) -> str:\n    return datetime.date.strftime(dat, \"%Y-%m-%d\")\ndef str2date(dat: str) -> datetime.date:\n    return datetime.datetime.strptime(dat, \"%Y-%m-%d\").date()\n# include start_date, inclue end_date. step: delta\ndef calc_dates(\n    start_date: datetime.date, end_date: datetime.date, delta: datetime.timedelta\n) -> list[str]:\n    dates = []\n    dat = copy.deepcopy(start_date)",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "str2date",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def str2date(dat: str) -> datetime.date:\n    return datetime.datetime.strptime(dat, \"%Y-%m-%d\").date()\n# include start_date, inclue end_date. step: delta\ndef calc_dates(\n    start_date: datetime.date, end_date: datetime.date, delta: datetime.timedelta\n) -> list[str]:\n    dates = []\n    dat = copy.deepcopy(start_date)\n    while dat <= end_date:\n        d = date2str(dat)",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_dates",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_dates(\n    start_date: datetime.date, end_date: datetime.date, delta: datetime.timedelta\n) -> list[str]:\n    dates = []\n    dat = copy.deepcopy(start_date)\n    while dat <= end_date:\n        d = date2str(dat)\n        dates.append(d)\n        dat += delta\n    return dates",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_starts_ends_if_rolling",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_train_trade_starts_ends_if_rolling(\n    init_train_dates: list[str], init_trade_dates: list[str], rolling_window_length: int\n) -> tuple[list[str], list[str], list[str], list[str]]:\n    trade_dates_length = len(init_trade_dates)\n    train_window_length = len(init_train_dates)\n    trade_window_length = min(rolling_window_length, trade_dates_length)\n    num_subsets_if_rolling = int(np.ceil(trade_dates_length / trade_window_length))\n    print(\"num_subsets_if_rolling: \", num_subsets_if_rolling)\n    dates = np.concatenate((init_train_dates, init_trade_dates), axis=0)\n    train_starts = []",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "calc_train_trade_data",
        "kind": 2,
        "importPath": "lib.rl.meta.data_processors.func",
        "description": "lib.rl.meta.data_processors.func",
        "peekOfCode": "def calc_train_trade_data(\n    i: int,\n    train_starts: list[str],\n    train_ends: list[str],\n    trade_starts: list[str],\n    trade_ends: list[str],\n    init_train_data: pd.DataFrame(),\n    init_trade_data: pd.DataFrame(),\n    date_col: str,\n) -> tuple[pd.DataFrame(), pd.DataFrame()]:",
        "detail": "lib.rl.meta.data_processors.func",
        "documentation": {}
    },
    {
        "label": "AlpacaProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_alpaca",
        "description": "lib.rl.meta.data_processors.processor_alpaca",
        "peekOfCode": "class AlpacaProcessor:\n    def __init__(self, API_KEY=None, API_SECRET=None, API_BASE_URL=None, api=None):\n        if api is None:\n            try:\n                self.api = tradeapi.REST(API_KEY, API_SECRET, API_BASE_URL, \"v2\")\n            except BaseException:\n                raise ValueError(\"Wrong Account Info!\")\n        else:\n            self.api = api\n    def _fetch_data_for_ticker(self, ticker, start_date, end_date, time_interval):",
        "detail": "lib.rl.meta.data_processors.processor_alpaca",
        "documentation": {}
    },
    {
        "label": "CCXTEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_ccxt",
        "description": "lib.rl.meta.data_processors.processor_ccxt",
        "peekOfCode": "class CCXTEngineer:\n    def __init__(self):\n        self.binance = ccxt.binance()\n    def data_fetch(self, start, end, pair_list=[\"BTC/USDT\"], period=\"1m\"):\n        def min_ohlcv(dt, pair, limit):\n            since = calendar.timegm(dt.utctimetuple()) * 1000\n            ohlcv = self.binance.fetch_ohlcv(\n                symbol=pair, timeframe=\"1m\", since=since, limit=limit\n            )\n            return ohlcv",
        "detail": "lib.rl.meta.data_processors.processor_ccxt",
        "documentation": {}
    },
    {
        "label": "JoinQuantEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_joinquant",
        "description": "lib.rl.meta.data_processors.processor_joinquant",
        "peekOfCode": "class JoinQuantEngineer:\n    def __init__(self):\n        pass\n    def auth(self, username, password):\n        jq.auth(username, password)\n    def data_fetch(self, stock_list, num, unit, end_dt):\n        df = jq.get_bars(\n            security=stock_list,\n            count=num,\n            unit=unit,",
        "detail": "lib.rl.meta.data_processors.processor_joinquant",
        "documentation": {}
    },
    {
        "label": "QuantConnectEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_quantconnect",
        "description": "lib.rl.meta.data_processors.processor_quantconnect",
        "peekOfCode": "class QuantConnectEngineer:\n    def __init__(self):\n        pass\n    def data_fetch(start_time, end_time, stock_list, resolution=Resolution.Daily):\n        # resolution: Daily, Hour, Minute, Second\n        qb = QuantBook()\n        for stock in stock_list:\n            qb.AddEquity(stock)\n        history = qb.History(qb.Securities.Keys, start_time, end_time, resolution)\n        return history",
        "detail": "lib.rl.meta.data_processors.processor_quantconnect",
        "documentation": {}
    },
    {
        "label": "WrdsProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_wrds",
        "description": "lib.rl.meta.data_processors.processor_wrds",
        "peekOfCode": "class WrdsProcessor:\n    def __init__(self, if_offline=False):\n        if not if_offline:\n            self.db = wrds.Connection()\n    def download_data(\n        self,\n        start_date,\n        end_date,\n        ticker_list,\n        time_interval,",
        "detail": "lib.rl.meta.data_processors.processor_wrds",
        "documentation": {}
    },
    {
        "label": "pd.options.mode.chained_assignment",
        "kind": 5,
        "importPath": "lib.rl.meta.data_processors.processor_wrds",
        "description": "lib.rl.meta.data_processors.processor_wrds",
        "peekOfCode": "pd.options.mode.chained_assignment = None\nclass WrdsProcessor:\n    def __init__(self, if_offline=False):\n        if not if_offline:\n            self.db = wrds.Connection()\n    def download_data(\n        self,\n        start_date,\n        end_date,\n        ticker_list,",
        "detail": "lib.rl.meta.data_processors.processor_wrds",
        "documentation": {}
    },
    {
        "label": "YahooFinanceProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processors.processor_yahoofinance",
        "description": "lib.rl.meta.data_processors.processor_yahoofinance",
        "peekOfCode": "class YahooFinanceProcessor:\n    \"\"\"Provides methods for retrieving daily stock data from\n    Yahoo Finance API\n    \"\"\"\n    def __init__(self):\n        pass\n    \"\"\"\n    Param\n    ----------\n        start_date : str",
        "detail": "lib.rl.meta.data_processors.processor_yahoofinance",
        "documentation": {}
    },
    {
        "label": "BitcoinEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_cryptocurrency_trading.env_btc_ccxt",
        "description": "lib.rl.meta.env_cryptocurrency_trading.env_btc_ccxt",
        "peekOfCode": "class BitcoinEnv:  # custom env\n    def __init__(\n        self,\n        data_cwd=None,\n        price_ary=None,\n        tech_ary=None,\n        time_frequency=15,\n        start=None,\n        mid1=172197,\n        mid2=216837,",
        "detail": "lib.rl.meta.env_cryptocurrency_trading.env_btc_ccxt",
        "documentation": {}
    },
    {
        "label": "CryptoEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_cryptocurrency_trading.env_multiple_crypto",
        "description": "lib.rl.meta.env_cryptocurrency_trading.env_multiple_crypto",
        "peekOfCode": "class CryptoEnv:  # custom env\n    def __init__(\n        self,\n        config,\n        lookback=1,\n        initial_capital=1e6,\n        buy_cost_pct=1e-3,\n        sell_cost_pct=1e-3,\n        gamma=0.99,\n    ):",
        "detail": "lib.rl.meta.env_cryptocurrency_trading.env_multiple_crypto",
        "documentation": {}
    },
    {
        "label": "StockPortfolioEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_portfolio_allocation.env_portfolio",
        "description": "lib.rl.meta.env_portfolio_allocation.env_portfolio",
        "peekOfCode": "class StockPortfolioEnv(gym.Env):\n    \"\"\"A single stock trading environment for OpenAI gym\n    Attributes\n    ----------\n        df: DataFrame\n            input data\n        stock_dim : int\n            number of unique stocks\n        hmax : int\n            maximum number of shares to trade",
        "detail": "lib.rl.meta.env_portfolio_allocation.env_portfolio",
        "documentation": {}
    },
    {
        "label": "PortfolioOptimizationEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_portfolio_optimization.env_portfolio_optimization",
        "description": "lib.rl.meta.env_portfolio_optimization.env_portfolio_optimization",
        "peekOfCode": "class PortfolioOptimizationEnv(gym.Env):\n    \"\"\"A portfolio allocation environment for OpenAI gym.\n    This environment simulates the interactions between an agent and the financial market\n    based on data provided by a dataframe. The dataframe contains the time series of\n    features defined by the user (such as closing, high and low prices) and must have\n    a time and a tic column with a list of datetimes and ticker symbols respectively.\n    An example of dataframe is shown below::\n            date        high            low             close           tic\n        0   2020-12-23  0.157414        0.127420        0.136394        ADA-USD\n        1   2020-12-23  34.381519       30.074295       31.097898       BNB-USD",
        "detail": "lib.rl.meta.env_portfolio_optimization.env_portfolio_optimization",
        "documentation": {}
    },
    {
        "label": "StockEnvNAS100",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_nas100_wrds",
        "description": "lib.rl.meta.env_stock_trading.env_nas100_wrds",
        "peekOfCode": "class StockEnvNAS100:\n    def __init__(\n        self,\n        cwd=\"./data/nas100\",\n        price_ary=None,\n        tech_ary=None,\n        turbulence_ary=None,\n        gamma=0.999,\n        turbulence_thresh=30,\n        min_stock_rate=0.1,",
        "detail": "lib.rl.meta.env_stock_trading.env_nas100_wrds",
        "documentation": {}
    },
    {
        "label": "AlpacaPaperTrading",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "description": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "peekOfCode": "class AlpacaPaperTrading:\n    def __init__(\n        self,\n        ticker_list,\n        time_interval,\n        drl_lib,\n        agent,\n        cwd,\n        net_dim,\n        state_dim,",
        "detail": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "StockEnvEmpty",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "description": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "peekOfCode": "class StockEnvEmpty(gym.Env):\n    # Empty Env used for loading rllib agent\n    def __init__(self, config):\n        state_dim = config[\"state_dim\"]\n        action_dim = config[\"action_dim\"]\n        self.env_num = 1\n        self.max_step = 10000\n        self.env_name = \"StockEnvEmpty\"\n        self.state_dim = state_dim\n        self.action_dim = action_dim",
        "detail": "lib.rl.meta.env_stock_trading.env_stock_papertrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "peekOfCode": "class StockTradingEnv(gym.Env):\n    \"\"\"A stock trading environment for OpenAI gym\"\"\"\n    metadata = {\"render.modes\": [\"human\"]}\n    def __init__(\n        self,\n        df: pd.DataFrame,\n        stock_dim: int,\n        hmax: int,\n        initial_amount: int,\n        num_stock_shares: list[int],",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading",
        "documentation": {}
    },
    {
        "label": "StockTradingEnvCashpenalty",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_cashpenalty",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_cashpenalty",
        "peekOfCode": "class StockTradingEnvCashpenalty(gym.Env):\n    \"\"\"\n    A stock trading environment for OpenAI gym\n    This environment penalizes the model for not maintaining a reserve of cash.\n    This enables the model to manage cash reserves in addition to performing trading procedures.\n    Reward at any step is given as follows\n        r_i = (sum(cash, asset_value) - initial_cash - max(0, sum(cash, asset_value)*cash_penalty_proportion-cash))/(days_elapsed)\n        This reward function takes into account a liquidity requirement, as well as long-term accrued rewards.\n    Parameters:\n        df (pandas.DataFrame): Dataframe containing data",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_cashpenalty",
        "documentation": {}
    },
    {
        "label": "StockTradingEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "peekOfCode": "class StockTradingEnv(gym.Env):\n    def __init__(\n        self,\n        config,\n        initial_account=1e6,\n        gamma=0.99,\n        turbulence_thresh=99,\n        min_stock_rate=0.1,\n        max_stock=1e2,\n        initial_capital=1e6,",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_np",
        "documentation": {}
    },
    {
        "label": "StockTradingEnvStopLoss",
        "kind": 6,
        "importPath": "lib.rl.meta.env_stock_trading.env_stocktrading_stoploss",
        "description": "lib.rl.meta.env_stock_trading.env_stocktrading_stoploss",
        "peekOfCode": "class StockTradingEnvStopLoss(gym.Env):\n    \"\"\"\n    A stock trading environment for OpenAI gym\n    This environment penalizes the model if excedeed the stop-loss threshold, selling assets with under expectation %profit, and also\n    for not maintaining a reserve of cash.\n    This enables the model to do trading with high confidence and manage cash reserves in addition to performing trading procedures.\n    Reward at any step is given as follows\n        r_i = (sum(cash, asset_value) + additional_reward - total_penalty - initial_cash) / initial_cash / days_elapsed\n        , where total_penalty = cash_penalty + stop_loss_penalty + low_profit_penalty\n                cash_penalty = max(0, sum(cash, asset_value)*cash_penalty_proportion-cash)",
        "detail": "lib.rl.meta.env_stock_trading.env_stocktrading_stoploss",
        "documentation": {}
    },
    {
        "label": "PaperTradingAlpaca",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.alpaca",
        "description": "lib.rl.meta.paper_trading.alpaca",
        "peekOfCode": "class PaperTradingAlpaca:\n    def __init__(\n        self,\n        ticker_list,\n        time_interval,\n        drl_lib,\n        agent,\n        cwd,\n        net_dim,\n        state_dim,",
        "detail": "lib.rl.meta.paper_trading.alpaca",
        "documentation": {}
    },
    {
        "label": "StockEnvEmpty",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.alpaca",
        "description": "lib.rl.meta.paper_trading.alpaca",
        "peekOfCode": "class StockEnvEmpty(gym.Env):\n    # Empty Env used for loading rllib agent\n    def __init__(self, config):\n        state_dim = config[\"state_dim\"]\n        action_dim = config[\"action_dim\"]\n        self.env_num = 1\n        self.max_step = 10000\n        self.env_name = \"StockEnvEmpty\"\n        self.state_dim = state_dim\n        self.action_dim = action_dim",
        "detail": "lib.rl.meta.paper_trading.alpaca",
        "documentation": {}
    },
    {
        "label": "ActorPPO",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class ActorPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, action_dim])\n        self.action_std_log = nn.Parameter(\n            torch.zeros((1, action_dim)), requires_grad=True\n        )  # trainable parameter\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state).tanh()  # action.tanh()\n    def get_action(self, state: Tensor) -> (Tensor, Tensor):  # for exploration",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "CriticPPO",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class CriticPPO(nn.Module):\n    def __init__(self, dims: [int], state_dim: int, _action_dim: int):\n        super().__init__()\n        self.net = build_mlp(dims=[state_dim, *dims, 1])\n    def forward(self, state: Tensor) -> Tensor:\n        return self.net(state)  # advantage value\ndef build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)\n        if env_args is None:  # dummy env_args\n            env_args = {\n                \"env_name\": None,\n                \"state_dim\": None,\n                \"action_dim\": None,\n                \"if_discrete\": None,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "AgentBase",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class AgentBase:\n    def __init__(\n        self,\n        net_dims: [int],\n        state_dim: int,\n        action_dim: int,\n        gpu_id: int = 0,\n        args: Config = Config(),\n    ):\n        self.state_dim = state_dim",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "AgentPPO",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class AgentPPO(AgentBase):\n    def __init__(\n        self,\n        net_dims: [int],\n        state_dim: int,\n        action_dim: int,\n        gpu_id: int = 0,\n        args: Config = Config(),\n    ):\n        self.if_off_policy = False",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "PendulumEnv",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class PendulumEnv(gym.Wrapper):  # a demo of custom gym env\n    def __init__(self):\n        gym.logger.set_level(40)  # Block warning\n        gym_env_name = \"Pendulum-v0\" if gym.__version__ < \"0.18.0\" else \"Pendulum-v1\"\n        super().__init__(env=gym.make(gym_env_name))\n        \"\"\"the necessary env information when you design a custom env\"\"\"\n        self.env_name = gym_env_name  # the name of this env.\n        self.state_dim = self.observation_space.shape[0]  # feature number of state\n        self.action_dim = self.action_space.shape[0]  # feature number of action\n        self.if_discrete = False  # discrete action or continuous action",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "Evaluator",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class Evaluator:\n    def __init__(\n        self, eval_env, eval_per_step: int = 1e4, eval_times: int = 8, cwd: str = \".\"\n    ):\n        self.cwd = cwd\n        self.env_eval = eval_env\n        self.eval_step = 0\n        self.total_step = 0\n        self.start_time = time.time()\n        self.eval_times = (",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DRLAgent",
        "kind": 6,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "class DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes\n    ----------\n        env: gym environment class\n            user-defined class\n    Methods\n    -------\n        get_model()\n            setup DRL algorithms",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "build_mlp",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def build_mlp(dims: [int]) -> nn.Sequential:  # MLP (MultiLayer Perceptron)\n    net_list = []\n    for i in range(len(dims) - 1):\n        net_list.extend([nn.Linear(dims[i], dims[i + 1]), nn.ReLU()])\n    del net_list[-1]  # remove the activation of output layer\n    return nn.Sequential(*net_list)\nclass Config:\n    def __init__(self, agent_class=None, env_class=None, env_args=None):\n        self.env_class = env_class  # env = env_class(**env_args)\n        self.env_args = env_args  # env = env_class(**env_args)",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "get_gym_env_args",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def get_gym_env_args(env, if_print: bool) -> dict:\n    if {\"unwrapped\", \"observation_space\", \"action_space\", \"spec\"}.issubset(\n        dir(env)\n    ):  # isinstance(env, gym.Env):\n        env_name = env.unwrapped.spec.id\n        state_shape = env.observation_space.shape\n        state_dim = (\n            state_shape[0] if len(state_shape) == 1 else state_shape\n        )  # sometimes state_dim is a list\n        if_discrete = isinstance(env.action_space, gym.spaces.Discrete)",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "kwargs_filter",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def kwargs_filter(function, kwargs: dict) -> dict:\n    import inspect\n    sign = inspect.signature(function).parameters.values()\n    sign = {val.name for val in sign}\n    common_args = sign.intersection(kwargs.keys())\n    return {key: kwargs[key] for key in common_args}  # filtered kwargs\ndef build_env(env_class=None, env_args=None):\n    if env_class.__module__ == \"gym.envs.registration\":  # special rule\n        env = env_class(id=env_args[\"env_name\"])\n    else:",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "build_env",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def build_env(env_class=None, env_args=None):\n    if env_class.__module__ == \"gym.envs.registration\":  # special rule\n        env = env_class(id=env_args[\"env_name\"])\n    else:\n        env = env_class(**kwargs_filter(env_class.__init__, env_args.copy()))\n    for attr_str in (\"env_name\", \"state_dim\", \"action_dim\", \"if_discrete\"):\n        setattr(env, attr_str, env_args[attr_str])\n    return env\nclass AgentBase:\n    def __init__(",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "train_agent",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def train_agent(args: Config):\n    args.init_before_training()\n    env = build_env(args.env_class, args.env_args)\n    agent = args.agent_class(\n        args.net_dims, args.state_dim, args.action_dim, gpu_id=args.gpu_id, args=args\n    )\n    agent.states = env.reset()[np.newaxis, :]\n    evaluator = Evaluator(\n        eval_env=build_env(args.env_class, args.env_args),\n        eval_per_step=args.eval_per_step,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "render_agent",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def render_agent(\n    env_class,\n    env_args: dict,\n    net_dims: [int],\n    agent_class,\n    actor_path: str,\n    render_times: int = 8,\n):\n    env = build_env(env_class, env_args)\n    state_dim = env_args[\"state_dim\"]",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "get_rewards_and_steps",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def get_rewards_and_steps(\n    env, actor, if_render: bool = False\n) -> (float, int):  # cumulative_rewards and episode_steps\n    device = next(actor.parameters()).device  # net.parameters() is a Python generator.\n    state = env.reset()\n    episode_steps = 0\n    cumulative_returns = 0.0  # sum of rewards in an episode\n    for episode_steps in range(12345):\n        tensor_state = torch.as_tensor(\n            state, dtype=torch.float32, device=device",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def train(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def test(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "get_trading_days",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def get_trading_days(start, end):\n    nyse = tc.get_calendar(\"NYSE\")\n    df = nyse.sessions_in_range(\n        pd.Timestamp(start, tz=pytz.UTC), pd.Timestamp(end, tz=pytz.UTC)\n    )\n    trading_days = []\n    for day in df:\n        trading_days.append(str(day)[:10])\n    return trading_days\ndef alpaca_history(key, secret, url, start, end):",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "alpaca_history",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def alpaca_history(key, secret, url, start, end):\n    api = tradeapi.REST(key, secret, url, \"v2\")\n    trading_days = get_trading_days(start, end)\n    df = pd.DataFrame()\n    for day in trading_days:\n        df = df.append(\n            api.get_portfolio_history(date_start=day, timeframe=\"5Min\").df.iloc[:78]\n        )\n    equities = df.equity.values\n    cumu_returns = equities / equities[0]",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "DIA_history",
        "kind": 2,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "def DIA_history(start):\n    data_df = yf.download([\"^DJI\"], start=start, interval=\"5m\")\n    data_df = data_df.iloc[:]\n    baseline_returns = data_df[\"Adj Close\"].values / data_df[\"Adj Close\"].values[0]\n    return data_df, baseline_returns\n# -----------------------------------------------------------------------------------------------------------------------------------------",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "MODELS = {\"ppo\": AgentPPO}\nOFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "OFF_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "OFF_POLICY_MODELS = [\"ddpg\", \"td3\", \"sac\"]\nON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "ON_POLICY_MODELS",
        "kind": 5,
        "importPath": "lib.rl.meta.paper_trading.common",
        "description": "lib.rl.meta.paper_trading.common",
        "peekOfCode": "ON_POLICY_MODELS = [\"ppo\"]\n# MODEL_KWARGS = {x: config.__dict__[f\"{x.upper()}_PARAMS\"] for x in MODELS.keys()}\n#\n# NOISE = {\n#     \"normal\": NormalActionNoise,\n#     \"ornstein_uhlenbeck\": OrnsteinUhlenbeckActionNoise,\n# }\nclass DRLAgent:\n    \"\"\"Implementations of DRL algorithms\n    Attributes",
        "detail": "lib.rl.meta.paper_trading.common",
        "documentation": {}
    },
    {
        "label": "GroupByScaler",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "class GroupByScaler(BaseEstimator, TransformerMixin):\n    \"\"\"Sklearn-like scaler that scales considering groups of data.\n    In the financial setting, this scale can be used to normalize a DataFrame\n    with time series of multiple tickers. The scaler will fit and transform\n    data for each ticker independently.\n    \"\"\"\n    def __init__(self, by, scaler=MaxAbsScaler, columns=None, scaler_kwargs=None):\n        \"\"\"Initializes GoupBy scaler.\n        Args:\n            by: Name of column that will be used to group.",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "FeatureEngineer",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "class FeatureEngineer:\n    \"\"\"Provides methods for preprocessing the stock price data\n    Attributes\n    ----------\n        use_technical_indicator : boolean\n            we technical indicator or not\n        tech_indicator_list : list\n            a list of technical indicator names (modified from neofinrl_config.py)\n        use_turbulence : boolean\n            use turbulence index or not",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "kind": 2,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "def load_dataset(*, file_name: str) -> pd.DataFrame:\n    \"\"\"\n    load csv dataset from path\n    :return: (df) pandas dataframe\n    \"\"\"\n    # _data = pd.read_csv(f\"{config.DATASET_DIR}/{file_name}\")\n    _data = pd.read_csv(file_name)\n    return _data\ndef data_split(df, start, end, target_date_col=\"date\"):\n    \"\"\"",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "data_split",
        "kind": 2,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "def data_split(df, start, end, target_date_col=\"date\"):\n    \"\"\"\n    split the dataset into training or testing using date\n    :param data: (df) pandas dataframe, start, end\n    :return: (df) pandas dataframe\n    \"\"\"\n    data = df[(df[target_date_col] >= start) & (df[target_date_col] < end)]\n    data = data.sort_values([target_date_col, \"tic\"], ignore_index=True)\n    data.index = data[target_date_col].factorize()[0]\n    return data",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "convert_to_datetime",
        "kind": 2,
        "importPath": "lib.rl.meta.preprocessor.preprocessors",
        "description": "lib.rl.meta.preprocessor.preprocessors",
        "peekOfCode": "def convert_to_datetime(time):\n    time_fmt = \"%Y-%m-%dT%H:%M:%S\"\n    if isinstance(time, str):\n        return datetime.datetime.strptime(time, time_fmt)\nclass GroupByScaler(BaseEstimator, TransformerMixin):\n    \"\"\"Sklearn-like scaler that scales considering groups of data.\n    In the financial setting, this scale can be used to normalize a DataFrame\n    with time series of multiple tickers. The scaler will fit and transform\n    data for each ticker independently.\n    \"\"\"",
        "detail": "lib.rl.meta.preprocessor.preprocessors",
        "documentation": {}
    },
    {
        "label": "TushareDownloader",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.tusharedownloader",
        "description": "lib.rl.meta.preprocessor.tusharedownloader",
        "peekOfCode": "class TushareDownloader:\n    \"\"\"Provides methods for retrieving daily stock data from\n    tushare API\n    Attributes\n    ----------\n        start_date : str\n            start date of the data (modified from config.py)\n        end_date : str\n            end date of the data (modified from config.py)\n        ticker_list : list",
        "detail": "lib.rl.meta.preprocessor.tusharedownloader",
        "documentation": {}
    },
    {
        "label": "YahooDownloader",
        "kind": 6,
        "importPath": "lib.rl.meta.preprocessor.yahoodownloader",
        "description": "lib.rl.meta.preprocessor.yahoodownloader",
        "peekOfCode": "class YahooDownloader:\n    \"\"\"Provides methods for retrieving daily stock data from\n    Yahoo Finance API\n    Attributes\n    ----------\n        start_date : str\n            start date of the data (modified from neofinrl_config.py)\n        end_date : str\n            end date of the data (modified from neofinrl_config.py)\n        ticker_list : list",
        "detail": "lib.rl.meta.preprocessor.yahoodownloader",
        "documentation": {}
    },
    {
        "label": "DataProcessor",
        "kind": 6,
        "importPath": "lib.rl.meta.data_processor",
        "description": "lib.rl.meta.data_processor",
        "peekOfCode": "class DataProcessor:\n    def __init__(self, data_source, tech_indicator=None, vix=None, **kwargs):\n        if data_source == \"alpaca\":\n            try:\n                API_KEY = kwargs.get(\"API_KEY\")\n                API_SECRET = kwargs.get(\"API_SECRET\")\n                API_BASE_URL = kwargs.get(\"API_BASE_URL\")\n                self.processor = Alpaca(API_KEY, API_SECRET, API_BASE_URL)\n                jprint(\"Alpaca successfully connected\")\n            except BaseException:",
        "detail": "lib.rl.meta.data_processor",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRAIN_START_DATE = \"2019-01-01\"\nTRAIN_END_DATE = \"2019-12-31\"\nTEST_START_DATE = \"2020-01-01\"\nTEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRAIN_END_DATE = \"2019-12-31\"\nTEST_START_DATE = \"2020-01-01\"\nTEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TEST_START_DATE = \"2020-01-01\"\nTEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TEST_END_DATE = \"2020-12-31\"\nTRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRADE_START_DATE = \"2021-01-01\"\nTRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "TRADE_END_DATE = \"2021-07-31\"\nPATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "PATH_OF_DATA",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "PATH_OF_DATA = \"data\"\nREAD_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "READ_DATA_FROM_LOCAL",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "READ_DATA_FROM_LOCAL = 1  # 0 or 1\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",\n]",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "INDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",\n]\nFAANG_TICKER = [\"FB\", \"AMZN\", \"AAPL\", \"NFLX\", \"GOOG\"]",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "FAANG_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "FAANG_TICKER = [\"FB\", \"AMZN\", \"AAPL\", \"NFLX\", \"GOOG\"]\n# Dow 30 constituents at 2019/01\nDOW_30_TICKER = [\n    \"AAPL\",\n    \"MSFT\",\n    \"JPM\",\n    \"V\",\n    \"RTX\",\n    \"PG\",\n    \"GS\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "DOW_30_TICKER = [\n    \"AAPL\",\n    \"MSFT\",\n    \"JPM\",\n    \"V\",\n    \"RTX\",\n    \"PG\",\n    \"GS\",\n    \"NKE\",\n    \"DIS\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "NAS_100_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "NAS_100_TICKER = [\n    \"AMGN\",\n    \"AAPL\",\n    \"AMAT\",\n    \"INTC\",\n    \"PCAR\",\n    \"PAYX\",\n    \"MSFT\",\n    \"ADBE\",\n    \"CSCO\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "SP_500_TICKER",
        "kind": 5,
        "importPath": "lib.rl.meta.meta_config",
        "description": "lib.rl.meta.meta_config",
        "peekOfCode": "SP_500_TICKER = [\n    \"A\",\n    \"AAL\",\n    \"AAP\",\n    \"AAPL\",\n    \"ABBV\",\n    \"ABC\",\n    \"ABMD\",\n    \"ABT\",\n    \"ACN\",",
        "detail": "lib.rl.meta.meta_config",
        "documentation": {}
    },
    {
        "label": "OrderSide",
        "kind": 6,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "class OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"\n    STOP_LIMIT = \"stop_limit\"\n    TRAILING_STOP = \"trailing_stop\"\nclass TimeInForce():",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "kind": 6,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "class OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"\n    STOP_LIMIT = \"stop_limit\"\n    TRAILING_STOP = \"trailing_stop\"\nclass TimeInForce():\n    DAY = \"day\"\n    GTC = \"gtc\"\n    OPG = \"opg\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TimeInForce",
        "kind": 6,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "class TimeInForce():\n    DAY = \"day\"\n    GTC = \"gtc\"\n    OPG = \"opg\"\n    CLS = \"cls\"\n    IOC = \"ioc\"\n    FOK = \"fok\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "MAIN_RESULTS_DIR",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "MAIN_RESULTS_DIR = 'saba_results'\nDATA_SAVE_DIR       = MAIN_RESULTS_DIR + \"/datasets\"\nTRAINED_MODEL_DIR   = MAIN_RESULTS_DIR + \"/trained_models\"\nTENSORBOARD_LOG_DIR = MAIN_RESULTS_DIR + \"/tensorboard_log\"\nRESULTS_DIR         = MAIN_RESULTS_DIR + \"/results\"\n# date format: '%Y-%m-%d'\nTRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657\nTRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TENSORBOARD_LOG_DIR",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TENSORBOARD_LOG_DIR = MAIN_RESULTS_DIR + \"/tensorboard_log\"\nRESULTS_DIR         = MAIN_RESULTS_DIR + \"/results\"\n# date format: '%Y-%m-%d'\nTRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657\nTRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\nTRADE_START_DATE = \"2021-11-01\"\nTRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRAIN_START_DATE = \"2014-01-06\"  # bug fix: set Monday right, start date set 2014-01-01 ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1658 and the array at index 1 has size 1657\nTRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\nTRADE_START_DATE = \"2021-11-01\"\nTRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRAIN_END_DATE = \"2020-07-31\"\nTEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\nTRADE_START_DATE = \"2021-11-01\"\nTRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TEST_START_DATE = \"2020-08-01\"\nTEST_END_DATE = \"2021-10-01\"\nTRADE_START_DATE = \"2021-11-01\"\nTRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TEST_END_DATE = \"2021-10-01\"\nTRADE_START_DATE = \"2021-11-01\"\nTRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRADE_START_DATE = \"2021-11-01\"\nTRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"cci_30\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TRADE_END_DATE = \"2021-12-01\"\n# stockstats technical indicator column names\n# check https://pypi.org/project/stockstats/ for different names\nINDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"cci_30\",\n    \"dx_30\",",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "INDICATORS = [\n    \"macd\",\n    \"boll_ub\",\n    \"boll_lb\",\n    \"rsi_30\",\n    \"cci_30\",\n    \"dx_30\",\n    \"close_30_sma\",\n    \"close_60_sma\",\n]",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "A2C_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "A2C_PARAMS = {\"n_steps\": 5, \"ent_coef\": 0.01, \"learning_rate\": 0.0007}\nPPO_PARAMS = {\n    \"n_steps\": 2048,\n    \"ent_coef\": 0.01,\n    \"learning_rate\": 0.00025,\n    \"batch_size\": 64,\n}\nDDPG_PARAMS = {\"batch_size\": 128, \"buffer_size\": 50000, \"learning_rate\": 0.001}\nTD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "PPO_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "PPO_PARAMS = {\n    \"n_steps\": 2048,\n    \"ent_coef\": 0.01,\n    \"learning_rate\": 0.00025,\n    \"batch_size\": 64,\n}\nDDPG_PARAMS = {\"batch_size\": 128, \"buffer_size\": 50000, \"learning_rate\": 0.001}\nTD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {\n    \"batch_size\": 64,",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "DDPG_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "DDPG_PARAMS = {\"batch_size\": 128, \"buffer_size\": 50000, \"learning_rate\": 0.001}\nTD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {\n    \"batch_size\": 64,\n    \"buffer_size\": 100000,\n    \"learning_rate\": 0.0001,\n    \"learning_starts\": 100,\n    \"ent_coef\": \"auto_0.1\",\n}\nERL_PARAMS = {",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TD3_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TD3_PARAMS = {\"batch_size\": 100, \"buffer_size\": 1000000, \"learning_rate\": 0.001}\nSAC_PARAMS = {\n    \"batch_size\": 64,\n    \"buffer_size\": 100000,\n    \"learning_rate\": 0.0001,\n    \"learning_starts\": 100,\n    \"ent_coef\": \"auto_0.1\",\n}\nERL_PARAMS = {\n    \"learning_rate\": 3e-5,",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "SAC_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "SAC_PARAMS = {\n    \"batch_size\": 64,\n    \"buffer_size\": 100000,\n    \"learning_rate\": 0.0001,\n    \"learning_starts\": 100,\n    \"ent_coef\": \"auto_0.1\",\n}\nERL_PARAMS = {\n    \"learning_rate\": 3e-5,\n    \"batch_size\": 2048,",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ERL_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ERL_PARAMS = {\n    \"learning_rate\": 3e-5,\n    \"batch_size\": 2048,\n    \"gamma\": 0.985,\n    \"seed\": 312,\n    \"net_dimension\": 512,\n    \"target_step\": 5000,\n    \"eval_gap\": 30,\n    \"eval_times\": 64,  # bug fix:KeyError: 'eval_times' line 68, in get_model model.eval_times = model_kwargs[\"eval_times\"]\n}",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "RLlib_PARAMS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "RLlib_PARAMS = {\"lr\": 5e-5, \"train_batch_size\": 500, \"gamma\": 0.99}\n# Possible time zones\nTIME_ZONE_SHANGHAI = \"Asia/Shanghai\"  # Hang Seng HSI, SSE, CSI\nTIME_ZONE_USEASTERN = \"US/Eastern\"  # Dow, Nasdaq, SP\nTIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_SHANGHAI",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_SHANGHAI = \"Asia/Shanghai\"  # Hang Seng HSI, SSE, CSI\nTIME_ZONE_USEASTERN = \"US/Eastern\"  # Dow, Nasdaq, SP\nTIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_USEASTERN",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_USEASTERN = \"US/Eastern\"  # Dow, Nasdaq, SP\nTIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_PARIS",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_PARIS = \"Europe/Paris\"  # CAC,\nTIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_BERLIN",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_BERLIN = \"Europe/Berlin\"  # DAX, TECDAX, MDAX, SDAX\nTIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_JAKARTA",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_JAKARTA = \"Asia/Jakarta\"  # LQ45\nTIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE_SELFDEFINED",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "TIME_ZONE_SELFDEFINED = \"xxx\"  # If neither of the above is your time zone, you should define it, and set USE_TIME_ZONE_SELFDEFINED 1.\nUSE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "USE_TIME_ZONE_SELFDEFINED",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "USE_TIME_ZONE_SELFDEFINED = 0  # 0 (default) or 1 (use the self defined)\n# parameters for data sources\nALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_SECRET",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "ALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "BINANCE_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config",
        "description": "lib.rl.config",
        "peekOfCode": "BINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\n# parameters for data sources\nclass OrderSide():\n    BUY = \"buy\"\n    SELL = \"sell\"\nclass OrderType():\n    MARKET = \"market\"\n    LIMIT = \"limit\"\n    STOP = \"stop\"\n    STOP_LIMIT = \"stop_limit\"",
        "detail": "lib.rl.config",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_KEY",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "ALPACA_API_KEY = \"PKEJH4W0URAU56SHKQW3\"  # your ALPACA_API_KEY\nALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_SECRET",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "ALPACA_API_SECRET = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"  # your ALPACA_API_SECRET\nALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "ALPACA_API_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "ALPACA_API_BASE_URL = \"https://paper-api.alpaca.markets\"  # alpaca url\nBINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "BINANCE_BASE_URL",
        "kind": 5,
        "importPath": "lib.rl.config_private",
        "description": "lib.rl.config_private",
        "peekOfCode": "BINANCE_BASE_URL = \"https://data.binance.vision/\"  # binance url\nGROQ_API_KEY= \"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\"",
        "detail": "lib.rl.config_private",
        "documentation": {}
    },
    {
        "label": "SINGLE_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SINGLE_TICKER = [\"AAPL\"]\n# Dow 30 constituents in 2021/10\n# check https://wrds-www.wharton.upenn.edu/ for U.S. index constituents\nDOW_30_TICKER = [\n    \"AXP\",\n    \"AMGN\",\n    \"AAPL\",\n    \"BA\",\n    \"CAT\",\n    \"CSCO\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DOW_30_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "DOW_30_TICKER = [\n    \"AXP\",\n    \"AMGN\",\n    \"AAPL\",\n    \"BA\",\n    \"CAT\",\n    \"CSCO\",\n    \"CVX\",\n    \"GS\",\n    \"HD\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "NAS_100_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "NAS_100_TICKER = [\n    \"AMGN\",\n    \"AAPL\",\n    \"AMAT\",\n    \"INTC\",\n    \"PCAR\",\n    \"PAYX\",\n    \"MSFT\",\n    \"ADBE\",\n    \"CSCO\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SP_500_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SP_500_TICKER = [\n    \"A\",\n    \"AAL\",\n    \"AAP\",\n    \"AAPL\",\n    \"ABBV\",\n    \"ABC\",\n    \"ABMD\",\n    \"ABT\",\n    \"ACN\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "HSI_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "HSI_50_TICKER = [\n    \"0011.HK\",\n    \"0005.HK\",\n    \"0012.HK\",\n    \"0006.HK\",\n    \"0003.HK\",\n    \"0016.HK\",\n    \"0019.HK\",\n    \"0002.HK\",\n    \"0001.HK\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SSE_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SSE_50_TICKER = [\n    \"600000.XSHG\",\n    \"600036.XSHG\",\n    \"600104.XSHG\",\n    \"600030.XSHG\",\n    \"601628.XSHG\",\n    \"601166.XSHG\",\n    \"601318.XSHG\",\n    \"601328.XSHG\",\n    \"601088.XSHG\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "CSI_300_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "CSI_300_TICKER = [\n    \"600000.XSHG\",\n    \"600004.XSHG\",\n    \"600009.XSHG\",\n    \"600010.XSHG\",\n    \"600011.XSHG\",\n    \"600015.XSHG\",\n    \"600016.XSHG\",\n    \"600018.XSHG\",\n    \"600019.XSHG\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "CAC_40_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "CAC_40_TICKER = [\n    \"AC.PA\",\n    \"AI.PA\",\n    \"AIR.PA\",\n    \"MT.AS\",\n    \"ATO.PA\",\n    \"CS.PA\",\n    \"BNP.PA\",\n    \"EN.PA\",\n    \"CAP.PA\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "DAX_30_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "DAX_30_TICKER = [\n    \"DHER.DE\",\n    \"RWE.DE\",\n    \"FRE.DE\",\n    \"MTX.DE\",\n    \"MRK.DE\",\n    \"LIN.DE\",\n    \"ALV.DE\",\n    \"VNA.DE\",\n    \"EOAN.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "TECDAX_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "TECDAX_TICKER = [\n    \"ADV.DE\",\n    \"AFX.DE\",\n    \"AM3D.DE\",\n    \"BC8.DE\",\n    \"COK.DE\",\n    \"DLG.DE\",\n    \"DRI.DE\",\n    \"DRW3.DE\",\n    \"EVT.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "MDAX_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "MDAX_50_TICKER = [\n    \"1COV.DE\",\n    \"AIR.DE\",\n    \"AOX.DE\",\n    \"ARL.DE\",\n    \"BNR.DE\",\n    \"BOSS.DE\",\n    \"DEQ.DE\",\n    \"DUE.DE\",\n    \"DWNI.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SDAX_50_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SDAX_50_TICKER = [\n    \"AAD.DE\",\n    \"ACX.DE\",\n    \"ADJ.DE\",\n    \"ADL.DE\",\n    \"BDT.DE\",\n    \"BIO3.DE\",\n    \"BVB.DE\",\n    \"BYW6.DE\",\n    \"CWC.DE\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "LQ45_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "LQ45_TICKER = [\n    \"ACES.JK\",\n    \"ADRO.JK\",\n    \"AKRA.JK\",\n    \"ANTM.JK\",\n    \"ASII.JK\",\n    \"BBCA.JK\",\n    \"BBNI.JK\",\n    \"BBRI.JK\",\n    \"BBTN.JK\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "SRI_KEHATI_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "SRI_KEHATI_TICKER = [\n    \"AALI.JK\",\n    \"ADHI.JK\",\n    \"ASII.JK\",\n    \"BBCA.JK\",\n    \"BBNI.JK\",\n    \"BBRI.JK\",\n    \"BBTN.JK\",\n    \"BMRI.JK\",\n    \"BSDE.JK\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "FX_TICKER",
        "kind": 5,
        "importPath": "lib.rl.config_tickers",
        "description": "lib.rl.config_tickers",
        "peekOfCode": "FX_TICKER = [\n    \"AUDCAD=X\",\n    \"AUDCHF=X\",\n    \"AUDJPY=X\",\n    \"AUDNZD=X\",\n    \"AUDSGD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",\n    \"AUDUSD=X\",",
        "detail": "lib.rl.config_tickers",
        "documentation": {}
    },
    {
        "label": "build_parser",
        "kind": 2,
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "peekOfCode": "def build_parser():\n    parser = ArgumentParser()\n    parser.add_argument(\n        \"--mode\",\n        dest=\"mode\",\n        help=\"start mode, train, download_data\" \" backtest\",\n        metavar=\"MODE\",\n        default=\"train\",\n    )\n    return parser",
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "check_and_make_directories",
        "kind": 2,
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "peekOfCode": "def check_and_make_directories(directories: list[str]):\n    for directory in directories:\n        if not os.path.exists(\"./\" + directory):\n            os.makedirs(\"./\" + directory)\ndef main() -> int:\n    parser = build_parser()\n    options = parser.parse_args()\n    check_and_make_directories(\n        [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n    )",
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "lib.rl.main",
        "description": "lib.rl.main",
        "peekOfCode": "def main() -> int:\n    parser = build_parser()\n    options = parser.parse_args()\n    check_and_make_directories(\n        [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n    )\n    if options.mode == \"train\":\n        from lib.rl import train\n        env = StockTradingEnv\n        # demo for elegantrl",
        "detail": "lib.rl.main",
        "documentation": {}
    },
    {
        "label": "get_daily_return",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def get_daily_return(df, value_col_name=\"account_value\"):\n    df = deepcopy(df)\n    df[\"daily_return\"] = df[value_col_name].pct_change(1)\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace=True, drop=True)\n    df.index = df.index.tz_localize(\"UTC\")\n    return pd.Series(df[\"daily_return\"], index=df.index)\ndef convert_daily_return_to_pyfolio_ts(df):\n    strategy_ret = df.copy()\n    strategy_ret[\"date\"] = pd.to_datetime(strategy_ret[\"date\"])",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "convert_daily_return_to_pyfolio_ts",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def convert_daily_return_to_pyfolio_ts(df):\n    strategy_ret = df.copy()\n    strategy_ret[\"date\"] = pd.to_datetime(strategy_ret[\"date\"])\n    strategy_ret.set_index(\"date\", drop=False, inplace=True)\n    strategy_ret.index = strategy_ret.index.tz_localize(\"UTC\")\n    del strategy_ret[\"date\"]\n    return pd.Series(strategy_ret[\"daily_return\"].values, index=strategy_ret.index)\ndef backtest_stats(account_value, value_col_name=\"account_value\"):\n    dr_test = get_daily_return(account_value, value_col_name=value_col_name)\n    perf_stats_all = timeseries.perf_stats(",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_stats",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def backtest_stats(account_value, value_col_name=\"account_value\"):\n    dr_test = get_daily_return(account_value, value_col_name=value_col_name)\n    perf_stats_all = timeseries.perf_stats(\n        returns=dr_test,\n        positions=None,\n        transactions=None,\n        turnover_denom=\"AGB\",\n    )\n    # jprint(perf_stats_all)\n    st.table(perf_stats_all)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "backtest_plot",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def backtest_plot(\n    account_value,\n    baseline_start=config.TRADE_START_DATE,\n    baseline_end=config.TRADE_END_DATE,\n    baseline_ticker=\"^DJI\",\n    value_col_name=\"account_value\",\n):\n    df = deepcopy(account_value)\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    test_returns = get_daily_return(df, value_col_name=value_col_name)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_baseline",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def get_baseline(ticker, start, end):\n    return YahooDownloader(\n        start_date=start, end_date=end, ticker_list=[ticker]\n    ).fetch_data()\ndef trx_plot(df_trade, df_actions, ticker_list):\n    df_trx = pd.DataFrame(np.array(df_actions[\"transactions\"].to_list()))\n    df_trx.columns = ticker_list\n    df_trx.index = df_actions[\"date\"]\n    df_trx.index.name = \"\"\n    for i in range(df_trx.shape[1]):",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "trx_plot",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def trx_plot(df_trade, df_actions, ticker_list):\n    df_trx = pd.DataFrame(np.array(df_actions[\"transactions\"].to_list()))\n    df_trx.columns = ticker_list\n    df_trx.index = df_actions[\"date\"]\n    df_trx.index.name = \"\"\n    for i in range(df_trx.shape[1]):\n        df_trx_temp = df_trx.iloc[:, i]\n        df_trx_temp_sign = np.sign(df_trx_temp)\n        buying_signal = df_trx_temp_sign.apply(lambda x: x > 0)\n        selling_signal = df_trx_temp_sign.apply(lambda x: x < 0)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "transfer_date",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def transfer_date(str_dat):\n    return datetime.datetime.strptime(str_dat, \"%Y-%m-%d\").date().strftime(\"%m/%d/%Y\")\ndef plot_result_from_csv(\n    csv_file: str,\n    column_as_x: str,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Result\",\n    num_days_xticks: int = 20,\n    xrotation: int = 0,",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_result_from_csv",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_result_from_csv(\n    csv_file: str,\n    column_as_x: str,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Result\",\n    num_days_xticks: int = 20,\n    xrotation: int = 0,\n):\n    result = pd.read_csv(csv_file)",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_result",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_result(\n    result: pd.DataFrame(),\n    column_as_x: str,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Result\",\n    num_days_xticks: int = 20,\n    xrotation: int = 0,\n):\n    columns = result.columns",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "get_if_overlap",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def get_if_overlap(fig, ax):\n    fig.canvas.draw()\n    # 获取日期标签的边界框\n    bboxes = [label.get_window_extent() for label in ax.get_xticklabels()]\n    # 计算日期标签之间的距离\n    distances = [bboxes[i + 1].x0 - bboxes[i].x1 for i in range(len(bboxes) - 1)]\n    # 如果有任何距离小于0，说明有重叠\n    if any(distance < 0 for distance in distances):\n        if_overlap = True\n    else:",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_return(\n    result: pd.DataFrame(),\n    column_as_x: str,\n    if_need_calc_return: bool,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Return\",\n    if_transfer_date: bool = True,\n    select_start_date: str = None,\n    select_end_date: str = None,",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "plot_return_from_csv",
        "kind": 2,
        "importPath": "lib.rl.plot",
        "description": "lib.rl.plot",
        "peekOfCode": "def plot_return_from_csv(\n    csv_file: str,\n    column_as_x: str,\n    if_need_calc_return: bool,\n    savefig_filename: str = \"fig/result.png\",\n    xlabel: str = \"Date\",\n    ylabel: str = \"Return\",\n    if_transfer_date: bool = True,\n    select_start_date: str = None,\n    select_end_date: str = None,",
        "detail": "lib.rl.plot",
        "documentation": {}
    },
    {
        "label": "jprint",
        "kind": 2,
        "importPath": "lib.rl.pprint",
        "description": "lib.rl.pprint",
        "peekOfCode": "def jprint(s1 = '', s2 = '' , s3 = '', s4 = \"\"):\n  a1 = str(s1) + str(s2) + str(s3) +str(s4)\n  print   (a1)\n  st.write(a1)",
        "detail": "lib.rl.pprint",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "lib.rl.test",
        "description": "lib.rl.test",
        "peekOfCode": "def test(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.test",
        "documentation": {}
    },
    {
        "label": "trade",
        "kind": 2,
        "importPath": "lib.rl.trade",
        "description": "lib.rl.trade",
        "peekOfCode": "def trade(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.trade",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "lib.rl.train",
        "description": "lib.rl.train",
        "peekOfCode": "def train(\n    start_date,\n    end_date,\n    ticker_list,\n    data_source,\n    time_interval,\n    technical_indicator_list,\n    drl_lib,\n    env,\n    model_name,",
        "detail": "lib.rl.train",
        "documentation": {}
    },
    {
        "label": "jprint",
        "kind": 2,
        "importPath": "lib.utility.jprint",
        "description": "lib.utility.jprint",
        "peekOfCode": "def jprint(s1 = '', s2 = '' , s3 = '', s4 = \"\"):\n  a1 = str(s1) + str(s2) + str(s3) +str(s4)\n  print   (a1)\n  st.write(a1)\n# def jprint2(*args):\n#     # Convert all inputs to strings and handle lists/arrays\n#     result = []\n#     for arg in args:\n#         if isinstance(arg, (list, tuple)):  # Check if the argument is a list or tuple\n#             result.extend(map(str, arg))    # Convert each item in the list to a string",
        "detail": "lib.utility.jprint",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\nAPI_KEY      = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET   = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\nAPI_KEY      = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET   = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\nAPI_KEY      = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET   = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\nAPI_KEY      = \"PKEJH4W0URAU56SHKQW3\"\nAPI_SECRET   = \"9g6xpk2x2RiBeV5Cy48WdpxCU51chZx91Lj8x6Ow\"\nAPI_BASE_URL = 'https://paper-api.alpaca.markets'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nst.write(len(df.tic.unique()))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nst.write(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nst.write(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 10,  # Example value, adjust as needed\n    'ppo': 10,\n    'ddpg': 10,\n    'sac' : 10,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 10,  # Example value, adjust as needed\n    'ppo': 10,\n    'ddpg': 10,\n    'sac' : 10,\n    'td3' : 10\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nst.write(df_summary)",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv(RESULTS_DIR + '/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    # temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\nst.write('Sharpe Ratio: ',sharpe)",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value=pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv(RESULTS_DIR + '/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    # temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\nst.write('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nst.write(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\nst.write(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "pages.0_Stock_Training",
        "description": "pages.0_Stock_Training",
        "peekOfCode": "api = tradeapi.REST(API_KEY, API_SECRET, API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    st.write(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,",
        "detail": "pages.0_Stock_Training",
        "documentation": {}
    },
    {
        "label": "plotting_demo",
        "kind": 2,
        "importPath": "pages.1_Plotting_Demo",
        "description": "pages.1_Plotting_Demo",
        "peekOfCode": "def plotting_demo():\n    progress_bar = st.sidebar.progress(0)\n    status_text = st.sidebar.empty()\n    last_rows = np.random.randn(1, 1)\n    chart = st.line_chart(last_rows)\n    for i in range(1, 101):\n        new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n        status_text.text(\"%i%% Complete\" % i)\n        chart.add_rows(new_rows)\n        progress_bar.progress(i)",
        "detail": "pages.1_Plotting_Demo",
        "documentation": {}
    },
    {
        "label": "mapping_demo",
        "kind": 2,
        "importPath": "pages.2_Mapping_Demo",
        "description": "pages.2_Mapping_Demo",
        "peekOfCode": "def mapping_demo():\n    @st.cache_data\n    def from_data_file(filename):\n        url = (\n            \"https://raw.githubusercontent.com/streamlit/\"\n            \"example-data/master/hello/v1/%s\" % filename\n        )\n        return pd.read_json(url)\n    try:\n        ALL_LAYERS = {",
        "detail": "pages.2_Mapping_Demo",
        "documentation": {}
    },
    {
        "label": "data_frame_demo",
        "kind": 2,
        "importPath": "pages.3_DataFrame_Demo",
        "description": "pages.3_DataFrame_Demo",
        "peekOfCode": "def data_frame_demo():\n    @st.cache_data\n    def get_UN_data():\n        AWS_BUCKET_URL = \"https://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n        df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n        return df.set_index(\"Region\")\n    try:\n        df = get_UN_data()\n        countries = st.multiselect(\n            \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]",
        "detail": "pages.3_DataFrame_Demo",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": "pages.4_Stock_Sentiment",
        "description": "pages.4_Stock_Sentiment",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": "pages.4_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "finviz_url",
        "kind": 5,
        "importPath": "pages.4_Stock_Sentiment",
        "description": "pages.4_Stock_Sentiment",
        "peekOfCode": "finviz_url = \"https://finviz.com/quote.ashx?t=\"\n#Enter stock ticker symbol\nexample_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols",
        "detail": "pages.4_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": "pages.4_Stock_Sentiment",
        "description": "pages.4_Stock_Sentiment",
        "peekOfCode": "example_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\nnews_tables = {}",
        "detail": "pages.4_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "pages.4_Stock_Sentiment",
        "description": "pages.4_Stock_Sentiment",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\nnews_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")",
        "detail": "pages.4_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "news_tables",
        "kind": 5,
        "importPath": "pages.4_Stock_Sentiment",
        "description": "pages.4_Stock_Sentiment",
        "peekOfCode": "news_tables = {}\nif ticker:\n      #Fetching stock price data\n            current_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n            stock_data = yf.download(ticker, start=\"2000-01-01\", end=current_date)\n            url = finviz_url + ticker\n            req = Request(url=url, headers={\"user-agent\": \"my-app\"})\n            response = urlopen(req)\n            html = BeautifulSoup(response, features=\"html.parser\")\n            news_table = html.find(id=\"news-table\")",
        "detail": "pages.4_Stock_Sentiment",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "API_BASE_URL = 'https://paper-api.alpaca.markets'\nfrom finrl.config_tickers import DOW_30_TICKER\nfrom finrl.meta.preprocessor.yahoodownloader import YahooDownloader\nfrom finrl.meta.preprocessor.preprocessors import FeatureEngineer, data_split\nfrom finrl.meta.env_stock_trading.env_stocktrading import StockTradingEnv\nfrom finrl.agents.stablebaselines3.models import DRLAgent,DRLEnsembleAgent\nfrom finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\nfrom pprint import pprint\nimport sys\nsys.path.append(\"../FinRL-Library\")",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "TRAIN_START_DATE = '2009-04-01'\nTRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "TRAIN_END_DATE = '2021-01-01'\nTEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TEST_START_DATE",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "TEST_START_DATE = '2021-01-01'\nTEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TEST_END_DATE",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "TEST_END_DATE = '2022-06-01'\ndf = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "df = YahooDownloader(start_date = TRAIN_START_DATE,\n                     end_date = TEST_END_DATE,\n                     ticker_list = DOW_30_TICKER).fetch_data()\ndf.sort_values(['date','tic']).head()\nprint(len(df.tic.unique()))\nprint(df.tic.value_counts())\nprint(df.head())\nprint(df.tail())\nprint(df.shape)\nINDICATORS = ['macd',",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "INDICATORS",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "INDICATORS = ['macd',\n               'rsi_30',\n               'cci_30',\n               'dx_30']\nfe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "fe",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "fe = FeatureEngineer(use_technical_indicator=True,\n                     tech_indicator_list = INDICATORS,\n                     use_turbulence=True,\n                     user_defined_feature = False)\nprocessed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "processed = fe.preprocess_data(df)\nprocessed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, ",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "processed = processed.copy()\nprocessed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, ",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "processed = processed.fillna(0)\nprocessed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, ",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "processed",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "processed = processed.replace(np.inf,0)\nprint(processed.sample(5))\nstock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, ",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "stock_dimension",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "stock_dimension = len(processed.tic.unique())\nstate_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, ",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "state_space",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "state_space = 1 + 2*stock_dimension + len(INDICATORS)*stock_dimension\nprint(f\"Stock Dimension: {stock_dimension}, State Space: {state_space}\")\nenv_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "env_kwargs",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "env_kwargs = {\n    \"hmax\": 100, \n    \"initial_amount\": 1000000, \n    \"buy_cost_pct\": 0.001, \n    \"sell_cost_pct\": 0.001, \n    \"state_space\": state_space, \n    \"stock_dim\": stock_dimension, \n    \"tech_indicator_list\": INDICATORS,\n    \"action_space\": stock_dimension, \n    \"reward_scaling\": 1e-4,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "rebalance_window",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "rebalance_window = 63 #63 # rebalance_window is the number of days to retrain the model\nvalidation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "validation_window",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "validation_window = 63 #63 # validation_window is the number of days to do validation and trading (e.g. if validation_window=63, then both validation and trading period will be 63 days)\nensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "ensemble_agent",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "ensemble_agent = DRLEnsembleAgent(df=processed,\n                 train_period=(TRAIN_START_DATE,TRAIN_END_DATE),\n                 val_test_period=(TEST_START_DATE,TEST_END_DATE),\n                 rebalance_window=rebalance_window, \n                 validation_window=validation_window, \n                 **env_kwargs)\nA2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "A2C_model_kwargs",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "A2C_model_kwargs = {\n                    'n_steps': 5,\n                    'ent_coef': 0.005,\n                    'learning_rate': 0.0007\n                    }\nPPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "PPO_model_kwargs",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "PPO_model_kwargs = {\n                    \"ent_coef\":0.01,\n                    \"n_steps\": 2, #2048\n                    \"learning_rate\": 0.00025,\n                    \"batch_size\": 128\n                    }\nDDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "DDPG_model_kwargs",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "DDPG_model_kwargs = {\n                      #\"action_noise\":\"ornstein_uhlenbeck\",\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64\n                    }\nSAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "SAC_model_kwargs",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "SAC_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64}\nTD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "TD3_model_kwargs",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "TD3_model_kwargs = {\n                      \"buffer_size\": 1, #10_000\n                      \"learning_rate\": 0.0005,\n                      \"batch_size\": 64,\n}\ntimesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "timesteps_dict",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "timesteps_dict = {\n    'a2c': 1,  # Example value, adjust as needed\n    'ppo': 1,\n    'ddpg': 1,\n    'sac' : 1,\n    'td3' : 1\n}\ndf_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df_summary",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "df_summary = ensemble_agent.run_ensemble_strategy(\n    A2C_model_kwargs,\n    PPO_model_kwargs,\n    DDPG_model_kwargs,\n    SAC_model_kwargs,\n    TD3_model_kwargs,\n    timesteps_dict\n)\nprint(df_summary)\nunique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "unique_trade_date",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "unique_trade_date = processed[(processed.date > TEST_START_DATE)&(processed.date <= TEST_END_DATE)].date.unique()\ndf_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value = pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df_trade_date",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "df_trade_date = pd.DataFrame({'datadate':unique_trade_date})\ndf_account_value = pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "df_account_value",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "df_account_value = pd.DataFrame()\nfor i in range(rebalance_window+validation_window, len(unique_trade_date)+1,rebalance_window):\n    temp = pd.read_csv('results/account_value_trade_{}_{}.csv'.format('ensemble',i))\n    df_account_value = df_account_value._append(temp,ignore_index=True)\nsharpe=(252**0.5)*df_account_value.account_value.pct_change(1).mean()/df_account_value.account_value.pct_change(1).std()\nprint('Sharpe Ratio: ',sharpe)\ndf_account_value=df_account_value.join(df_trade_date[validation_window:].reset_index(drop=True))\ndf_account_value.head()\ndf_account_value.account_value.plot()\nprint(\"==============Get Backtest Results===========\")",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "now = datetime.datetime.now().strftime('%Y%m%d-%Hh%M')\nperf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "perf_stats_all = backtest_stats(account_value=df_account_value)\nperf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "perf_stats_all",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "perf_stats_all = pd.DataFrame(perf_stats_all)\n#baseline stats\nprint(\"==============Get Baseline Stats===========\")\nbaseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "baseline_df",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "baseline_df = get_baseline(\n        ticker=\"^DJI\", \n        start = df_account_value.loc[0,'date'],\n        end = df_account_value.loc[len(df_account_value)-1,'date'])\nstats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "stats = backtest_stats(baseline_df, value_col_name = 'close')\nprint(\"==============Compare to DJIA===========\")\n# %matplotlib inline\n# S&P 500: ^GSPC\n# Dow Jones Index: ^DJI\n# NASDAQ 100: ^NDX\nbacktest_plot(df_account_value, \n              baseline_ticker = '^DJI', \n              baseline_start = df_account_value.loc[0,'date'],\n              baseline_end = df_account_value.loc[len(df_account_value)-1,'date'])",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "pages.5_Stock_Trading",
        "description": "pages.5_Stock_Trading",
        "peekOfCode": "api = tradeapi.REST(API_KEY, API_SECRET, API_BASE_URL, api_version='v2')\ntry:\n    account = api.get_account()\n    print(f\"Account status: {account.status}\")\n    symbol = 'CAT'\n    qty = 1  # Quantity to buy\n    if (sharpe > - 94):\n        buy_order = api.submit_order(\n            symbol=symbol,\n            qty=qty,",
        "detail": "pages.5_Stock_Trading",
        "documentation": {}
    },
    {
        "label": "read_config",
        "kind": 2,
        "importPath": "pages.6_Setting",
        "description": "pages.6_Setting",
        "peekOfCode": "def read_config(file_path):\n    config = {}\n    with open(file_path, 'r') as file:\n        exec(file.read(), config)\n    return config\ndef write_config(file_path, config):\n    with open(file_path, 'w') as file:\n        file.write(\"# Configuration File\\n\\n\")\n        for key, value in config.items():\n            if not key.startswith('__'):",
        "detail": "pages.6_Setting",
        "documentation": {}
    },
    {
        "label": "write_config",
        "kind": 2,
        "importPath": "pages.6_Setting",
        "description": "pages.6_Setting",
        "peekOfCode": "def write_config(file_path, config):\n    with open(file_path, 'w') as file:\n        file.write(\"# Configuration File\\n\\n\")\n        for key, value in config.items():\n            if not key.startswith('__'):\n                if isinstance(value, str):\n                    file.write(f'{key} = \"{value}\"\\n')\n                elif isinstance(value, list):\n                    file.write(f'{key} = {value}\\n')\n                elif isinstance(value, dict):",
        "detail": "pages.6_Setting",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pages.6_Setting",
        "description": "pages.6_Setting",
        "peekOfCode": "def main():\n    st.title(\"Settings Page\")\n    # Read the configuration\n    config = read_config(config_file_path)\n    # Convert date strings to date objects\n    def parse_date(date_str):\n        try:\n            return datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        except ValueError:\n            return None",
        "detail": "pages.6_Setting",
        "documentation": {}
    },
    {
        "label": "config_file_path",
        "kind": 5,
        "importPath": "pages.6_Setting",
        "description": "pages.6_Setting",
        "peekOfCode": "config_file_path = 'pages/config.py'\ndef read_config(file_path):\n    config = {}\n    with open(file_path, 'r') as file:\n        exec(file.read(), config)\n    return config\ndef write_config(file_path, config):\n    with open(file_path, 'w') as file:\n        file.write(\"# Configuration File\\n\\n\")\n        for key, value in config.items():",
        "detail": "pages.6_Setting",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n  import pandas as pd\n  dir = [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n  check_and_make_directories( dir )\n  jprint(\"app.py: Directory Paths:   \",  \"   //\".join(dir),  '##')\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date = TRAIN_START_DATE,\n                      end_date = TRADE_END_DATE,\n                      ticker_list = config_tickers.DOW_30_TICKER).fetch_data()\n#  df.shape",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "API_KEY = \"PKVD6WOSPEMKS0UI6A3K\"\nAPI_SECRET = \"BxT64PIQtDBb*tnW\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "API_SECRET",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "API_SECRET = \"BxT64PIQtDBb*tnW\"\nTRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TRAIN_START_DATE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TRAIN_START_DATE = '2010-01-01'\nTRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TRAIN_END_DATE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TRAIN_END_DATE = '2021-10-01'\nTRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TRADE_START_DATE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TRADE_START_DATE = '2021-10-01'\nTRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TRADE_END_DATE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TRADE_END_DATE = '2023-03-01'\ncustom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "custom_css",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "custom_css = \"\"\"\n<style>\nbody {\nbackground-color: black; /* Background color (black) */\nfont-family: \"Times New Roman\", Times, serif; /* Font family (Times New Roman) */\ncolor: white; /* Text color (white) */\nline-height: 1.6; /* Line height for readability */\n}\nh1 {\ncolor: #3498db; /* Heading color (light blue) */",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "up_candle",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "up_candle = \"📈\"  # \\U0001F4C8\ndown_candle = \"\"  # \\U0001F4C9\n# Set page title and configure layout\nst.set_page_config(\n      page_title=\"Stock prediction Trainig\", \n      layout=\"wide\",\n      page_icon= \"📈\"\n      )\n# Apply the custom CSS\nst.markdown(custom_css, unsafe_allow_html=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "down_candle",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "down_candle = \"\"  # \\U0001F4C9\n# Set page title and configure layout\nst.set_page_config(\n      page_title=\"Stock prediction Trainig\", \n      layout=\"wide\",\n      page_icon= \"📈\"\n      )\n# Apply the custom CSS\nst.markdown(custom_css, unsafe_allow_html=True)\n#page title and subtitle",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "finviz_url",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "finviz_url = \"https://finviz.com/quote.ashx?t=\"\nexample_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "example_ticker_symbols",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "example_ticker_symbols = [\n\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\",\n\"JPM\", \"NFLX\", \"FB\", \"BRK.B\", \"V\",\n\"NVDA\", \"DIS\", \"BA\", \"IBM\", \"GE\",\n\"PG\", \"JNJ\", \"KO\", \"MCD\", \"T\",\n\"ADBE\", \"CRM\", \"INTC\", \"ORCL\", \"HD\"\n]\n# Use a selectbox to allow users to choose from example ticker symbols\nticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# if ticker:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "ticker = st.selectbox(\"Select a stock ticker symbol or enter your own:\", example_ticker_symbols)\n# if ticker:\n      #Fetching stock price data\ndef main():\n  import pandas as pd\n  dir = [DATA_SAVE_DIR, TRAINED_MODEL_DIR, TENSORBOARD_LOG_DIR, RESULTS_DIR]\n  check_and_make_directories( dir )\n  jprint(\"app.py: Directory Paths:   \",  \"   //\".join(dir),  '##')\n  \"\"\"app.py: Waiting data collection From Yahoo downloader ...\"\"\"\n  df = YahooDownloader(start_date = TRAIN_START_DATE,",
        "detail": "app",
        "documentation": {}
    }
]